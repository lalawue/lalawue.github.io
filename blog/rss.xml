<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../styles/rss_style.css" type="text/css"?>
<rss version="2.0"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:admin="http://webns.net/mvcb/"
     >
  <channel>
    <title>Sucha's Blog</title>
    <link>http://suchang.net/blog/index.html</link>
    <description>linux, emacs, programming, live and essay</description>
    <pubDate>Sun, 08 Mar 2015 00:47:53 +0800</pubDate>
    <generator>emacs-wiki-journal</generator>
    <language>zh-CN</language>
    <dc:creator>suchaaa@gmail.com (sucha)</dc:creator>

    <item>
      <title>[iOS] 被逼的 VFL</title>
      <guid>http://suchang.net/blog/2015-03.html#p1</guid>
      <pubDate>2015-03-07T23:41:59+0800</pubDate>
      <dc:creator>sucha</dc:creator>
      <category>CategoryProgramming</category>
      <description><![CDATA[<p>
把几年前的 app demo 搬出来，当年还没有 5、5s、6、6p 的时候，界面的布局是
简单的，可是这两年 duang 一下出来了这么多新机器，现在 iOS 下屏幕分辨率的
分裂程度也是让人目瞪口呆。

</p>

<p>
当年一个控件 xib 就可以横行天下，5、5s 出来后有些控件不得不加了一个 xib，
6、6p 出来后，我想我有时是拒绝使用 xib 了，妹的 6 跟 6p 的分辨率都没什么
关联嘛。

</p>

<p>
官方的说法 5、5s、6 都是 2x，6p 是 3x，并且为动态的控件还加了 autosize，
可这玩意儿我不懂用。

</p>

<p>
学着在 xib 里面使用 constraints，总是达不到自己想要的效果，折腾了好久好
久，腰酸背痛是真的。

</p>

<p>
看了一下官方那一页 VFL，第一次感觉到不知所云。于是上 github 找替代品，比
如 <a class="nonexistent" href="mailto:suchaaa@gmail.com">PureLayout</a>，用了一下，使用上有些限制，且效果仍然不是我想要的。

</p>

<p>
说一下我要的效果，table view cell 里面放多张方形图片，portrait 跟
landscape 下布局不一样，前者是

</p>

<pre class="example">space | image | space | image | fixed space
</pre>

<p>
后者是三个 image，而且我还考虑 6p 下面多加一个 image。如果我选择 xib，不
是累死。

</p>

<p>
即便 <a class="nonexistent" href="mailto:suchaaa@gmail.com">PureLayout</a>，还需要我指定中间间隔 space 的宽度，可我想这不是需要动态
计算的吗，如果我能知道这个宽度的值，我都可以自己计算 frame 的大小咯，还
要constraints 干嘛，我都 specify 了。

</p>

<p>
我不明白的是，当年 CSS 都可以指定某个标签具体位置的百分比，方位，为啥水
果的 VFL 不行呢，看起来 <a class="nonexistent" href="mailto:suchaaa@gmail.com">PureLayout</a> 也不好使呀，比如第三个例子，我想要的
效果还有距离。

</p>

<p>
于是又 baidu、bing VFL 的资料，官网又硬着头皮看了一下，终于有点开窍了，
后来发现其实 VFL 是简单的。

</p>

<p>
它的基础是所有需要动态伸缩的东西，都是一个 UIView（我是这么理解的），所
有的数值，都是固定的，要么是间隔，要么是相互关系，比如宽是高的两倍。

</p>

<p>
这就清楚了，其实官方 VFL 里面的 Spacing and Wrapping 举的例子就很清晰了，
我上面要的效果里面，space 都是 UIView，动态计算就好。

</p>

<p>
指定三个 image 宽、高相等，三个 image 的宽都相等，多个 space 的宽都相等，
然后在指定 image 的高度（Y值）就足够了，后面 fix space 就不需要一个
UIView 了，可以直接指定了。

</p>

<p>
相比之下，感觉到是 IB 里面的 constraits 反而操作复杂了，而且经常是说限制
不够，运行又出错什么的。

</p>

<p>
可是明明二维的坐标，x、y 可以确定的话，那个东西就固定了呀，IB 会有让我找
不着北的感觉，且里面的 constraints 也不容易看出来，太乱。

</p>

<p>
相比之下 VFL 就好很多，只是概念不好说清，比如那个 space，我是先入为主，
觉得为啥不能像 CSS 一样，直接指定 UIView 的位置呢，谁能想到即便官方的文
档里面，需要动态计算大小的元素，只能是 UIView。

</p>

<p>
写了一点 VFL 后，github 上又找了 Auto Layout Shorthand，但貌似不是完全的
映射，它自己封装了一些东西，只能作罢。

</p>

<p>
所以我也简单封装了自己的一些东西，试用了一个小时，感觉还不错，也放到 gist 上面
了。

</p>

<pre class="source"><span class="comment-delimiter">// </span><span class="comment">formula as 'width == width'
</span><span class="keyword">static</span> <span class="type">NSLayoutConstraint</span>*
<span class="function-name">_lcItemRel</span>(<span class="type">UIView</span> *<span class="variable-name">v1</span>, <span class="type">NSString</span> *<span class="variable-name">formula</span>, <span class="type">UIView</span> *<span class="variable-name">v2</span>, <span class="type">float</span> <span class="variable-name">ratio</span>, <span class="type">float</span> <span class="variable-name">constant</span>) {
    <span class="keyword">static</span> <span class="type">NSDictionary</span> *<span class="variable-name">attrValueForName</span> = <span class="constant">nil</span>;
    <span class="keyword">static</span> <span class="type">dispatch_once_t</span> <span class="variable-name">attrOnceToken</span>;
    dispatch_once(&amp;attrOnceToken, ^{
        attrValueForName =
        @{
          @<span class="string">"left"</span>:      @(NSLayoutAttributeLeft),
          @<span class="string">"right"</span>:     @(NSLayoutAttributeRight),
          @<span class="string">"top"</span>:       @(NSLayoutAttributeTop),
          @<span class="string">"bottom"</span>:    @(NSLayoutAttributeBottom),
          @<span class="string">"leading"</span>:   @(NSLayoutAttributeLeading),
          @<span class="string">"trailing"</span>:  @(NSLayoutAttributeTrailing),
          @<span class="string">"width"</span>:     @(NSLayoutAttributeWidth),
          @<span class="string">"height"</span>:    @(NSLayoutAttributeHeight),
          @<span class="string">"centerX"</span>:   @(NSLayoutAttributeCenterX),
          @<span class="string">"centerY"</span>:   @(NSLayoutAttributeCenterY),
          @<span class="string">"baseline"</span>:  @(NSLayoutAttributeBaseline),
          };
    });
    
    <span class="keyword">static</span> <span class="type">NSDictionary</span> *<span class="variable-name">relationValueForName</span> = <span class="constant">nil</span>;
    <span class="keyword">static</span> <span class="type">dispatch_once_t</span> <span class="variable-name">relationOnceToken</span>;
    dispatch_once(&amp;relationOnceToken, ^{
        relationValueForName =
        @{
          @<span class="string">"=="</span>:  @(NSLayoutRelationEqual),
          @<span class="string">"&gt;="</span>:  @(NSLayoutRelationGreaterThanOrEqual),
          @<span class="string">"&lt;="</span>:  @(NSLayoutRelationLessThanOrEqual),
          };
    });
    
    <span class="type">NSArray</span> *<span class="variable-name">kv</span> = [formula componentsSeparatedByString:@<span class="string">" "</span>];
    
    <span class="type">NSLayoutAttribute</span> <span class="variable-name">a1</span>, <span class="variable-name">a2</span>;
    <span class="type">NSLayoutRelation</span> <span class="variable-name">r</span>;
    
    <span class="keyword">if</span> (kv[0]==<span class="constant">nil</span> || kv[1]==<span class="constant">nil</span> || kv[2]==<span class="constant">nil</span>) {
        <span class="keyword">return</span> <span class="constant">nil</span>;
    }
    
    a1 = (NSLayoutAttribute)[((<span class="type">NSNumber</span>*)attrValueForName[kv[0]]) integerValue];
    a2 = (NSLayoutAttribute)[((<span class="type">NSNumber</span>*)attrValueForName[kv[2]]) integerValue];
    r = (NSLayoutRelation)[((<span class="type">NSNumber</span>*)relationValueForName[kv[1]]) integerValue];

    <span class="keyword">return</span> [<span class="type">NSLayoutConstraint</span> constraintWithItem:v1
                                        attribute:a1
                                        relatedBy:r
                                           toItem:v2
                                        attribute:a2
                                       multiplier:ratio
                                         constant:constant];
}

<span class="keyword">static</span> <span class="type">NSArray</span>*
<span class="function-name">_lcAryOfVFL</span>(<span class="type">NSString</span> *<span class="variable-name">formula</span>, <span class="type">NSLayoutFormatOptions</span> <span class="variable-name">opt</span>, <span class="type">NSDictionary</span> *<span class="variable-name">metric</span>, <span class="type">NSDictionary</span> *<span class="variable-name">views</span>) {
    <span class="keyword">return</span> [<span class="type">NSLayoutConstraint</span>
            constraintsWithVisualFormat:formula
            options:opt
            metrics:metric
            views:views];
}
</pre>


gist 地址，<a href="https://gist.github.com/lalawue/430102f68327fe302964">https://gist.github.com/lalawue/430102f68327fe302964</a>, 请自备
梯子。（最后又发现了个不错的 <a href="https://github.com/floriankugler/FLKAutoLayout">FLKAutoLayout</a>，不过没用过，具体就不知道了)

</p>

]]></description>
    </item>

    <item>
      <title>播放器使用 OpenAL 需要注意的</title>
      <guid>http://suchang.net/blog/2015-03.html#p0</guid>
      <pubDate>2015-03-07T23:22:57+0800</pubDate>
      <dc:creator>sucha</dc:creator>
      <category>CategoryProgramming</category>
      <description><![CDATA[<p>
扯一下写在线视频播放器使用 OpenAL 遇到过的坑吧。

</p>

<p>
由于不涉及到 listener 的位置与加速度，openal 参数的设置是简单的，且仅仅
只需要一个 source，一定量的 buffer，加上 streaming 的操作。

</p>

<p>
第一个问题来了，streaming 的操作，多个 buffer，可具体需要多少个呢，这个
还真不好说。我做过一些边界测试，不过没那么详细，iOS 真机还是模拟器上面，
总共可以开到 512 个 buffer name，这个数量总该够了吧。

</p>

<p>
或者，buffer 固定数量，自己先缓存一定量再扔进去，这样就解决了 buffer
name 不够的问题。我这边播放 1M 多的码流，每个 audio packet 大概 8k，可以
算出来自己需要缓存多少时间。

</p>

<p>
第二个问题，其实是 OpenAL 默认的情况，就是 queue 上去的 buffer，播放完毕，
到达 stop 的状态后，新的 buffer queue 进来，其实仍然是 queue 到这些
buffer 的后面去，一旦设置成 play 状态，会先播放一遍已经 stop 的旧数据。

</p>

<p>
这个 bug 瞒了我很久，因为我之前的 seek 有些问题，加上 audio cache 又不多，
现象不明显。

</p>

<p>
这意味每次 queue 新的 buffer 进去之前，把里面的 processed buffer 都给
unqueue 先才行，这绝壁是个坑啊，哪有 stop 后还赖着不走的。

</p>

<p>
第三个问题，processed 后的 buffer name，其实在 C 的操作里面，不好存到已
有的 buffer 数组里面，得新开一个 free_buffer name 的数组，来存放已经
processed 的 buffer name，要不然这些 buffer name 会丢失，再想扔新的数据
时就找不到它了。

</p>

<p>
如果无论如何都先 queue 完已申请的 buffer name，然后再取 processed 的，就
能避免这个问题。可这又溶于遇到第二个问题，我就是这么绕进去的。

</p>

<p>
典型的 API 足够简单，但是使用小别扭的问题。OpenAL 我是参考了 1.1 的
specification，对于写视频播放器足够了，iOS 上官方说是低阶 API，性能足够，
且又跨平台，何求？

</p>

]]></description>
    </item>

  </channel>
</rss>
