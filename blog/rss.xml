<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../styles/rss_style.css" type="text/css"?>
<rss version="2.0"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:admin="http://webns.net/mvcb/"
     >
  <channel>
    <title>Sucha's Blog</title>
    <link>http://suchang.net/blog/index.html</link>
    <description>linux, emacs, programming, live and essay</description>
    <pubDate>Tue, 07 Jan 2014 05:09:57 +0800</pubDate>
    <generator>emacs-wiki-journal</generator>
    <language>zh-CN</language>
    <dc:creator>suchaaa@gmail.com (sucha)</dc:creator>

    <item>
      <title>改成靠 Git''''Hub 托管了</title>
      <guid>http://suchang.net/blog/2014-01.html#p2</guid>
      <pubDate>2014-01-07T04:14:39+0800</pubDate>
      <dc:creator>sucha</dc:creator>
      <category>CategoryThisSite</category>
      <description><![CDATA[<p>
<a href="https://help.github.com/categories/20/articles">GitHub&#32;Pages</a> 真是个好东东，提供了静态网页的发布功能，本来是开放给开源工
程介绍页面的，不过我的主页也是完全开源的嘛，也可以借来托管了。

</p>

<p>
空间足够，git 方式更新，还可以绑定域名，对于我是完全足够了。虽然我的虚拟
主机还有近 7 个月才到期，价钱也不贵，而且之前才更新了上传脚本，这个工具
还没用爽呢，没想到才过了 2 天就完全用不上了。

</p>

<p>
因为 GitHub Pages 需要以 username.github.io 来创建仓库，如果生成这些静态
网页的源码也打算放到 github 托管，就像我是把整个主页都放到了 github 上，
并使用 EmacsWiki 在本地生成静态网页，如下的目录结构：

</p>

<pre class="source">homepage +
         - publish
         - sources
</pre>


那么可以考虑将 publish 作为 homepage 的一个 submodule 关联起来：

</p>

<pre class="source">$ cd homepage
$ git submodule add git@github.com:username/username.github.io.git publish
</pre>


这样 homepage 也可以单独作为 github 的工程了，publish 以及 sources 目录
可以互不干扰，大不了 homepage 下建立 .gitignore 屏蔽 publish 目录下的东
西好了。

</p>

<p>
最后域名绑定部分，看了一下 help 页面才搞定，Pages 这边是建立一个
CNAME 文件来记录 domain，另外还需要修改域名的 A 记录，次级域名的绑定还更
麻烦，我没看了。

</p>

<p>
免费使用，空间足够，自由度也高，吸引力够大的，可仔细想一下，感觉非程序员
还得学不少东西才能用起来：

</p>

<ul>
<li>创建静态网页
</li>
<li>在 github 上注册并建立 Pages 仓库
</li>
<li>git 的安装及日常使用
</li>
<li>绑定域名
</li>
<li>美化界面
</li>
</ul>

<p>
官方推荐采用支持 markdown 语法的静态网页生成工具，比如 JekyII，我看了一
下，感觉也不简单呀，要安装 Ruby 神马的。

</p>

<p>
git 的使用如果只是发布的话，感觉了解 git push 就够了吧。

</p>

<p>
界面部分 Pages 有提供不少主题，感觉这点应该还好啊，域名部分，有自己域名
的童鞋自然懂得。

</p>

<p>
貌似到现在为止还是程序猿玩的多。

</p>

<p>
我在 04 年就使用 wiki 语法来管理主页了，也是类似于 markdown 这样的轻量级
标记语言，静态 html 页面的发布部分一点都不需要改，加上又是 git 的日常使
用者，毫无压力。

</p>

]]></description>
    </item>

    <item>
      <title>更方便简洁的 Upload Script</title>
      <guid>http://suchang.net/blog/2014-01.html#p1</guid>
      <pubDate>2014-01-04T15:04:51+0800</pubDate>
      <dc:creator>sucha</dc:creator>
      <category>CategoryProgramming</category>
      <description><![CDATA[<p>
我一直使用一个上传脚本更新这个网站，这个脚本始于 2005 年五一
<a href="../blog/2005-05.html#p2">Upload&#32;shell&#32;script&#32;v1.2</a>，当时还使用什么 ncftpput 程序来对每一个更新过的
文件进行一次 ftp 连接传输。

</p>

<p>
然后这个脚本我居然还一直使用到了昨天，横跨 Win、Mac、Linux 系统，甚至还
在虚拟机里面用过，因为有 ncftpput 的依赖嘛，Win 下以及一些小系统上还真不
好弄。

</p>

<p>
虽然我很早就已经了解了终端下的 ftp 命令，还使用过好多次，可是我怎么就不
懂得结合起来、多动动脑筋呢。

</p>

<p>
下面做同样事情的脚本更简洁，只需要一次 ftp 连接，对于访问连接慢的大量更
新更为有利，且所需要的背景知识 05 年的我应该也已经具备了，深深地鄙视这么
多年的自己，笨死了。

</p>

<p>
贴一下核心部分就好了：

</p>

<pre class="source"><span class="comment-delimiter">#</span><span class="comment">!/bin/bash
</span>ftp -n &lt;&lt; <span class="string">"___EOF__"</span><span class="sh-heredoc">
open 192.168.33.88
user FTP_USER FTP_PASS_WORD
mkdir PATH_1_TO_CREATE
mkdir PATH_2/TO_CREATE
put LOCAL/PATH/FILE_1 REMOTE/PATH/FILE_1
put LOCAL/PATH/FILE_2 REMOTE/PATH/FILE_2
bye
"___EOF__"
</span></pre>


将需要创建的目录、上传的文件替换上去就好了。目前我是生成一个临时脚本，然
后运行上传命令。

</p>

<p>
我把这个脚本扔到了这里 <a href="https://github.com/lalawue/shell_script_stuff">https://github.com/lalawue/shell_script_stuff</a> 。

</p>

]]></description>
    </item>

    <item>
      <title>快速关闭远程 server 的 expect 脚本</title>
      <guid>http://suchang.net/blog/2014-01.html#p0</guid>
      <pubDate>2014-01-01T02:34:43+0800</pubDate>
      <dc:creator>sucha</dc:creator>
      <category>CategoryProgramming</category>
      <description><![CDATA[<p>
我停掉了之前的阿里云服务器，而在自己液晶屏亮不起来的破笔记本上安装了
ubuntu server，将 git server、nginx + wiki 都安装在了上面，反正 server
只是提供网络服务，不需要显示器。不过暂时每天的开关机还是需要的。

</p>

<p>
目前开机还是得按本本的电源键，不过关机倒是可以通过网络来进行，当然也就可
以使用下面的 expect 脚本了。

</p>

<p>
我是 ssh 上去关闭的，可以根据需要改成 telnet，一些适配的变量是 root 用户
ssh 上去的 prompt，shell 下 power off 的命令，一些发行版可能是 halt，不
过也得看电源模块的配置的吧，最后是 server power off 后广播出来的字符串。

</p>

<p>
按照惯例贴代码：

</p>

<pre class="source"><span class="comment-delimiter">#</span><span class="comment">!/usr/bin/expect
</span><span class="comment-delimiter">#</span><span class="comment">
</span><span class="comment-delimiter"># </span><span class="comment">create in 2013/12/31, by sucha in http://suchang.net
</span><span class="comment-delimiter">#</span><span class="comment">
</span><span class="comment-delimiter"># </span><span class="comment">Usage: halt_server host_ip
</span>
<span class="comment-delimiter"># </span><span class="comment">prompt for root@host_ip
</span><span class="builtin">set</span> serv_root_prompt <span class="string">"password"</span>
<span class="builtin">set</span> serv_halt_cmd <span class="string">"shutdown -h now"</span>
<span class="builtin">set</span> serv_halt_expect <span class="string">"halt"</span>

<span class="builtin">set</span> timeout 10
<span class="keyword">if</span> { $<span class="variable-name">argc</span> != 1 } {
    send_user <span class="string">"$argv0 \$HOST_IP\n"</span>
    <span class="keyword">exit</span>
}

<span class="comment-delimiter"># </span><span class="comment">get server ip
</span><span class="builtin">set</span> host [lrange $<span class="variable-name">argv</span> 0 0]

<span class="comment-delimiter"># </span><span class="comment">get root's passwd
</span>stty -echo
send_user -- <span class="string">"Password for root@$host: "</span>
expect_user -re <span class="string">"(.*)\n"</span>
send_user <span class="string">"\n"</span>
<span class="builtin">set</span> pass $<span class="variable-name">expect_out</span>(1,string)

<span class="comment-delimiter"># </span><span class="comment">login server and run halt
</span>spawn ssh -2 root@$<span class="variable-name">host</span>
expect $<span class="variable-name">serv_root_prompt</span>
send $<span class="variable-name">pass</span>\r
send $<span class="variable-name">serv_halt_cmd</span>\r
expect $<span class="variable-name">serv_halt_expect</span>
<span class="keyword">exit</span>
</pre>


]]></description>
    </item>

  </channel>
</rss>
