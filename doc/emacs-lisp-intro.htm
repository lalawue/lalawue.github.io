<html lang="en">
<head>
<title>Programming in Emacs Lisp</title>
<meta http-equiv="Content-Type" content="text/html">
<meta name=description content="Programming in Emacs Lisp">
<meta name=generator content="makeinfo 4.0b">
<link href="http://texinfo.org/" rel=generator-home>
</head>

<body>
<p><hr>
Node:<a name="Top">Top</a>,
Next:<a rel=next href="#Preface">Preface</a>
<br>

<h1>An Introduction to Programming in Emacs Lisp</h1>

<p>This is an introduction to <cite>Programming in Emacs Lisp</cite>, for
people who are not programmers.

<p>This master menu first lists each chapter and index; then it lists
every node in every chapter.

<ul>
<li><a href="#Preface">Preface</a>:                      What to look for. 
<li><a href="#List%20Processing">List Processing</a>:              What is Lisp? 
<li><a href="#Practicing%20Evaluation">Practicing Evaluation</a>:        Running several programs. 
<li><a href="#Writing%20Defuns">Writing Defuns</a>:               How to write function definitions. 
<li><a href="#Buffer%20Walk%20Through">Buffer Walk Through</a>:          Exploring a few buffer-related functions. 
<li><a href="#More%20Complex">More Complex</a>:                 A few, even more complex functions. 
<li><a href="#Narrowing%20&amp;%20Widening">Narrowing &amp; Widening</a>:         Restricting your and Emacs attention to
                                    a region. 
<li><a href="#car%20cdr%20&amp;%20cons">car cdr &amp; cons</a>:               Fundamental functions in Lisp. 
<li><a href="#Cutting%20&amp;%20Storing%20Text">Cutting &amp; Storing Text</a>:       Removing text and saving it. 
<li><a href="#List%20Implementation">List Implementation</a>:          How lists are implemented in the computer. 
<li><a href="#Yanking">Yanking</a>:                      Pasting stored text. 
<li><a href="#Loops%20&amp;%20Recursion">Loops &amp; Recursion</a>:            How to repeat a process. 
<li><a href="#Regexp%20Search">Regexp Search</a>:                Regular expression searches. 
<li><a href="#Counting%20Words">Counting Words</a>:               A review of repetition and regexps. 
<li><a href="#Words%20in%20a%20defun">Words in a defun</a>:             Counting words in a <code>defun</code>. 
<li><a href="#Readying%20a%20Graph">Readying a Graph</a>:             A prototype graph printing function. 
<li><a href="#Emacs%20Initialization">Emacs Initialization</a>:         How to write a <code>.emacs</code> file. 
<li><a href="#Debugging">Debugging</a>:                    How to run the Emacs Lisp debuggers. 
<li><a href="#Conclusion">Conclusion</a>:                   Now you have the basics. 
<li><a href="#the-the">the-the</a>:                      An appendix: how to find reduplicated words. 
<li><a href="#Kill%20Ring">Kill Ring</a>:                    An appendix: how the kill ring works. 
<li><a href="#Full%20Graph">Full Graph</a>:                   How to create a graph with labelled axes. 
<li><a href="#GNU%20Free%20Documentation%20License">GNU Free Documentation License</a>: 
<li><a href="#Index">Index</a>: 
<li><a href="#About%20the%20Author">About the Author</a>:

<p>--- The Detailed Node Listing ---

<p>Preface

</p><li><a href="#Why">Why</a>:                          Why learn Emacs Lisp? 
<li><a href="#On%20Reading%20this%20Text">On Reading this Text</a>:         Read, gain familiarity, pick up habits.... 
<li><a href="#Who%20You%20Are">Who You Are</a>:                  For whom this is written. 
<li><a href="#Lisp%20History">Lisp History</a>: 
<li><a href="#Note%20for%20Novices">Note for Novices</a>:             You can read this as a novice. 
<li><a href="#Thank%20You">Thank You</a>:

<p>List Processing

</p><li><a href="#Lisp%20Lists">Lisp Lists</a>:                   What are lists? 
<li><a href="#Run%20a%20Program">Run a Program</a>:                Any list in Lisp is a program ready to run. 
<li><a href="#Making%20Errors">Making Errors</a>:                Generating an error message. 
<li><a href="#Names%20&amp;%20Definitions">Names &amp; Definitions</a>:          Names of symbols and function definitions. 
<li><a href="#Lisp%20Interpreter">Lisp Interpreter</a>:             What the Lisp interpreter does. 
<li><a href="#Evaluation">Evaluation</a>:                   Running a program. 
<li><a href="#Variables">Variables</a>:                    Returning a value from a variable. 
<li><a href="#Arguments">Arguments</a>:                    Passing information to a function. 
<li><a href="#set%20&amp;%20setq">set &amp; setq</a>:                   Setting the value of a variable. 
<li><a href="#Summary">Summary</a>:                      The major points. 
<li><a href="#Error%20Message%20Exercises">Error Message Exercises</a>:

<p>Lisp Lists

</p><li><a href="#Numbers%20Lists">Numbers Lists</a>:                List have numbers, other lists, in them. 
<li><a href="#Lisp%20Atoms">Lisp Atoms</a>:                   Elemental entities. 
<li><a href="#Whitespace%20in%20Lists">Whitespace in Lists</a>:          Formating lists to be readable. 
<li><a href="#Typing%20Lists">Typing Lists</a>:                 How GNU Emacs helps you type lists.

<p>The Lisp Interpreter

</p><li><a href="#Complications">Complications</a>:                Variables, Special forms, Lists within. 
<li><a href="#Byte%20Compiling">Byte Compiling</a>:               Specially processing code for speed.

<p>Evaluation

</p><li><a href="#Evaluating%20Inner%20Lists">Evaluating Inner Lists</a>:       Lists within lists...

<p>Variables

</p><li><a href="#fill-column%20Example">fill-column Example</a>: 
<li><a href="#Void%20Function">Void Function</a>:                The error message for a symbol
                                  without a function. 
<li><a href="#Void%20Variable">Void Variable</a>:                The error message for a symbol without a value.

<p>Arguments

</p><li><a href="#Data%20types">Data types</a>:                   Types of data passed to a function. 
<li><a href="#Args%20as%20Variable%20or%20List">Args as Variable or List</a>:     An argument can be the value
                                  of a variable or list. 
<li><a href="#Variable%20Number%20of%20Arguments">Variable Number of Arguments</a>:   Some functions may take a
                                  variable number of arguments. 
<li><a href="#Wrong%20Type%20of%20Argument">Wrong Type of Argument</a>:       Passing an argument of the wrong type
                                  to a function. 
<li><a href="#message">message</a>:                      A useful function for sending messages.

<p>Setting the Value of a Variable

</p><li><a href="#Using%20set">Using set</a>:                    Setting values. 
<li><a href="#Using%20setq">Using setq</a>:                   Setting a quoted value. 
<li><a href="#Counting">Counting</a>:                     Using <code>setq</code> to count.

<p>Practicing Evaluation

</p><li><a href="#How%20to%20Evaluate">How to Evaluate</a>:              Typing editing commands or <kbd>C-x C-e</kbd>
                                  causes evaluation. 
<li><a href="#Buffer%20Names">Buffer Names</a>:                 Buffers and files are different. 
<li><a href="#Getting%20Buffers">Getting Buffers</a>:              Getting a buffer itself, not merely its name. 
<li><a href="#Switching%20Buffers">Switching Buffers</a>:            How to change to another buffer. 
<li><a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size &amp; Locations</a>:      Where point is located and the size of
                                the buffer. 
<li><a href="#Evaluation%20Exercise">Evaluation Exercise</a>:

<p>How To Write Function Definitions

</p><li><a href="#Primitive%20Functions">Primitive Functions</a>: 
<li><a href="#defun">defun</a>:                        The <code>defun</code> special form. 
<li><a href="#Install">Install</a>:                      Install a function definition. 
<li><a href="#Interactive">Interactive</a>:                  Making a function interactive. 
<li><a href="#Interactive%20Options">Interactive Options</a>:          Different options for <code>interactive</code>. 
<li><a href="#Permanent%20Installation">Permanent Installation</a>:       Installing code permanently. 
<li><a href="#let">let</a>:                          Creating and initializing local variables. 
<li><a href="#if">if</a>:                           What if? 
<li><a href="#else">else</a>:                         If--then--else expressions. 
<li><a href="#Truth%20&amp;%20Falsehood">Truth &amp; Falsehood</a>:            What Lisp considers false and true. 
<li><a href="#save-excursion">save-excursion</a>:               Keeping track of point, mark, and buffer. 
<li><a href="#Review">Review</a>: 
<li><a href="#defun%20Exercises">defun Exercises</a>:

<p>Install a Function Definition

</p><li><a href="#Effect%20of%20installation">Effect of installation</a>: 
<li><a href="#Change%20a%20defun">Change a defun</a>:               How to change a function definition.

<p>Make a Function Interactive

</p><li><a href="#Interactive%20multiply-by-seven">Interactive multiply-by-seven</a>:   An overview. 
<li><a href="#multiply-by-seven%20in%20detail">multiply-by-seven in detail</a>:   The interactive version.

<p><code>let</code>

<p>
</p><li><a href="#Prevent%20confusion">Prevent confusion</a>: 
<li><a href="#Parts%20of%20let%20Expression">Parts of let Expression</a>: 
<li><a href="#Sample%20let%20Expression">Sample let Expression</a>: 
<li><a href="#Uninitialized%20let%20Variables">Uninitialized let Variables</a>:

<p>The <code>if</code> Special Form

</p><li><a href="#if%20in%20more%20detail">if in more detail</a>: 
<li><a href="#type-of-animal%20in%20detail">type-of-animal in detail</a>:     An example of an <code>if</code> expression.

<p>Truth and Falsehood in Emacs Lisp

</p><li><a href="#nil%20explained">nil explained</a>:                <code>nil</code> has two meanings.

<p><code>save-excursion</code>

<p>
</p><li><a href="#Point%20and%20mark">Point and mark</a>:               A review of various locations. 
<li><a href="#Template%20for%20save-excursion">Template for save-excursion</a>:

<p>A Few Buffer--Related Functions

</p><li><a href="#Finding%20More">Finding More</a>:                 How to find more information. 
<li><a href="#simplified-beginning-of-buffer">simplified-beginning-of-buffer</a>:   Shows <code>goto-char</code>,
                                <code>point-min</code>, and <code>push-mark</code>. 
<li><a href="#mark-whole-buffer">mark-whole-buffer</a>:            Almost the same as <code>beginning-of-buffer</code>. 
<li><a href="#append-to-buffer">append-to-buffer</a>:             Uses <code>save-excursion</code> and
                                <code>insert-buffer-substring</code>. 
<li><a href="#Buffer%20Related%20Review">Buffer Related Review</a>:        Review. 
<li><a href="#Buffer%20Exercises">Buffer Exercises</a>:

<p>The Definition of <code>mark-whole-buffer</code>

</p><li><a href="#mark-whole-buffer%20overview">mark-whole-buffer overview</a>: 
<li><a href="#Body%20of%20mark-whole-buffer">Body of mark-whole-buffer</a>:    Only three lines of code.

<p>The Definition of <code>append-to-buffer</code>

</p><li><a href="#append-to-buffer%20overview">append-to-buffer overview</a>: 
<li><a href="#append%20interactive">append interactive</a>:           A two part interactive expression. 
<li><a href="#append-to-buffer%20body">append-to-buffer body</a>:        Incorporates a <code>let</code> expression. 
<li><a href="#append%20save-excursion">append save-excursion</a>:        How the <code>save-excursion</code> works.

<p>A Few More Complex Functions

</p><li><a href="#copy-to-buffer">copy-to-buffer</a>:               With <code>set-buffer</code>, <code>get-buffer-create</code>. 
<li><a href="#insert-buffer">insert-buffer</a>:                Read-only, and with <code>or</code>. 
<li><a href="#beginning-of-buffer">beginning-of-buffer</a>:          Shows <code>goto-char</code>,
                                <code>point-min</code>, and <code>push-mark</code>. 
<li><a href="#Second%20Buffer%20Related%20Review">Second Buffer Related Review</a>: 
<li><a href="#optional%20Exercise">optional Exercise</a>:

<p>The Definition of <code>insert-buffer</code>

</p><li><a href="#insert-buffer%20code">insert-buffer code</a>: 
<li><a href="#insert-buffer%20interactive">insert-buffer interactive</a>:    When you can read, but not write. 
<li><a href="#insert-buffer%20body">insert-buffer body</a>:           The body has an <code>or</code> and a <code>let</code>. 
<li><a href="#if%20&amp;%20or">if &amp; or</a>:                      Using an <code>if</code> instead of an <code>or</code>. 
<li><a href="#Insert%20or">Insert or</a>:                    How the <code>or</code> expression works. 
<li><a href="#Insert%20let">Insert let</a>:                   Two <code>save-excursion</code> expressions.

<p>The Interactive Expression in <code>insert-buffer</code>

</p><li><a href="#Read-only%20buffer">Read-only buffer</a>:             When a buffer cannot be modified. 
<li><a href="#b%20for%20interactive">b for interactive</a>:            An existing buffer or else its name.

<p>Complete Definition of <code>beginning-of-buffer</code>

</p><li><a href="#Optional%20Arguments">Optional Arguments</a>: 
<li><a href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>:   Example with optional argument. 
<li><a href="#beginning-of-buffer%20complete">beginning-of-buffer complete</a>:

<p><code>beginning-of-buffer</code> with an Argument

<p>
</p><li><a href="#Disentangle%20beginning-of-buffer">Disentangle beginning-of-buffer</a>: 
<li><a href="#Large%20buffer%20case">Large buffer case</a>: 
<li><a href="#Small%20buffer%20case">Small buffer case</a>:

<p>Narrowing and Widening

</p><li><a href="#Narrowing%20advantages">Narrowing advantages</a>:         The advantages of narrowing
<li><a href="#save-restriction">save-restriction</a>:             The <code>save-restriction</code> special form. 
<li><a href="#what-line">what-line</a>:                    The number of the line that point is on. 
<li><a href="#narrow%20Exercise">narrow Exercise</a>:

<p><code>car</code>, <code>cdr</code>, <code>cons</code>: Fundamental Functions

<p>
</p><li><a href="#Strange%20Names">Strange Names</a>:                An historical aside: why the strange names? 
<li><a href="#car%20&amp;%20cdr">car &amp; cdr</a>:                    Functions for extracting part of a list. 
<li><a href="#cons">cons</a>:                         Constructing a list. 
<li><a href="#nthcdr">nthcdr</a>:                       Calling <code>cdr</code> repeatedly. 
<li><a href="#nth">nth</a>: 
<li><a href="#setcar">setcar</a>:                       Changing the first element of a list. 
<li><a href="#setcdr">setcdr</a>:                       Changing the rest of a list. 
<li><a href="#cons%20Exercise">cons Exercise</a>:

<p><code>cons</code>

<p>
</p><li><a href="#Build%20a%20list">Build a list</a>: 
<li><a href="#length">length</a>:                       How to find the length of a list.

<p>Cutting and Storing Text

</p><li><a href="#Storing%20Text">Storing Text</a>:                 Text is stored in a list. 
<li><a href="#zap-to-char">zap-to-char</a>:                  Cutting out text up to a character. 
<li><a href="#kill-region">kill-region</a>:                  Cutting text out of a region. 
<li><a href="#Digression%20into%20C">Digression into C</a>:            Minor note on C programming language macros. 
<li><a href="#defvar">defvar</a>:                       How to give a variable an initial value. 
<li><a href="#copy-region-as-kill">copy-region-as-kill</a>:          A definition for copying text. 
<li><a href="#cons%20&amp;%20search-fwd%20Review">cons &amp; search-fwd Review</a>: 
<li><a href="#search%20Exercises">search Exercises</a>:

<p><code>zap-to-char</code>

<p>
</p><li><a href="#Complete%20zap-to-char">Complete zap-to-char</a>:         The complete implementation. 
<li><a href="#zap-to-char%20interactive">zap-to-char interactive</a>:      A three part interactive expression. 
<li><a href="#zap-to-char%20body">zap-to-char body</a>:             A short overview. 
<li><a href="#search-forward">search-forward</a>:               How to search for a string. 
<li><a href="#progn">progn</a>:                        The <code>progn</code> special form. 
<li><a href="#Summing%20up%20zap-to-char">Summing up zap-to-char</a>:       Using <code>point</code> and <code>search-forward</code>.

<p><code>kill-region</code>

<p>
</p><li><a href="#Complete%20kill-region">Complete kill-region</a>:         The function definition. 
<li><a href="#condition-case">condition-case</a>:               Dealing with a problem. 
<li><a href="#delete-and-extract-region">delete-and-extract-region</a>:    Doing the work.

<p>Initializing a Variable with <code>defvar</code>

</p><li><a href="#See%20variable%20current%20value">See variable current value</a>: 
<li><a href="#defvar%20and%20asterisk">defvar and asterisk</a>:          An old-time convention.

<p><code>copy-region-as-kill</code>

<p>
</p><li><a href="#Complete%20copy-region-as-kill">Complete copy-region-as-kill</a>:   The complete function definition. 
<li><a href="#copy-region-as-kill%20body">copy-region-as-kill body</a>:     The body of <code>copy-region-as-kill</code>.

<p>The Body of <code>copy-region-as-kill</code>

</p><li><a href="#last-command%20&amp;%20this-command">last-command &amp; this-command</a>: 
<li><a href="#kill-append%20function">kill-append function</a>: 
<li><a href="#kill-new%20function">kill-new function</a>:

<p>How Lists are Implemented

</p><li><a href="#Lists%20diagrammed">Lists diagrammed</a>: 
<li><a href="#Symbols%20as%20Chest">Symbols as Chest</a>:             Exploring a powerful metaphor. 
<li><a href="#List%20Exercise">List Exercise</a>:

<p>Yanking Text Back

</p><li><a href="#Kill%20Ring%20Overview">Kill Ring Overview</a>:           The kill ring is a list. 
<li><a href="#kill-ring-yank-pointer">kill-ring-yank-pointer</a>:       The <code>kill-ring-yank-pointer</code> variable. 
<li><a href="#yank%20nthcdr%20Exercises">yank nthcdr Exercises</a>:

<p>Loops and Recursion

</p><li><a href="#while">while</a>:                        Causing a stretch of code to repeat. 
<li><a href="#dolist%20dotimes">dolist dotimes</a>: 
<li><a href="#Recursion">Recursion</a>:                    Causing a function to call itself. 
<li><a href="#Looping%20exercise">Looping exercise</a>:

<p><code>while</code>

<p>
</p><li><a href="#Looping%20with%20while">Looping with while</a>:           Repeat so long as test returns true. 
<li><a href="#Loop%20Example">Loop Example</a>:                 A <code>while</code> loop that uses a list. 
<li><a href="#print-elements-of-list">print-elements-of-list</a>:       Uses <code>while</code>, <code>car</code>, <code>cdr</code>. 
<li><a href="#Incrementing%20Loop">Incrementing Loop</a>:            A loop with an incrementing counter. 
<li><a href="#Decrementing%20Loop">Decrementing Loop</a>:            A loop with a decrementing counter.

<p>A Loop with an Incrementing Counter

</p><li><a href="#Incrementing%20Example">Incrementing Example</a>:         Counting pebbles in a triangle. 
<li><a href="#Inc%20Example%20parts">Inc Example parts</a>:            The parts of the function definition. 
<li><a href="#Inc%20Example%20altogether">Inc Example altogether</a>:       Putting the function definition together.

<p>Loop with a Decrementing Counter

</p><li><a href="#Decrementing%20Example">Decrementing Example</a>:         More pebbles on the beach. 
<li><a href="#Dec%20Example%20parts">Dec Example parts</a>:            The parts of the function definition. 
<li><a href="#Dec%20Example%20altogether">Dec Example altogether</a>:       Putting the function definition together.

<p>Save your time: <code>dolist</code> and <code>dotimes</code>

</p><li><a href="#dolist">dolist</a>: 
<li><a href="#dotimes">dotimes</a>:

<p>Recursion

</p><li><a href="#Building%20Robots">Building Robots</a>:              Same model, different serial number ... 
<li><a href="#Recursive%20Definition%20Parts">Recursive Definition Parts</a>:   Walk until you stop ... 
<li><a href="#Recursion%20with%20list">Recursion with list</a>:          Using a list as the test whether to recurse. 
<li><a href="#Recursive%20triangle%20function">Recursive triangle function</a>: 
<li><a href="#Recursion%20with%20cond">Recursion with cond</a>: 
<li><a href="#Recursive%20Patterns">Recursive Patterns</a>:           Often used templates. 
<li><a href="#No%20Deferment">No Deferment</a>:                 Don't store up work ... 
<li><a href="#No%20deferment%20solution">No deferment solution</a>:

<p>Recursion in Place of a Counter

</p><li><a href="#Recursive%20Example%20arg%20of%201%20or%202">Recursive Example arg of 1 or 2</a>: 
<li><a href="#Recursive%20Example%20arg%20of%203%20or%204">Recursive Example arg of 3 or 4</a>:

<p>Recursive Patterns

</p><li><a href="#Every">Every</a>: 
<li><a href="#Accumulate">Accumulate</a>: 
<li><a href="#Keep">Keep</a>:

<p>Regular Expression Searches

</p><li><a href="#sentence-end">sentence-end</a>:                 The regular expression for <code>sentence-end</code>. 
<li><a href="#re-search-forward">re-search-forward</a>:            Very similar to <code>search-forward</code>. 
<li><a href="#forward-sentence">forward-sentence</a>:             A straightforward example of regexp search. 
<li><a href="#forward-paragraph">forward-paragraph</a>:            A somewhat complex example. 
<li><a href="#etags">etags</a>:                        How to create your own <code>TAGS</code> table. 
<li><a href="#Regexp%20Review">Regexp Review</a>: 
<li><a href="#re-search%20Exercises">re-search Exercises</a>:

<p><code>forward-sentence</code>

<p>
</p><li><a href="#Complete%20forward-sentence">Complete forward-sentence</a>: 
<li><a href="#fwd-sentence%20while%20loops">fwd-sentence while loops</a>:     Two <code>while</code> loops. 
<li><a href="#fwd-sentence%20re-search">fwd-sentence re-search</a>:       A regular expression search.

<p><code>forward-paragraph</code>: a Goldmine of Functions

<p>
</p><li><a href="#forward-paragraph%20in%20brief">forward-paragraph in brief</a>:   Key parts of the function definition. 
<li><a href="#fwd-para%20let">fwd-para let</a>:                 The <code>let*</code> expression. 
<li><a href="#fwd-para%20while">fwd-para while</a>:               The forward motion <code>while</code> loop. 
<li><a href="#fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>:   Movement between paragraphs. 
<li><a href="#fwd-para%20within%20paragraph">fwd-para within paragraph</a>:    Movement within paragraphs. 
<li><a href="#fwd-para%20no%20fill%20prefix">fwd-para no fill prefix</a>:      When there is no fill prefix. 
<li><a href="#fwd-para%20with%20fill%20prefix">fwd-para with fill prefix</a>:    When there is a fill prefix. 
<li><a href="#fwd-para%20summary">fwd-para summary</a>:             Summary of <code>forward-paragraph</code> code.

<p>Counting: Repetition and Regexps

</p><li><a href="#Why%20Count%20Words">Why Count Words</a>: 
<li><a href="#count-words-region">count-words-region</a>:           Use a regexp, but find a problem. 
<li><a href="#recursive-count-words">recursive-count-words</a>:        Start with case of no words in region. 
<li><a href="#Counting%20Exercise">Counting Exercise</a>:

<p>The <code>count-words-region</code> Function

</p><li><a href="#Design%20count-words-region">Design count-words-region</a>:    The definition using a <code>while</code> loop. 
<li><a href="#Whitespace%20Bug">Whitespace Bug</a>:               The Whitespace Bug in <code>count-words-region</code>.

<p>Counting Words in a <code>defun</code>

</p><li><a href="#Divide%20and%20Conquer">Divide and Conquer</a>: 
<li><a href="#Words%20and%20Symbols">Words and Symbols</a>:            What to count? 
<li><a href="#Syntax">Syntax</a>:                       What constitutes a word or symbol? 
<li><a href="#count-words-in-defun">count-words-in-defun</a>:         Very like <code>count-words</code>. 
<li><a href="#Several%20defuns">Several defuns</a>:               Counting several defuns in a file. 
<li><a href="#Find%20a%20File">Find a File</a>:                  Do you want to look at a file? 
<li><a href="#lengths-list-file">lengths-list-file</a>:            A list of the lengths of many definitions. 
<li><a href="#Several%20files">Several files</a>:                Counting in definitions in different files. 
<li><a href="#Several%20files%20recursively">Several files recursively</a>:    Recursively counting in different files. 
<li><a href="#Prepare%20the%20data">Prepare the data</a>:             Prepare the data for display in a graph.

<p>Count Words in <code>defuns</code> in Different Files

</p><li><a href="#lengths-list-many-files">lengths-list-many-files</a>:      Return a list of the lengths of defuns. 
<li><a href="#append">append</a>:                       Attach one list to another.

<p>Prepare the Data for Display in a Graph

</p><li><a href="#Sorting">Sorting</a>:                      Sorting lists. 
<li><a href="#Files%20List">Files List</a>:                   Making a list of files. 
<li><a href="#Counting%20function%20definitions">Counting function definitions</a>:

<p>Readying a Graph

</p><li><a href="#Columns%20of%20a%20graph">Columns of a graph</a>: 
<li><a href="#graph-body-print">graph-body-print</a>:             How to print the body of a graph. 
<li><a href="#recursive-graph-body-print">recursive-graph-body-print</a>: 
<li><a href="#Printed%20Axes">Printed Axes</a>: 
<li><a href="#Line%20Graph%20Exercise">Line Graph Exercise</a>:

<p>Your <code>.emacs</code> File

</p><li><a href="#Default%20Configuration">Default Configuration</a>: 
<li><a href="#Site-wide%20Init">Site-wide Init</a>:               You can write site-wide init files. 
<li><a href="#defcustom">defcustom</a>:                    Emacs will write code for you. 
<li><a href="#Beginning%20a%20.emacs%20File">Beginning a .emacs File</a>:      How to write a <code>.emacs file</code>. 
<li><a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>:           Automatically wrap lines. 
<li><a href="#Mail%20Aliases">Mail Aliases</a>:                 Use abbreviations for email addresses. 
<li><a href="#Indent%20Tabs%20Mode">Indent Tabs Mode</a>:             Don't use tabs with TeX
<li><a href="#Keybindings">Keybindings</a>:                  Create some personal keybindings. 
<li><a href="#Keymaps">Keymaps</a>:                      More about key binding. 
<li><a href="#Loading%20Files">Loading Files</a>:                Load (i.e., evaluate) files automatically. 
<li><a href="#Autoload">Autoload</a>:                     Make functions available. 
<li><a href="#Simple%20Extension">Simple Extension</a>:             Define a function; bind it to a key. 
<li><a href="#X11%20Colors">X11 Colors</a>:                   Colors in version 19 in X. 
<li><a href="#Miscellaneous">Miscellaneous</a>: 
<li><a href="#Mode%20Line">Mode Line</a>:                    How to customize your mode line.

<p>Debugging

</p><li><a href="#debug">debug</a>:                        How to use the built-in debugger. 
<li><a href="#debug-on-entry">debug-on-entry</a>:               Start debugging when you call a function. 
<li><a href="#debug-on-quit">debug-on-quit</a>:                Start debugging when you quit with <kbd>C-g</kbd>. 
<li><a href="#edebug">edebug</a>:                       How to use Edebug, a source level debugger. 
<li><a href="#Debugging%20Exercises">Debugging Exercises</a>:

<p>Handling the Kill Ring

</p><li><a href="#rotate-yank-pointer">rotate-yank-pointer</a>:          Move a pointer along a list and around. 
<li><a href="#yank">yank</a>:                         Paste a copy of a clipped element. 
<li><a href="#yank-pop">yank-pop</a>:                     Insert first element pointed to.

<p>The <code>rotate-yank-pointer</code> Function

</p><li><a href="#Understanding%20rotate-yk-ptr">Understanding rotate-yk-ptr</a>: 
<li><a href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>:           The body of <code>rotate-yank-pointer</code>.

<p>The Body of <code>rotate-yank-pointer</code>

</p><li><a href="#Digression%20concerning%20error">Digression concerning error</a>:   How to mislead humans, but not computers. 
<li><a href="#rotate-yk-ptr%20else-part">rotate-yk-ptr else-part</a>:      The else-part of the <code>if</code> expression. 
<li><a href="#Remainder%20Function">Remainder Function</a>:           The remainder, <code>%</code>, function. 
<li><a href="#rotate-yk-ptr%20remainder">rotate-yk-ptr remainder</a>:      Using <code>%</code> in <code>rotate-yank-pointer</code>. 
<li><a href="#kill-rng-yk-ptr%20last%20elt">kill-rng-yk-ptr last elt</a>:     Pointing to the last element.

<p><code>yank</code>

<p>
</p><li><a href="#rotate-yk-ptr%20arg">rotate-yk-ptr arg</a>:            Pass the argument to <code>rotate-yank-pointer</code>. 
<li><a href="#rotate-yk-ptr%20negative%20arg">rotate-yk-ptr negative arg</a>:   Pass a negative argument.

<p>A Graph with Labelled Axes

</p><li><a href="#Labelled%20Example">Labelled Example</a>: 
<li><a href="#print-graph%20Varlist">print-graph Varlist</a>:          <code>let</code> expression in <code>print-graph</code>. 
<li><a href="#print-Y-axis">print-Y-axis</a>:                 Print a label for the vertical axis. 
<li><a href="#print-X-axis">print-X-axis</a>:                 Print a horizontal label. 
<li><a href="#Print%20Whole%20Graph">Print Whole Graph</a>:            The function to print a complete graph.

<p>The <code>print-Y-axis</code> Function

</p><li><a href="#Height%20of%20label">Height of label</a>:              What height for the Y axis? 
<li><a href="#Compute%20a%20Remainder">Compute a Remainder</a>:          How to compute the remainder of a division. 
<li><a href="#Y%20Axis%20Element">Y Axis Element</a>:               Construct a line for the Y axis. 
<li><a href="#Y-axis-column">Y-axis-column</a>:                Generate a list of Y axis labels. 
<li><a href="#print-Y-axis%20Penultimate">print-Y-axis Penultimate</a>:     A not quite final version.

<p>The <code>print-X-axis</code> Function

</p><li><a href="#Similarities%20differences">Similarities differences</a>:     Much like <code>print-Y-axis</code>, but not exactly. 
<li><a href="#X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>:             Create tic marks for the horizontal axis.

<p>Printing the Whole Graph

</p><li><a href="#The%20final%20version">The final version</a>:            A few changes. 
<li><a href="#Test%20print-graph">Test print-graph</a>:             Run a short test. 
<li><a href="#Graphing%20words%20in%20defuns">Graphing words in defuns</a>:     Executing the final code. 
<li><a href="#lambda">lambda</a>:                       How to write an anonymous function. 
<li><a href="#mapcar">mapcar</a>:                       Apply a function to elements of a list. 
<li><a href="#Another%20Bug">Another Bug</a>:                  Yet another bug <small>...</small> most insidious. 
<li><a href="#Final%20printed%20graph">Final printed graph</a>:          The graph itself!

</ul>

<p><hr>
Node:<a name="Preface">Preface</a>,
Next:<a rel=next href="#List%20Processing">List Processing</a>,
Previous:<a rel=previous href="#Top">Top</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>Preface</h1>

<p>Most of the GNU Emacs integrated environment is written in the programming
language called Emacs Lisp.  The code written in this programming
language is the software--the sets of instructions--that tell the
computer what to do when you give it commands.  Emacs is designed so
that you can write new code in Emacs Lisp and easily install it as an
extension to the editor.

<p>(GNU Emacs is sometimes called an "extensible editor", but it does
much more than provide editing capabilities.  It is better to refer to
Emacs as an "extensible computing environment".  However, that
phrase is quite a mouthful.  It is easier to refer to Emacs simply as
an editor.  Moreover, everything you do in Emacs--find the Mayan date
and phases of the moon, simplify polynomials, debug code, manage
files, read letters, write books--all these activities are kinds of
editing in the most general sense of the word.)

<ul>
<li><a href="#Why">Why</a>:                          Why learn Emacs Lisp? 
<li><a href="#On%20Reading%20this%20Text">On Reading this Text</a>:         Read, gain familiarity, pick up habits.... 
<li><a href="#Who%20You%20Are">Who You Are</a>:                  For whom this is written. 
<li><a href="#Lisp%20History">Lisp History</a>: 
<li><a href="#Note%20for%20Novices">Note for Novices</a>:             You can read this as a novice. 
<li><a href="#Thank%20You">Thank You</a>: 
</ul>

<p><hr>
Node:<a name="Why">Why</a>,
Next:<a rel=next href="#On%20Reading%20this%20Text">On Reading this Text</a>,
Previous:<a rel=previous href="#Preface">Preface</a>,
Up:<a rel=up href="#Preface">Preface</a>
<br>

<h2>Why Study Emacs Lisp?</h2>

<p>Although Emacs Lisp is usually thought of in association only with Emacs,
it is a full computer programming language.  You can use Emacs Lisp as
you would any other programming language.

<p>Perhaps you want to understand programming; perhaps you want to extend
Emacs; or perhaps you want to become a programmer.  This introduction to
Emacs Lisp is designed to get you started: to guide you in learning the
fundamentals of programming, and more importantly, to show you how you
can teach yourself to go further.

<p><hr>
Node:<a name="On%20Reading%20this%20Text">On Reading this Text</a>,
Next:<a rel=next href="#Who%20You%20Are">Who You Are</a>,
Previous:<a rel=previous href="#Why">Why</a>,
Up:<a rel=up href="#Preface">Preface</a>
<br>

<h2>On Reading this Text</h2>

<p>All through this document, you will see little sample programs you can
run inside of Emacs.  If you read this document in Info inside of GNU
Emacs, you can run the programs as they appear.  (This is easy to do and
is explained when the examples are presented.)  Alternatively, you can
read this introduction as a printed book while sitting beside a computer
running Emacs.  (This is what I like to do; I like printed books.)  If
you don't have a running Emacs beside you, you can still read this book,
but in this case, it is best to treat it as a novel or as a travel guide
to a country not yet visited: interesting, but not the same as being
there.

<p>Much of this introduction is dedicated to walk-throughs or guided tours
of code used in GNU Emacs.  These tours are designed for two purposes:
first, to give you familiarity with real, working code (code you use
every day); and, second, to give you familiarity with the way Emacs
works.  It is interesting to see how a working environment is
implemented. 
Also, I
hope that you will pick up the habit of browsing through source code. 
You can learn from it and mine it for ideas.  Having GNU Emacs is like
having a dragon's cave of treasures.

<p>In addition to learning about Emacs as an editor and Emacs Lisp as a
programming language, the examples and guided tours will give you an
opportunity to get acquainted with Emacs as a Lisp programming
environment.  GNU Emacs supports programming and provides tools that
you will want to become comfortable using, such as <kbd>M-.</kbd> (the key
which invokes the <code>find-tag</code> command).  You will also learn about
buffers and other objects that are part of the environment. 
Learning about these features of Emacs is like learning new routes
around your home town.

<p>Finally, I hope to convey some of the skills for using Emacs to
learn aspects of programming that you don't know.  You can often use
Emacs to help you understand what puzzles you or to find out how to do
something new.  This self-reliance is not only a pleasure, but an
advantage.

<p><hr>
Node:<a name="Who%20You%20Are">Who You Are</a>,
Next:<a rel=next href="#Lisp%20History">Lisp History</a>,
Previous:<a rel=previous href="#On%20Reading%20this%20Text">On Reading this Text</a>,
Up:<a rel=up href="#Preface">Preface</a>
<br>

<h2>For Whom This is Written</h2>

<p>This text is written as an elementary introduction for people who are
not programmers.  If you are a programmer, you may not be satisfied with
this primer.  The reason is that you may have become expert at reading
reference manuals and be put off by the way this text is organized.

<p>An expert programmer who reviewed this text said to me:

<blockquote>
<i>I prefer to learn from reference manuals.  I "dive into" each
paragraph, and "come up for air" between paragraphs.</i>

<p><i>When I get to the end of a paragraph, I assume that that subject is
done, finished, that I know everything I need (with the
possible exception of the case when the next paragraph starts talking
about it in more detail).  I expect that a well written reference manual
will not have a lot of redundancy, and that it will have excellent
pointers to the (one) place where the information I want is.</i>
</blockquote>

<p>This introduction is not written for this person!

<p>Firstly, I try to say everything at least three times: first, to
introduce it; second, to show it in context; and third, to show it in a
different context, or to review it.

<p>Secondly, I hardly ever put all the information about a subject in one
place, much less in one paragraph.  To my way of thinking, that imposes
too heavy a burden on the reader.  Instead I try to explain only what
you need to know at the time.  (Sometimes I include a little extra
information so you won't be surprised later when the additional
information is formally introduced.)

<p>When you read this text, you are not expected to learn everything the
first time.  Frequently, you need only make, as it were, a `nodding
acquaintance' with some of the items mentioned.  My hope is that I have
structured the text and given you enough hints that you will be alert to
what is important, and concentrate on it.

<p>You will need to "dive into" some paragraphs; there is no other way
to read them.  But I have tried to keep down the number of such
paragraphs.  This book is intended as an approachable hill, rather than
as a daunting mountain.

<p>This introduction to <cite>Programming in Emacs Lisp</cite> has a companion
document,
<a href="elisp.html#The%20GNU%20Emacs%20Lisp%20Reference%20Manual">Top</a>. 
The reference manual has more detail than this introduction.  In the
reference manual, all the information about one topic is concentrated
in one place.  You should turn to it if you are like the programmer
quoted above.  And, of course, after you have read this
<cite>Introduction</cite>, you will find the <cite>Reference Manual</cite> useful
when you are writing your own programs.

<p><hr>
Node:<a name="Lisp%20History">Lisp History</a>,
Next:<a rel=next href="#Note%20for%20Novices">Note for Novices</a>,
Previous:<a rel=previous href="#Who%20You%20Are">Who You Are</a>,
Up:<a rel=up href="#Preface">Preface</a>
<br>

<h2>Lisp History</h2>

<p>Lisp was first developed in the late 1950s at the Massachusetts
Institute of Technology for research in artificial intelligence.  The
great power of the Lisp language makes it superior for other purposes as
well, such as writing editor commands and integrated environments.

<p>GNU Emacs Lisp is largely inspired by Maclisp, which was written at MIT
in the 1960s.  It is somewhat inspired by Common Lisp, which became a
standard in the 1980s.  However, Emacs Lisp is much simpler than Common
Lisp.  (The standard Emacs distribution contains an optional extensions
file, <code>cl.el</code>, that adds many Common Lisp features to Emacs Lisp.)

<p><hr>
Node:<a name="Note%20for%20Novices">Note for Novices</a>,
Next:<a rel=next href="#Thank%20You">Thank You</a>,
Previous:<a rel=previous href="#Lisp%20History">Lisp History</a>,
Up:<a rel=up href="#Preface">Preface</a>
<br>

<h2>A Note for Novices</h2>

<p>If you don't know GNU Emacs, you can still read this document
profitably.  However, I recommend you learn Emacs, if only to learn to
move around your computer screen.  You can teach yourself how to use
Emacs with the on-line tutorial.  To use it, type <kbd>C-h t</kbd>.  (This
means you press and release the &lt;CTRL&gt; key and the <kbd>h</kbd> at the
same time, and then press and release <kbd>t</kbd>.)

<p>Also, I often refer to one of Emacs' standard commands by listing the
keys which you press to invoke the command and then giving the name of
the command in parentheses, like this: <kbd>M-C-\</kbd>
(<code>indent-region</code>).  What this means is that the
<code>indent-region</code> command is customarily invoked by typing
<kbd>M-C-\</kbd>.  (You can, if you wish, change the keys that are typed to
invoke the command; this is called <dfn>rebinding</dfn>.  See <a href="#Keymaps">Keymaps</a>.)  The abbreviation <kbd>M-C-\</kbd> means that you type your
&lt;META&gt; key, &lt;CTRL&gt; key and &lt;\&gt; key all at the same time. 
(On many modern keyboards the &lt;META&gt; key is labelled
&lt;ALT&gt;.) 
Sometimes a combination like this is called a keychord, since it is
similar to the way you play a chord on a piano.  If your keyboard does
not have a &lt;META&gt; key, the &lt;ESC&gt; key prefix is used in place
of it.  In this case, <kbd>M-C-\</kbd> means that you press and release your
&lt;ESC&gt; key and then type the &lt;CTRL&gt; key and the &lt;\&gt; key at
the same time.  But usually <kbd>M-C-\</kbd> means press the &lt;CTRL&gt; key
along with the key that is labelled &lt;ALT&gt; and, at the same time,
press the &lt;\&gt; key.

<p>In addition to typing a lone keychord, you can prefix what you type
with <kbd>C-u</kbd>, which is called the `universal argument'.  The
<kbd>C-u</kbd> keychord passes an argument to the subsequent command. 
Thus, to indent a region of plain text by 6 spaces, mark the region,
and then type <kbd>C-u&nbsp;6&nbsp;M-C-\</kbd>.  (If you do not specify a number,
Emacs either passes the number 4 to the command or otherwise runs the
command differently than it would otherwise.)  See <a href="emacs.html#Numeric%20Arguments">Arguments</a>.

<p>If you are reading this in Info using GNU Emacs, you can read through
this whole document just by pressing the space bar, &lt;SPC&gt;. 
(To learn about Info, type <kbd>C-h i</kbd> and then select Info.)

<p>A note on terminology:  when I use the word Lisp alone, I often am
referring to the various dialects of Lisp in general, but when I speak
of Emacs Lisp, I am referring to GNU Emacs Lisp in particular.

<p><hr>
Node:<a name="Thank%20You">Thank You</a>,
Previous:<a rel=previous href="#Note%20for%20Novices">Note for Novices</a>,
Up:<a rel=up href="#Preface">Preface</a>
<br>

<h2>Thank You</h2>

<p>My thanks to all who helped me with this book.  My especial thanks to
Jim Blandy, Noah Friedman, Jim&nbsp;Kingdon, Roland
McGrath, Frank&nbsp;Ritter, Randy&nbsp;Smith, Richard&nbsp;M.&nbsp;Stallman, and Melissa&nbsp;Weisshaus.  My thanks also go to both
Philip&nbsp;Johnson and David&nbsp;Stampe for their patient
encouragement.  My mistakes are my own.

                                                  <p>Robert J. Chassell

<p><hr>
Node:<a name="List%20Processing">List Processing</a>,
Next:<a rel=next href="#Practicing%20Evaluation">Practicing Evaluation</a>,
Previous:<a rel=previous href="#Preface">Preface</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>1 List Processing</h1>

<p>To the untutored eye, Lisp is a strange programming language.  In Lisp
code there are parentheses everywhere.  Some people even claim that the
name stands for `Lots of Isolated Silly Parentheses'.  But the claim is
unwarranted.  Lisp stands for LISt Processing, and the programming
language handles <em>lists</em> (and lists of lists) by putting them
between parentheses.  The parentheses mark the boundaries of the list. 
Sometimes a list is preceded by a single apostrophe or quotation mark,
<code>'</code>.  Lists are the basis of Lisp.

<ul>
<li><a href="#Lisp%20Lists">Lisp Lists</a>:                   What are lists? 
<li><a href="#Run%20a%20Program">Run a Program</a>:                Any list in Lisp is a program ready to run. 
<li><a href="#Making%20Errors">Making Errors</a>:                Generating an error message. 
<li><a href="#Names%20&amp;%20Definitions">Names &amp; Definitions</a>:          Names of symbols and function definitions. 
<li><a href="#Lisp%20Interpreter">Lisp Interpreter</a>:             What the Lisp interpreter does. 
<li><a href="#Evaluation">Evaluation</a>:                   Running a program. 
<li><a href="#Variables">Variables</a>:                    Returning a value from a variable. 
<li><a href="#Arguments">Arguments</a>:                    Passing information to a function. 
<li><a href="#set%20&amp;%20setq">set &amp; setq</a>:                   Setting the value of a variable. 
<li><a href="#Summary">Summary</a>:                      The major points. 
<li><a href="#Error%20Message%20Exercises">Error Message Exercises</a>: 
</ul>

<p><hr>
Node:<a name="Lisp%20Lists">Lisp Lists</a>,
Next:<a rel=next href="#Run%20a%20Program">Run a Program</a>,
Previous:<a rel=previous href="#List%20Processing">List Processing</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.1 Lisp Lists</h2>

<p>In Lisp, a list looks like this: <code>'(rose violet daisy buttercup)</code>. 
This list is preceded by a single apostrophe.  It could just as well be
written as follows, which looks more like the kind of list you are likely
to be familiar with:

<pre>'(rose
  violet
  daisy
  buttercup)
</pre>

<p>The elements of this list are the names of the four different flowers,
separated from each other by whitespace and surrounded by parentheses,
like flowers in a field with a stone wall around them.

<ul>
<li><a href="#Numbers%20Lists">Numbers Lists</a>:                List have numbers, other lists, in them. 
<li><a href="#Lisp%20Atoms">Lisp Atoms</a>:                   Elemental entities. 
<li><a href="#Whitespace%20in%20Lists">Whitespace in Lists</a>:          Formating lists to be readable. 
<li><a href="#Typing%20Lists">Typing Lists</a>:                 How GNU Emacs helps you type lists. 
</ul>

<p><hr>
Node:<a name="Numbers%20Lists">Numbers Lists</a>,
Next:<a rel=next href="#Lisp%20Atoms">Lisp Atoms</a>,
Previous:<a rel=previous href="#Lisp%20Lists">Lisp Lists</a>,
Up:<a rel=up href="#Lisp%20Lists">Lisp Lists</a>
<br>

<h3>Numbers, Lists inside of Lists</h3>

<p>Lists can also have numbers in them, as in this list: <code>(+ 2 2)</code>. 
This list has a plus-sign, <code>+</code>, followed by two <code>2</code>s, each
separated by whitespace.

<p>In Lisp, both data and programs are represented the same way; that is,
they are both lists of words, numbers, or other lists, separated by
whitespace and surrounded by parentheses.  (Since a program looks like
data, one program may easily serve as data for another; this is a very
powerful feature of Lisp.)  (Incidentally, these two parenthetical
remarks are <em>not</em> Lisp lists, because they contain <code>;</code> and
<code>.</code> as punctuation marks.)

<p>Here is another list, this time with a list inside of it:

<pre>'(this list has (a list inside of it))
</pre>

<p>The components of this list are the words <code>this</code>, <code>list</code>,
<code>has</code>, and the list <code>(a list inside of it)</code>.  The interior
list is made up of the words <code>a</code>, <code>list</code>, <code>inside</code>,
<code>of</code>, <code>it</code>.

<p><hr>
Node:<a name="Lisp%20Atoms">Lisp Atoms</a>,
Next:<a rel=next href="#Whitespace%20in%20Lists">Whitespace in Lists</a>,
Previous:<a rel=previous href="#Numbers%20Lists">Numbers Lists</a>,
Up:<a rel=up href="#Lisp%20Lists">Lisp Lists</a>
<br>

<h3>1.1.1 Lisp Atoms</h3>

<p>In Lisp, what we have been calling words are called <dfn>atoms</dfn>.  This
term comes from the historical meaning of the word atom, which means
`indivisible'.  As far as Lisp is concerned, the words we have been
using in the lists cannot be divided into any smaller parts and still
mean the same thing as part of a program; likewise with numbers and
single character symbols like <code>+</code>.  On the other hand, unlike an
atom, a list can be split into parts.  (See <a href="#car%20cdr%20&amp;%20cons"><code>car</code> <code>cdr</code> &amp; <code>cons</code> Fundamental Functions</a>.)

<p>In a list, atoms are separated from each other by whitespace.  They can be
right next to a parenthesis.

<p>Technically speaking, a list in Lisp consists of parentheses surrounding
atoms separated by whitespace or surrounding other lists or surrounding
both atoms and other lists.  A list can have just one atom in it or
have nothing in it at all.  A list with nothing in it looks like this:
<code>()</code>, and is called the <dfn>empty list</dfn>.  Unlike anything else, an
empty list is considered both an atom and a list at the same time.

<p>The printed representation of both atoms and lists are called
<dfn>symbolic expressions</dfn> or, more concisely, <dfn>s-expressions</dfn>. 
The word <dfn>expression</dfn> by itself can refer to either the printed
representation, or to the atom or list as it is held internally in the
computer.  Often, people use the term <dfn>expression</dfn>
indiscriminately.  (Also, in many texts, the word <dfn>form</dfn> is used
as a synonym for expression.)

<p>Incidentally, the atoms that make up our universe were named such when
they were thought to be indivisible; but it has been found that physical
atoms are not indivisible.  Parts can split off an atom or it can
fission into two parts of roughly equal size.  Physical atoms were named
prematurely, before their truer nature was found.  In Lisp, certain
kinds of atom, such as an array, can be separated into parts; but the
mechanism for doing this is different from the mechanism for splitting a
list.  As far as list operations are concerned, the atoms of a list are
unsplittable.

<p>As in English, the meanings of the component letters of a Lisp atom
are different from the meaning the letters make as a word.  For
example, the word for the South American sloth, the <code>ai</code>, is
completely different from the two words, <code>a</code>, and <code>i</code>.

<p>There are many kinds of atom in nature but only a few in Lisp: for
example, <dfn>numbers</dfn>, such as 37, 511, or 1729, and <dfn>symbols</dfn>, such
as <code>+</code>, <code>foo</code>, or <code>forward-line</code>.  The words we have
listed in the examples above are all symbols.  In everyday Lisp
conversation, the word "atom" is not often used, because programmers
usually try to be more specific about what kind of atom they are dealing
with.  Lisp programming is mostly about symbols (and sometimes numbers)
within lists.  (Incidentally, the preceding three word parenthetical
remark is a proper list in Lisp, since it consists of atoms, which in
this case are symbols, separated by whitespace and enclosed by
parentheses, without any non-Lisp punctuation.)

<p>In addition, text between double quotation marks--even sentences or
paragraphs--is an atom.  Here is an example:

<pre>'(this list includes "text between quotation marks.")
</pre>

<p>In Lisp, all of the quoted text including the punctuation mark and the
blank spaces is a single atom.  This kind of atom is called a
<dfn>string</dfn> (for `string of characters') and is the sort of thing that
is used for messages that a computer can print for a human to read. 
Strings are a different kind of atom than numbers or symbols and are
used differently.

<p><hr>
Node:<a name="Whitespace%20in%20Lists">Whitespace in Lists</a>,
Next:<a rel=next href="#Typing%20Lists">Typing Lists</a>,
Previous:<a rel=previous href="#Lisp%20Atoms">Lisp Atoms</a>,
Up:<a rel=up href="#Lisp%20Lists">Lisp Lists</a>
<br>

<h3>1.1.2 Whitespace in Lists</h3>

<p>The amount of whitespace in a list does not matter.  From the point of view
of the Lisp language,

<pre>'(this list
   looks like this)
</pre>

<p>is exactly the same as this:

<pre>'(this list looks like this)
</pre>

<p>Both examples show what to Lisp is the same list, the list made up of
the symbols <code>this</code>, <code>list</code>, <code>looks</code>, <code>like</code>, and
<code>this</code> in that order.

<p>Extra whitespace and newlines are designed to make a list more readable
by humans.  When Lisp reads the expression, it gets rid of all the extra
whitespace (but it needs to have at least one space between atoms in
order to tell them apart.)

<p>Odd as it seems, the examples we have seen cover almost all of what Lisp
lists look like!  Every other list in Lisp looks more or less like one
of these examples, except that the list may be longer and more complex. 
In brief, a list is between parentheses, a string is between quotation
marks, a symbol looks like a word, and a number looks like a number. 
(For certain situations, square brackets, dots and a few other special
characters may be used; however, we will go quite far without them.)

<p><hr>
Node:<a name="Typing%20Lists">Typing Lists</a>,
Previous:<a rel=previous href="#Whitespace%20in%20Lists">Whitespace in Lists</a>,
Up:<a rel=up href="#Lisp%20Lists">Lisp Lists</a>
<br>

<h3>1.1.3 GNU Emacs Helps You Type Lists</h3>

<p>When you type a Lisp expression in GNU Emacs using either Lisp
Interaction mode or Emacs Lisp mode, you have available to you several
commands to format the Lisp expression so it is easy to read.  For
example, pressing the &lt;TAB&gt; key automatically indents the line the
cursor is on by the right amount.  A command to properly indent the
code in a region is customarily bound to <kbd>M-C-\</kbd>.  Indentation is
designed so that you can see which elements of a list belongs to which
list--elements of a sub-list are indented more than the elements of
the enclosing list.

<p>In addition, when you type a closing parenthesis, Emacs momentarily
jumps the cursor back to the matching opening parenthesis, so you can
see which one it is.  This is very useful, since every list you type
in Lisp must have its closing parenthesis match its opening
parenthesis.  (See <a href="emacs.html#Major%20Modes">Major Modes</a>, for more information about Emacs' modes.)

<p><hr>
Node:<a name="Run%20a%20Program">Run a Program</a>,
Next:<a rel=next href="#Making%20Errors">Making Errors</a>,
Previous:<a rel=previous href="#Lisp%20Lists">Lisp Lists</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.2 Run a Program</h2>

<p>A list in Lisp--any list--is a program ready to run.  If you run it
(for which the Lisp jargon is <dfn>evaluate</dfn>), the computer will do one
of three things: do nothing except return to you the list itself; send
you an error message; or, treat the first symbol in the list as a
command to do something.  (Usually, of course, it is the last of these
three things that you really want!)

<p>The single apostrophe, <code>'</code>, that I put in front of some of the
example lists in preceding sections is called a <dfn>quote</dfn>; when it
precedes a list, it tells Lisp to do nothing with the list, other than
take it as it is written.  But if there is no quote preceding a list,
the first item of the list is special: it is a command for the computer
to obey.  (In Lisp, these commands are called <em>functions</em>.)  The list
<code>(+ 2 2)</code> shown above did not have a quote in front of it, so Lisp
understands that the <code>+</code> is an instruction to do something with the
rest of the list: add the numbers that follow.

<p>If you are reading this inside of GNU Emacs in Info, here is how you can
evaluate such a list:  place your cursor immediately after the right
hand parenthesis of the following list and then type <kbd>C-x C-e</kbd>:

<pre>(+ 2 2)
</pre>

<p>You will see the number <code>4</code> appear in the echo area.  (In the
jargon, what you have just done is "evaluate the list."  The echo area
is the line at the bottom of the screen that displays or "echoes"
text.)  Now try the same thing with a quoted list:  place the cursor
right after the following list and type <kbd>C-x C-e</kbd>:

<pre>'(this is a quoted list)
</pre>

<p>You will see <code>(this is a quoted list)</code> appear in the echo area.

<p>In both cases, what you are doing is giving a command to the program
inside of GNU Emacs called the <dfn>Lisp interpreter</dfn>--giving the
interpreter a command to evaluate the expression.  The name of the Lisp
interpreter comes from the word for the task done by a human who comes
up with the meaning of an expression--who "interprets" it.

<p>You can also evaluate an atom that is not part of a list--one that is
not surrounded by parentheses; again, the Lisp interpreter translates
from the humanly readable expression to the language of the computer. 
But before discussing this (see <a href="#Variables">Variables</a>), we will discuss what the
Lisp interpreter does when you make an error.

<p><hr>
Node:<a name="Making%20Errors">Making Errors</a>,
Next:<a rel=next href="#Names%20&amp;%20Definitions">Names & Definitions</a>,
Previous:<a rel=previous href="#Run%20a%20Program">Run a Program</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.3 Generate an Error Message</h2>

<p>Partly so you won't worry if you do it accidentally, we will now give
a command to the Lisp interpreter that generates an error message. 
This is a harmless activity; and indeed, we will often try to generate
error messages intentionally.  Once you understand the jargon, error
messages can be informative.  Instead of being called "error"
messages, they should be called "help" messages.  They are like
signposts to a traveller in a strange country; deciphering them can be
hard, but once understood, they can point the way.

<p>The error message is generated by a built-in GNU Emacs debugger.  We
will `enter the debugger'.  You get out of the debugger by typing <code>q</code>.

<p>What we will do is evaluate a list that is not quoted and does not
have a meaningful command as its first element.  Here is a list almost
exactly the same as the one we just used, but without the single-quote
in front of it.  Position the cursor right after it and type <kbd>C-x
C-e</kbd>:

<pre>(this is an unquoted list)
</pre>

<p>What you see depends on which version of Emacs you are running.  GNU
Emacs version 21 provides more information than version 20 and before. 
First, the more recent result of generating an error; then the
earlier, version 20 result.

<p>In GNU Emacs version 21, a <code>*Backtrace*</code> window will open up and
you will see the following in it:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--Lisp error: (void-function this)
  (this is an unquoted list)
  eval((this is an unquoted list))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>Your cursor will be in this window (you may have to wait a few seconds
before it becomes visible).  To quit the debugger and make the
debugger window go away, type:

<pre>q
</pre>

<p>Please type <kbd>q</kbd> right now, so you become confident that you can
get out of the debugger.  Then, type <kbd>C-x C-e</kbd> again to re-enter
it.

<p>Based on what we already know, we can almost read this error message.

<p>You read the <code>*Backtrace*</code> buffer from the bottom up; it tells
you what Emacs did.  When you typed <kbd>C-x C-e</kbd>, you made an
interactive call to the command <code>eval-last-sexp</code>.  <code>eval</code> is
an abbreviation for `evaluate' and <code>sexp</code> is an abbreviation for
`symbolic expression'.  The command means `evaluate last symbolic
expression', which is the expression just before your cursor.

<p>Each line above tells you what the Lisp interpreter evaluated next. 
The most recent action is at the top.  The buffer is called the
<code>*Backtrace*</code> buffer because it enables you to track Emacs
backwards.

<p>At the top of the <code>*Backtrace*</code> buffer, you see the line:

<pre>Debugger entered--Lisp error: (void-function this)
</pre>

<p>The Lisp interpreter tried to evaluate the first atom of the list, the
word <code>this</code>.  It is this action that generated the error message
<code>void-function this</code>.

<p>The message contains the words <code>void-function</code> and <code>this</code>.

<p>The word <code>function</code> was mentioned once before.  It is a very
important word.  For our purposes, we can define it by saying that a
<dfn>function</dfn> is a set of instructions to the computer that tell the
computer to do something.

<p>Now we can begin to understand the error message: <code>void-function
this</code>.  The function (that is, the word <code>this</code>) does not have a
definition of any set of instructions for the computer to carry out.

<p>The slightly odd word, <code>void-function</code>, is designed to cover the
way Emacs Lisp is implemented, which is that when a symbol does not
have a function definition attached to it, the place that should
contain the instructions is `void'.

<p>On the other hand, since we were able to add 2 plus 2 successfully, by
evaluating <code>(+ 2 2)</code>, we can infer that the symbol <code>+</code> must
have a set of instructions for the computer to obey and those
instructions must be to add the numbers that follow the <code>+</code>.

<p>In GNU Emacs version 20, and in earlier versions, you will see only
one line of error message; it will appear in the echo area and look
like this:

<pre>Symbol's function definition is void: this
</pre>

<p>(Also, your terminal may beep at you--some do, some don't; and others
blink.  This is just a device to get your attention.)  The message goes
away as soon as you type another key, even just to move the cursor.

<p>We know the meaning of the word <code>Symbol</code>.  It refers to the first
atom of the list, the word <code>this</code>.  The word <code>function</code>
refers to the instructions that tell the computer what to do. 
(Technically, the symbol tells the computer where to find the
instructions, but this is a complication we can ignore for the
moment.)

<p>The error message can be understood: <code>Symbol's function
definition is void: this</code>.  The symbol (that is, the word
<code>this</code>) lacks instructions for the computer to carry out.

<p><hr>
Node:<a name="Names%20&amp;%20Definitions">Names & Definitions</a>,
Next:<a rel=next href="#Lisp%20Interpreter">Lisp Interpreter</a>,
Previous:<a rel=previous href="#Making%20Errors">Making Errors</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.4 Symbol Names and Function Definitions</h2>

<p>We can articulate another characteristic of Lisp based on what we have
discussed so far--an important characteristic: a symbol, like
<code>+</code>, is not itself the set of instructions for the computer to
carry out.  Instead, the symbol is used, perhaps temporarily, as a way
of locating the definition or set of instructions.  What we see is the
name through which the instructions can be found.  Names of people
work the same way.  I can be referred to as <code>Bob</code>; however, I am
not the letters <code>B</code>, <code>o</code>, <code>b</code> but am the consciousness
consistently associated with a particular life-form.  The name is not
me, but it can be used to refer to me.

<p>In Lisp, one set of instructions can be attached to several names. 
For example, the computer instructions for adding numbers can be
linked to the symbol <code>plus</code> as well as to the symbol <code>+</code>
(and are in some dialects of Lisp).  Among humans, I can be referred
to as <code>Robert</code> as well as <code>Bob</code> and by other words as well.

<p>On the other hand, a symbol can have only one function definition
attached to it at a time.  Otherwise, the computer would be confused as
to which definition to use.  If this were the case among people, only
one person in the world could be named <code>Bob</code>.  However, the function
definition to which the name refers can be changed readily. 
(See <a href="#Install">Install a Function Definition</a>.)

<p>Since Emacs Lisp is large, it is customary to name symbols in a way
that identifies the part of Emacs to which the function belongs. 
Thus, all the names for functions that deal with Texinfo start with
<code>texinfo-</code> and those for functions that deal with reading mail
start with <code>rmail-</code>.

<p><hr>
Node:<a name="Lisp%20Interpreter">Lisp Interpreter</a>,
Next:<a rel=next href="#Evaluation">Evaluation</a>,
Previous:<a rel=previous href="#Names%20&amp;%20Definitions">Names & Definitions</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.5 The Lisp Interpreter</h2>

<p>Based on what we have seen, we can now start to figure out what the
Lisp interpreter does when we command it to evaluate a list. 
First, it looks to see whether there is a quote before the list; if
there is, the interpreter just gives us the list.  On the other
hand, if there is no quote, the interpreter looks at the first element
in the list and sees whether it has a function definition.  If it does,
the interpreter carries out the instructions in the function definition. 
Otherwise, the interpreter prints an error message.

<p>This is how Lisp works.  Simple.  There are added complications which we
will get to in a minute, but these are the fundamentals.  Of course, to
write Lisp programs, you need to know how to write function definitions
and attach them to names, and how to do this without confusing either
yourself or the computer.

<ul>
<li><a href="#Complications">Complications</a>:                Variables, Special forms, Lists within. 
<li><a href="#Byte%20Compiling">Byte Compiling</a>:               Specially processing code for speed. 
</ul>

<p><hr>
Node:<a name="Complications">Complications</a>,
Next:<a rel=next href="#Byte%20Compiling">Byte Compiling</a>,
Previous:<a rel=previous href="#Lisp%20Interpreter">Lisp Interpreter</a>,
Up:<a rel=up href="#Lisp%20Interpreter">Lisp Interpreter</a>
<br>

<h3>Complications</h3>

<p>Now, for the first complication.  In addition to lists, the Lisp
interpreter can evaluate a symbol that is not quoted and does not have
parentheses around it.  The Lisp interpreter will attempt to determine
the symbol's value as a <dfn>variable</dfn>.  This situation is described
in the section on variables.  (See <a href="#Variables">Variables</a>.)

<p>The second complication occurs because some functions are unusual and do
not work in the usual manner.  Those that don't are called <dfn>special
forms</dfn>.  They are used for special jobs, like defining a function, and
there are not many of them.  In the next few chapters, you will be
introduced to several of the more important special forms.

<p>The third and final complication is this: if the function that the
Lisp interpreter is looking at is not a special form, and if it is part
of a list, the Lisp interpreter looks to see whether the list has a list
inside of it.  If there is an inner list, the Lisp interpreter first
figures out what it should do with the inside list, and then it works on
the outside list.  If there is yet another list embedded inside the
inner list, it works on that one first, and so on.  It always works on
the innermost list first.  The interpreter works on the innermost list
first, to evaluate the result of that list.  The result may be
used by the enclosing expression.

<p>Otherwise, the interpreter works left to right, from one expression to
the next.

<p><hr>
Node:<a name="Byte%20Compiling">Byte Compiling</a>,
Previous:<a rel=previous href="#Complications">Complications</a>,
Up:<a rel=up href="#Lisp%20Interpreter">Lisp Interpreter</a>
<br>

<h3>1.5.1 Byte Compiling</h3>

<p>One other aspect of interpreting: the Lisp interpreter is able to
interpret two kinds of entity: humanly readable code, on which we will
focus exclusively, and specially processed code, called <dfn>byte
compiled</dfn> code, which is not humanly readable.  Byte compiled code
runs faster than humanly readable code.

<p>You can transform humanly readable code into byte compiled code by
running one of the compile commands such as <code>byte-compile-file</code>. 
Byte compiled code is usually stored in a file that ends with a
<code>.elc</code> extension rather than a <code>.el</code> extension.  You will
see both kinds of file in the <code>emacs/lisp</code> directory; the files
to read are those with <code>.el</code> extensions.

<p>As a practical matter, for most things you might do to customize or
extend Emacs, you do not need to byte compile; and I will not discuss
the topic here.  See <a href="elisp.html#Byte%20Compilation">Byte Compilation</a>, for a full description of byte
compilation.

<p><hr>
Node:<a name="Evaluation">Evaluation</a>,
Next:<a rel=next href="#Variables">Variables</a>,
Previous:<a rel=previous href="#Lisp%20Interpreter">Lisp Interpreter</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.6 Evaluation</h2>

<p>When the Lisp interpreter works on an expression, the term for the
activity is called <dfn>evaluation</dfn>.  We say that the interpreter
`evaluates the expression'.  I've used this term several times before. 
The word comes from its use in everyday language, `to ascertain the
value or amount of; to appraise', according to <cite>Webster's New
Collegiate Dictionary</cite>.

<p>After evaluating an expression, the Lisp interpreter will most likely
<dfn>return</dfn> the value that the computer produces by carrying out the
instructions it found in the function definition, or perhaps it will
give up on that function and produce an error message.  (The interpreter
may also find itself tossed, so to speak, to a different function or it
may attempt to repeat continually what it is doing for ever and ever in
what is called an `infinite loop'.  These actions are less common; and
we can ignore them.)  Most frequently, the interpreter returns a value.

<p>At the same time the interpreter returns a value, it may do something
else as well, such as move a cursor or copy a file; this other kind of
action is called a <dfn>side effect</dfn>.  Actions that we humans think are
important, such as printing results, are often "side effects" to the
Lisp interpreter.  The jargon can sound peculiar, but it turns out that
it is fairly easy to learn to use side effects.

<p>In summary, evaluating a symbolic expression most commonly causes the
Lisp interpreter to return a value and perhaps carry out a side effect;
or else produce an error.

<ul>
<li><a href="#Evaluating%20Inner%20Lists">Evaluating Inner Lists</a>:       Lists within lists... 
</ul>

<p><hr>
Node:<a name="Evaluating%20Inner%20Lists">Evaluating Inner Lists</a>,
Previous:<a rel=previous href="#Evaluation">Evaluation</a>,
Up:<a rel=up href="#Evaluation">Evaluation</a>
<br>

<h3>1.6.1 Evaluating Inner Lists</h3>

<p>If evaluation applies to a list that is inside another list, the outer
list may use the value returned by the first evaluation as information
when the outer list is evaluated.  This explains why inner expressions
are evaluated first: the values they return are used by the outer
expressions.

<p>We can investigate this process by evaluating another addition example. 
Place your cursor after the following expression and type <kbd>C-x C-e</kbd>:

<pre>(+ 2 (+ 3 3))
</pre>

<p>The number 8 will appear in the echo area.

<p>What happens is that the Lisp interpreter first evaluates the inner
expression, <code>(+ 3 3)</code>, for which the value 6 is returned; then it
evaluates the outer expression as if it were written <code>(+ 2 6)</code>, which
returns the value 8.  Since there are no more enclosing expressions to
evaluate, the interpreter prints that value in the echo area.

<p>Now it is easy to understand the name of the command invoked by the
keystrokes <kbd>C-x C-e</kbd>: the name is <code>eval-last-sexp</code>.  The
letters <code>sexp</code> are an abbreviation for `symbolic expression', and
<code>eval</code> is an abbreviation for `evaluate'.  The command means
`evaluate last symbolic expression'.

<p>As an experiment, you can try evaluating the expression by putting the
cursor at the beginning of the next line immediately following the
expression, or inside the expression.

<p>Here is another copy of the expression:

<pre>(+ 2 (+ 3 3))
</pre>

<p>If you place the cursor at the beginning of the blank line that
immediately follows the expression and type <kbd>C-x C-e</kbd>, you will
still get the value 8 printed in the echo area.  Now try putting the
cursor inside the expression.  If you put it right after the next to
last parenthesis (so it appears to sit on top of the last parenthesis),
you will get a 6 printed in the echo area!  This is because the command
evaluates the expression <code>(+ 3 3)</code>.

<p>Now put the cursor immediately after a number.  Type <kbd>C-x C-e</kbd> and
you will get the number itself.  In Lisp, if you evaluate a number, you
get the number itself--this is how numbers differ from symbols.  If you
evaluate a list starting with a symbol like <code>+</code>, you will get a
value returned that is the result of the computer carrying out the
instructions in the function definition attached to that name.  If a
symbol by itself is evaluated, something different happens, as we will
see in the next section.

<p><hr>
Node:<a name="Variables">Variables</a>,
Next:<a rel=next href="#Arguments">Arguments</a>,
Previous:<a rel=previous href="#Evaluation">Evaluation</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.7 Variables</h2>

<p>In Emacs Lisp, a symbol can have a value attached to it just as it can
have a function definition attached to it.  The two are different. 
The function definition is a set of instructions that a computer will
obey.  A value, on the other hand, is something, such as number or a
name, that can vary (which is why such a symbol is called a variable). 
The value of a symbol can be any expression in Lisp, such as a symbol,
number, list, or string.  A symbol that has a value is often called a
<dfn>variable</dfn>.

<p>A symbol can have both a function definition and a value attached to
it at the same time.  Or it can have just one or the other. 
The two are separate.  This is somewhat similar
to the way the name Cambridge can refer to the city in Massachusetts
and have some information attached to the name as well, such as
"great programming center".

<p>Another way to think about this is to imagine a symbol as being a chest
of drawers.  The function definition is put in one drawer, the value in
another, and so on.  What is put in the drawer holding the value can be
changed without affecting the contents of the drawer holding the
function definition, and vice-versa.

<ul>
<li><a href="#fill-column%20Example">fill-column Example</a>: 
<li><a href="#Void%20Function">Void Function</a>:                The error message for a symbol
                                  without a function. 
<li><a href="#Void%20Variable">Void Variable</a>:                The error message for a symbol without a value. 
</ul>

<p><hr>
Node:<a name="fill-column%20Example">fill-column Example</a>,
Next:<a rel=next href="#Void%20Function">Void Function</a>,
Previous:<a rel=previous href="#Variables">Variables</a>,
Up:<a rel=up href="#Variables">Variables</a>
<br>

<h3><code>fill-column</code>, an Example Variable</h3>

<p>The variable <code>fill-column</code> illustrates a symbol with a value
attached to it: in every GNU Emacs buffer, this symbol is set to some
value, usually 72 or 70, but sometimes to some other value.  To find the
value of this symbol, evaluate it by itself.  If you are reading this in
Info inside of GNU Emacs, you can do this by putting the cursor after
the symbol and typing <kbd>C-x C-e</kbd>:

<pre>fill-column
</pre>

<p>After I typed <kbd>C-x C-e</kbd>, Emacs printed the number 72 in my echo
area.  This is the value for which <code>fill-column</code> is set for me as I
write this.  It may be different for you in your Info buffer.  Notice
that the value returned as a variable is printed in exactly the same way
as the value returned by a function carrying out its instructions.  From
the point of view of the Lisp interpreter, a value returned is a value
returned.  What kind of expression it came from ceases to matter once
the value is known.

<p>A symbol can have any value attached to it or, to use the jargon, we can
<dfn>bind</dfn> the variable to a value: to a number, such as 72; to a
string, <code>"such as this"</code>; to a list, such as <code>(spruce pine
oak)</code>; we can even bind a variable to a function definition.

<p>A symbol can be bound to a value in several ways.  See <a href="#set%20&amp;%20setq">Setting the Value of a Variable</a>, for information about one way to do
this.

<p><hr>
Node:<a name="Void%20Function">Void Function</a>,
Next:<a rel=next href="#Void%20Variable">Void Variable</a>,
Previous:<a rel=previous href="#fill-column%20Example">fill-column Example</a>,
Up:<a rel=up href="#Variables">Variables</a>
<br>

<h3>1.7.1 Error Message for a Symbol Without a Function</h3>

<p>When we evaluated <code>fill-column</code> to find its value as a variable,
we did not place parentheses around the word.  This is because we did
not intend to use it as a function name.

<p>If <code>fill-column</code> were the first or only element of a list, the
Lisp interpreter would attempt to find the function definition
attached to it.  But <code>fill-column</code> has no function definition. 
Try evaluating this:

<pre>(fill-column)
</pre>

<p>In GNU Emacs version 21, you will create a <code>*Backtrace*</code> buffer
that says:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--Lisp error: (void-function fill-column)
  (fill-column)
  eval((fill-column))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>(Remember, to quit the debugger and make the debugger window go away,
type <kbd>q</kbd> in the <code>*Backtrace*</code> buffer.)

<p>In GNU Emacs 20 and before, you will produce an error message that says:

<pre>Symbol's function definition is void: fill-column
</pre>

<p>(The message will go away away as soon as you move the cursor or type
another key.)

<p><hr>
Node:<a name="Void%20Variable">Void Variable</a>,
Previous:<a rel=previous href="#Void%20Function">Void Function</a>,
Up:<a rel=up href="#Variables">Variables</a>
<br>

<h3>1.7.2 Error Message for a Symbol Without a Value</h3>

<p>If you attempt to evaluate a symbol that does not have a value bound to
it, you will receive an error message.  You can see this by
experimenting with our 2 plus 2 addition.  In the following expression,
put your cursor right after the <code>+</code>, before the first number 2,
type <kbd>C-x C-e</kbd>:

<pre>(+ 2 2)
</pre>

<p>In GNU Emacs 21, you will create a <code>*Backtrace*</code> buffer that
says:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--Lisp error: (void-variable +)
  eval(+)
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>(As with the other times we entered the debugger, you can quit by
typing <kbd>q</kbd> in the <code>*Backtrace*</code> buffer.)

<p>This backtrace is different from the very first error message we saw,
which said, <code>Debugger entered--Lisp error: (void-function this)</code>. 
In this case, the function does not have a value as a variable; while
in the other error message, the function (the word `this') did not
have a definition.

<p>In this experiment with the <code>+</code>, what we did was cause the Lisp
interpreter to evaluate the <code>+</code> and look for the value of the
variable instead of the function definition.  We did this by placing the
cursor right after the symbol rather than after the parenthesis of the
enclosing list as we did before.  As a consequence, the Lisp interpreter
evaluated the preceding s-expression, which in this case was the
<code>+</code> by itself.

<p>Since <code>+</code> does not have a value bound to it, just the function
definition, the error message reported that the symbol's value as a
variable was void.

<p>In GNU Emacs version 20 and before, your error message will say:

<pre>Symbol's value as variable is void: +
</pre>

<p>The meaning is the same as in GNU Emacs 21.

<p><hr>
Node:<a name="Arguments">Arguments</a>,
Next:<a rel=next href="#set%20&amp;%20setq">set & setq</a>,
Previous:<a rel=previous href="#Variables">Variables</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.8 Arguments</h2>

<p>To see how information is passed to functions, let's look again at
our old standby, the addition of two plus two.  In Lisp, this is written
as follows:

<pre>(+ 2 2)
</pre>

<p>If you evaluate this expression, the number 4 will appear in your echo
area.  What the Lisp interpreter does is add the numbers that follow
the <code>+</code>.

<p>The numbers added by <code>+</code> are called the <dfn>arguments</dfn> of the
function <code>+</code>.  These numbers are the information that is given to
or <dfn>passed</dfn> to the function.

<p>The word `argument' comes from the way it is used in mathematics and
does not refer to a disputation between two people; instead it refers to
the information presented to the function, in this case, to the
<code>+</code>.  In Lisp, the arguments to a function are the atoms or lists
that follow the function.  The values returned by the evaluation of
these atoms or lists are passed to the function.  Different functions
require different numbers of arguments; some functions require none at
all.<a rel=footnote href="#fn-1"><sup>1</sup></a>

<ul>
<li><a href="#Data%20types">Data types</a>:                   Types of data passed to a function. 
<li><a href="#Args%20as%20Variable%20or%20List">Args as Variable or List</a>:     An argument can be the value
                                  of a variable or list. 
<li><a href="#Variable%20Number%20of%20Arguments">Variable Number of Arguments</a>:   Some functions may take a
                                  variable number of arguments. 
<li><a href="#Wrong%20Type%20of%20Argument">Wrong Type of Argument</a>:       Passing an argument of the wrong type
                                  to a function. 
<li><a href="#message">message</a>:                      A useful function for sending messages. 
</ul>

<p><hr>
Node:<a name="Data%20types">Data types</a>,
Next:<a rel=next href="#Args%20as%20Variable%20or%20List">Args as Variable or List</a>,
Previous:<a rel=previous href="#Arguments">Arguments</a>,
Up:<a rel=up href="#Arguments">Arguments</a>
<br>

<h3>1.8.1 Arguments' Data Types</h3>

<p>The type of data that should be passed to a function depends on what
kind of information it uses.  The arguments to a function such as
<code>+</code> must have values that are numbers, since <code>+</code> adds numbers. 
Other functions use different kinds of data for their arguments.

<p>For example, the <code>concat</code> function links together or unites two or
more strings of text to produce a string.  The arguments are strings. 
Concatenating the two character strings <code>abc</code>, <code>def</code> produces
the single string <code>abcdef</code>.  This can be seen by evaluating the
following:

<pre>(concat "abc" "def")
</pre>

<p>The value produced by evaluating this expression is <code>"abcdef"</code>.

<p>A function such as <code>substring</code> uses both a string and numbers as
arguments.  The function returns a part of the string, a substring of
the first argument.  This function takes three arguments.  Its first
argument is the string of characters, the second and third arguments are
numbers that indicate the beginning and end of the substring.  The
numbers are a count of the number of characters (including spaces and
punctuations) from the beginning of the string.

<p>For example, if you evaluate the following:

<pre>(substring "The quick brown fox jumped." 16 19)
</pre>

<p>you will see <code>"fox"</code> appear in the echo area.  The arguments are the
string and the two numbers.

<p>Note that the string passed to <code>substring</code> is a single atom even
though it is made up of several words separated by spaces.  Lisp counts
everything between the two quotation marks as part of the string,
including the spaces.  You can think of the <code>substring</code> function as
a kind of `atom smasher' since it takes an otherwise indivisible atom
and extracts a part.  However, <code>substring</code> is only able to extract
a substring from an argument that is a string, not from another type of
atom such as a number or symbol.

<p><hr>
Node:<a name="Args%20as%20Variable%20or%20List">Args as Variable or List</a>,
Next:<a rel=next href="#Variable%20Number%20of%20Arguments">Variable Number of Arguments</a>,
Previous:<a rel=previous href="#Data%20types">Data types</a>,
Up:<a rel=up href="#Arguments">Arguments</a>
<br>

<h3>1.8.2 An Argument as the Value of a Variable or List</h3>

<p>An argument can be a symbol that returns a value when it is evaluated. 
For example, when the symbol <code>fill-column</code> by itself is evaluated,
it returns a number.  This number can be used in an addition.

<p>Position the cursor after the following expression and type <kbd>C-x
C-e</kbd>:

<pre>(+ 2 fill-column)
</pre>

<p>The value will be a number two more than what you get by evaluating
<code>fill-column</code> alone.  For me, this is 74, because the value of
<code>fill-column</code> is 72.

<p>As we have just seen, an argument can be a symbol that returns a value
when evaluated.  In addition, an argument can be a list that returns a
value when it is evaluated.  For example, in the following expression,
the arguments to the function <code>concat</code> are the strings
<code>"The&nbsp;"</code> and <code>"&nbsp;red&nbsp;foxes."</code> and the list
<code>(number-to-string (+ 2 fill-column))</code>.

<pre>(concat "The " (number-to-string (+ 2 fill-column)) " red foxes.")
</pre>

<p>If you evaluate this expression--and if, as with my Emacs,
<code>fill-column</code> evaluates to 72--<code>"The 74 red foxes."</code> will
appear in the echo area.  (Note that you must put spaces after the
word <code>The</code> and before the word <code>red</code> so they will appear in
the final string.  The function <code>number-to-string</code> converts the
integer that the addition function returns to a string. 
<code>number-to-string</code> is also known as <code>int-to-string</code>.)

<p><hr>
Node:<a name="Variable%20Number%20of%20Arguments">Variable Number of Arguments</a>,
Next:<a rel=next href="#Wrong%20Type%20of%20Argument">Wrong Type of Argument</a>,
Previous:<a rel=previous href="#Args%20as%20Variable%20or%20List">Args as Variable or List</a>,
Up:<a rel=up href="#Arguments">Arguments</a>
<br>

<h3>1.8.3 Variable Number of Arguments</h3>

<p>Some functions, such as <code>concat</code>, <code>+</code> or <code>*</code>, take any
number of arguments.  (The <code>*</code> is the symbol for multiplication.) 
This can be seen by evaluating each of the following expressions in
the usual way.  What you will see in the echo area is printed in this
text after <code>=&gt;</code>, which you may read as `evaluates to'.

<p>In the first set, the functions have no arguments:

<pre>(+)       =&gt; 0

(*)       =&gt; 1
</pre>

<p>In this set, the functions have one argument each:

<pre>(+ 3)     =&gt; 3

(* 3)     =&gt; 3
</pre>

<p>In this set, the functions have three arguments each:

<pre>(+ 3 4 5) =&gt; 12

(* 3 4 5) =&gt; 60
</pre>

<p><hr>
Node:<a name="Wrong%20Type%20of%20Argument">Wrong Type of Argument</a>,
Next:<a rel=next href="#message">message</a>,
Previous:<a rel=previous href="#Variable%20Number%20of%20Arguments">Variable Number of Arguments</a>,
Up:<a rel=up href="#Arguments">Arguments</a>
<br>

<h3>1.8.4 Using the Wrong Type Object as an Argument</h3>

<p>When a function is passed an argument of the wrong type, the Lisp
interpreter produces an error message.  For example, the <code>+</code>
function expects the values of its arguments to be numbers.  As an
experiment we can pass it the quoted symbol <code>hello</code> instead of a
number.  Position the cursor after the following expression and type
<kbd>C-x C-e</kbd>:

<pre>(+ 2 'hello)
</pre>

<p>When you do this you will generate an error message.  What has happened
is that <code>+</code> has tried to add the 2 to the value returned by
<code>'hello</code>, but the value returned by <code>'hello</code> is the symbol
<code>hello</code>, not a number.  Only numbers can be added.  So <code>+</code>
could not carry out its addition.

<p>In GNU Emacs version 21, you will create and enter a
<code>*Backtrace*</code> buffer that says:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--Lisp error:
         (wrong-type-argument number-or-marker-p hello)
  +(2 hello)
  eval((+ 2 (quote hello)))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>As usual, the error message tries to be helpful and makes sense after you
learn how to read it.

<p>The first part of the error message is straightforward; it says
<code>wrong type argument</code>.  Next comes the mysterious jargon word
<code>number-or-marker-p</code>.  This word is trying to tell you what
kind of argument the <code>+</code> expected.

<p>The symbol <code>number-or-marker-p</code> says that the Lisp interpreter is
trying to determine whether the information presented it (the value of
the argument) is a number or a marker (a special object representing a
buffer position).  What it does is test to see whether the <code>+</code> is
being given numbers to add.  It also tests to see whether the
argument is something called a marker, which is a specific feature of
Emacs Lisp.  (In Emacs, locations in a buffer are recorded as markers. 
When the mark is set with the <kbd>C-@</kbd> or <kbd>C-&lt;SPC&gt;</kbd> command,
its position is kept as a marker.  The mark can be considered a
number--the number of characters the location is from the beginning
of the buffer.)  In Emacs Lisp, <code>+</code> can be used to add the
numeric value of marker positions as numbers.

<p>The <code>p</code> of <code>number-or-marker-p</code> is the embodiment of a
practice started in the early days of Lisp programming.  The <code>p</code>
stands for `predicate'.  In the jargon used by the early Lisp
researchers, a predicate refers to a function to determine whether some
property is true or false.  So the <code>p</code> tells us that
<code>number-or-marker-p</code> is the name of a function that determines
whether it is true or false that the argument supplied is a number or
a marker.  Other Lisp symbols that end in <code>p</code> include <code>zerop</code>,
a function that tests whether its argument has the value of zero, and
<code>listp</code>, a function that tests whether its argument is a list.

<p>Finally, the last part of the error message is the symbol <code>hello</code>. 
This is the value of the argument that was passed to <code>+</code>.  If the
addition had been passed the correct type of object, the value passed
would have been a number, such as 37, rather than a symbol like
<code>hello</code>.  But then you would not have got the error message.

<p>In GNU Emacs version 20 and before, the echo area displays an error
message that says:

<pre>Wrong type argument: number-or-marker-p, hello
</pre>

<p>This says, in different words, the same as the top line of the
<code>*Backtrace*</code> buffer.

<p><hr>
Node:<a name="message">message</a>,
Previous:<a rel=previous href="#Wrong%20Type%20of%20Argument">Wrong Type of Argument</a>,
Up:<a rel=up href="#Arguments">Arguments</a>
<br>

<h3>1.8.5 The <code>message</code> Function</h3>

<p>Like <code>+</code>, the <code>message</code> function takes a variable number of
arguments.  It is used to send messages to the user and is so useful
that we will describe it here.

<p>A message is printed in the echo area.  For example, you can print a
message in your echo area by evaluating the following list:

<pre>(message "This message appears in the echo area!")
</pre>

<p>The whole string between double quotation marks is a single argument
and is printed <i>in toto</i>.  (Note that in this example, the message
itself will appear in the echo area within double quotes; that is
because you see the value returned by the <code>message</code> function.  In
most uses of <code>message</code> in programs that you write, the text will
be printed in the echo area as a side-effect, without the quotes. 
See <a href="#multiply-by-seven%20in%20detail"><code>multiply-by-seven</code> in detail</a>, for an example of this.)

<p>However, if there is a <code>%s</code> in the quoted string of characters, the
<code>message</code> function does not print the <code>%s</code> as such, but looks
to the argument that follows the string.  It evaluates the second
argument and prints the value at the location in the string where the
<code>%s</code> is.

<p>You can see this by positioning the cursor after the following
expression and typing <kbd>C-x C-e</kbd>:

<pre>(message "The name of this buffer is: %s." (buffer-name))
</pre>

<p>In Info, <code>"The name of this buffer is: *info*."</code> will appear in the
echo area.  The function <code>buffer-name</code> returns the name of the
buffer as a string, which the <code>message</code> function inserts in place
of <code>%s</code>.

<p>To print a value as an integer, use <code>%d</code> in the same way as
<code>%s</code>.  For example, to print a message in the echo area that
states the value of the <code>fill-column</code>, evaluate the following:

<pre>(message "The value of fill-column is %d." fill-column)
</pre>

<p>On my system, when I evaluate this list, <code>"The value of
fill-column is 72."</code> appears in my echo area<a rel=footnote href="#fn-2"><sup>2</sup></a>.

<p>If there is more than one <code>%s</code> in the quoted string, the value of
the first argument following the quoted string is printed at the
location of the first <code>%s</code> and the value of the second argument is
printed at the location of the second <code>%s</code>, and so on.

<p>For example, if you evaluate the following,

<pre>(message "There are %d %s in the office!"
         (- fill-column 14) "pink elephants")
</pre>

<p>a rather whimsical message will appear in your echo area.  On my system
it says, <code>"There are 58 pink elephants in the office!"</code>.

<p>The expression <code>(- fill-column 14)</code> is evaluated and the resulting
number is inserted in place of the <code>%d</code>; and the string in double
quotes, <code>"pink elephants"</code>, is treated as a single argument and
inserted in place of the <code>%s</code>.  (That is to say, a string between
double quotes evaluates to itself, like a number.)

<p>Finally, here is a somewhat complex example that not only illustrates
the computation of a number, but also shows how you can use an
expression within an expression to generate the text that is substituted
for <code>%s</code>:

<pre>(message "He saw %d %s"
         (- fill-column 34)
         (concat "red "
                 (substring
                  "The quick brown foxes jumped." 16 21)
                 " leaping."))
</pre>

<p>In this example, <code>message</code> has three arguments: the string,
<code>"He saw %d %s"</code>, the expression, <code>(- fill-column 32)</code>, and
the expression beginning with the function <code>concat</code>.  The value
resulting from the evaluation of <code>(- fill-column 32)</code> is inserted
in place of the <code>%d</code>; and the value returned by the expression
beginning with <code>concat</code> is inserted in place of the <code>%s</code>.

<p>When I evaluate the expression, the message <code>"He saw 38 red
foxes leaping."</code> appears in my echo area.

<p><hr>
Node:<a name="set%20&amp;%20setq">set & setq</a>,
Next:<a rel=next href="#Summary">Summary</a>,
Previous:<a rel=previous href="#Arguments">Arguments</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.9 Setting the Value of a Variable</h2>

<p>There are several ways by which a variable can be given a value.  One of
the ways is to use either the function <code>set</code> or the function
<code>setq</code>.  Another way is to use <code>let</code> (see <a href="#let">let</a>).  (The
jargon for this process is to <dfn>bind</dfn> a variable to a value.)

<p>The following sections not only describe how <code>set</code> and <code>setq</code>
work but also illustrate how arguments are passed.

<ul>
<li><a href="#Using%20set">Using set</a>:                    Setting values. 
<li><a href="#Using%20setq">Using setq</a>:                   Setting a quoted value. 
<li><a href="#Counting">Counting</a>:                     Using <code>setq</code> to count. 
</ul>

<p><hr>
Node:<a name="Using%20set">Using set</a>,
Next:<a rel=next href="#Using%20setq">Using setq</a>,
Previous:<a rel=previous href="#set%20&amp;%20setq">set & setq</a>,
Up:<a rel=up href="#set%20&amp;%20setq">set & setq</a>
<br>

<h3>1.9.1 Using <code>set</code></h3>

<p>To set the value of the symbol <code>flowers</code> to the list <code>'(rose
violet daisy buttercup)</code>, evaluate the following expression by
positioning the cursor after the expression and typing <kbd>C-x C-e</kbd>.

<pre>(set 'flowers '(rose violet daisy buttercup))
</pre>

<p>The list <code>(rose violet daisy buttercup)</code> will appear in the echo
area.  This is what is <em>returned</em> by the <code>set</code> function.  As a
side effect, the symbol <code>flowers</code> is bound to the list ; that is,
the symbol <code>flowers</code>, which can be viewed as a variable, is given
the list as its value.  (This process, by the way, illustrates how a
side effect to the Lisp interpreter, setting the value, can be the
primary effect that we humans are interested in.  This is because every
Lisp function must return a value if it does not get an error, but it
will only have a side effect if it is designed to have one.)

<p>After evaluating the <code>set</code> expression, you can evaluate the symbol
<code>flowers</code> and it will return the value you just set.  Here is the
symbol.  Place your cursor after it and type <kbd>C-x C-e</kbd>.

<pre>flowers
</pre>

<p>When you evaluate <code>flowers</code>, the list
<code>(rose violet daisy buttercup)</code> appears in the echo area.

<p>Incidentally, if you evaluate <code>'flowers</code>, the variable with a quote
in front of it, what you will see in the echo area is the symbol itself,
<code>flowers</code>.  Here is the quoted symbol, so you can try this:

<pre>'flowers
</pre>

<p>Note also, that when you use <code>set</code>, you need to quote both
arguments to <code>set</code>, unless you want them evaluated.  Since we do
not want either argument evaluated, neither the variable
<code>flowers</code> nor the list <code>(rose violet daisy buttercup)</code>, both
are quoted.  (When you use <code>set</code> without quoting its first
argument, the first argument is evaluated before anything else is
done.  If you did this and <code>flowers</code> did not have a value
already, you would get an error message that the <code>Symbol's value
as variable is void</code>; on the other hand, if <code>flowers</code> did return
a value after it was evaluated, the <code>set</code> would attempt to set
the value that was returned.  There are situations where this is the
right thing for the function to do; but such situations are rare.)

<p><hr>
Node:<a name="Using%20setq">Using setq</a>,
Next:<a rel=next href="#Counting">Counting</a>,
Previous:<a rel=previous href="#Using%20set">Using set</a>,
Up:<a rel=up href="#set%20&amp;%20setq">set & setq</a>
<br>

<h3>1.9.2 Using <code>setq</code></h3>

<p>As a practical matter, you almost always quote the first argument to
<code>set</code>.  The combination of <code>set</code> and a quoted first argument
is so common that it has its own name: the special form <code>setq</code>. 
This special form is just like <code>set</code> except that the first argument
is quoted automatically, so you don't need to type the quote mark
yourself.  Also, as an added convenience, <code>setq</code> permits you to set
several different variables to different values, all in one expression.

<p>To set the value of the variable <code>carnivores</code> to the list
<code>'(lion tiger leopard)</code> using <code>setq</code>, the following expression
is used:

<pre>(setq carnivores '(lion tiger leopard))
</pre>

<p>This is exactly the same as using <code>set</code> except the first argument
is automatically quoted by <code>setq</code>.  (The <code>q</code> in <code>setq</code>
means <code>quote</code>.)

<p>With <code>set</code>, the expression would look like this:

<pre>(set 'carnivores '(lion tiger leopard))
</pre>

<p>Also, <code>setq</code> can be used to assign different values to
different variables.  The first argument is bound to the value
of the second argument, the third argument is bound to the value of the
fourth argument, and so on.  For example, you could use the following to
assign a list of trees to the symbol <code>trees</code> and a list of herbivores
to the symbol <code>herbivores</code>:

<pre>(setq trees '(pine fir oak maple)
      herbivores '(gazelle antelope zebra))
</pre>

<p>(The expression could just as well have been on one line, but it might
not have fit on a page; and humans find it easier to read nicely
formatted lists.)

<p>Although I have been using the term `assign', there is another way of
thinking about the workings of <code>set</code> and <code>setq</code>; and that is to
say that <code>set</code> and <code>setq</code> make the symbol <em>point</em> to the
list.  This latter way of thinking is very common and in forthcoming
chapters we shall come upon at least one symbol that has `pointer' as
part of its name.  The name is chosen because the symbol has a value,
specifically a list, attached to it; or, expressed another way,
the symbol is set to "point" to the list.

<p><hr>
Node:<a name="Counting">Counting</a>,
Previous:<a rel=previous href="#Using%20setq">Using setq</a>,
Up:<a rel=up href="#set%20&amp;%20setq">set & setq</a>
<br>

<h3>1.9.3 Counting</h3>

<p>Here is an example that shows how to use <code>setq</code> in a counter.  You
might use this to count how many times a part of your program repeats
itself.  First set a variable to zero; then add one to the number each
time the program repeats itself.  To do this, you need a variable that
serves as a counter, and two expressions: an initial <code>setq</code>
expression that sets the counter variable to zero; and a second
<code>setq</code> expression that increments the counter each time it is
evaluated.

<pre>(setq counter 0)                ; Let's call this the initializer.

(setq counter (+ counter 1))    ; This is the incrementer.

counter                         ; This is the counter.
</pre>

<p>(The text following the <code>;</code> are comments.  See <a href="#Change%20a%20defun">Change a Function Definition</a>.)

<p>If you evaluate the first of these expressions, the initializer,
<code>(setq counter 0)</code>, and then evaluate the third expression,
<code>counter</code>, the number <code>0</code> will appear in the echo area.  If
you then evaluate the second expression, the incrementer, <code>(setq
counter (+ counter 1))</code>, the counter will get the value 1.  So if you
again evaluate <code>counter</code>, the number <code>1</code> will appear in the
echo area.  Each time you evaluate the second expression, the value of
the counter will be incremented.

<p>When you evaluate the incrementer, <code>(setq counter (+ counter 1))</code>,
the Lisp interpreter first evaluates the innermost list; this is the
addition.  In order to evaluate this list, it must evaluate the variable
<code>counter</code> and the number <code>1</code>.  When it evaluates the variable
<code>counter</code>, it receives its current value.  It passes this value and
the number <code>1</code> to the <code>+</code> which adds them together.  The sum
is then returned as the value of the inner list and passed to the
<code>setq</code> which sets the variable <code>counter</code> to this new value. 
Thus, the value of the variable, <code>counter</code>, is changed.

<p><hr>
Node:<a name="Summary">Summary</a>,
Next:<a rel=next href="#Error%20Message%20Exercises">Error Message Exercises</a>,
Previous:<a rel=previous href="#set%20&amp;%20setq">set & setq</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.10 Summary</h2>

<p>Learning Lisp is like climbing a hill in which the first part is the
steepest.  You have now climbed the most difficult part; what remains
becomes easier as you progress onwards.

<p>In summary,

<ul>

<li>Lisp programs are made up of expressions, which are lists or single atoms.

<li>Lists are made up of zero or more atoms or inner lists, separated by whitespace and
surrounded by parentheses.  A list can be empty.

<li>Atoms are multi-character symbols, like <code>forward-paragraph</code>, single
character symbols like <code>+</code>, strings of characters between double
quotation marks, or numbers.

<li>A number evaluates to itself.

<li>A string between double quotes also evaluates to itself.

<li>When you evaluate a symbol by itself, its value is returned.

<li>When you evaluate a list, the Lisp interpreter looks at the first symbol
in the list and then at the function definition bound to that symbol. 
Then the instructions in the function definition are carried out.

<li>A single-quote, <code>'</code>, tells the Lisp interpreter that it should
return the following expression as written, and not evaluate it as it
would if the quote were not there.

<li>Arguments are the information passed to a function.  The arguments to a
function are computed by evaluating the rest of the elements of the list
of which the function is the first element.

<li>A function always returns a value when it is evaluated (unless it gets
an error); in addition, it may also carry out some action called a
"side effect".  In many cases, a function's primary purpose is to
create a side effect. 
</ul>

<p><hr>
Node:<a name="Error%20Message%20Exercises">Error Message Exercises</a>,
Previous:<a rel=previous href="#Summary">Summary</a>,
Up:<a rel=up href="#List%20Processing">List Processing</a>
<br>

<h2>1.11 Exercises</h2>

<p>A few simple exercises:

<ul>
<li>Generate an error message by evaluating an appropriate symbol that is
not within parentheses.

<li>Generate an error message by evaluating an appropriate symbol that is
between parentheses.

<li>Create a counter that increments by two rather than one.

<li>Write an expression that prints a message in the echo area when
evaluated. 
</ul>

<p><hr>
Node:<a name="Practicing%20Evaluation">Practicing Evaluation</a>,
Next:<a rel=next href="#Writing%20Defuns">Writing Defuns</a>,
Previous:<a rel=previous href="#List%20Processing">List Processing</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>2 Practicing Evaluation</h1>

<p>Before learning how to write a function definition in Emacs Lisp, it is
useful to spend a little time evaluating various expressions that have
already been written.  These expressions will be lists with the
functions as their first (and often only) element.  Since some of the
functions associated with buffers are both simple and interesting, we
will start with those.  In this section, we will evaluate a few of
these.  In another section, we will study the code of several other
buffer-related functions, to see how they were written.

<ul>
<li><a href="#How%20to%20Evaluate">How to Evaluate</a>:              Typing editing commands or <kbd>C-x C-e</kbd>
                                  causes evaluation. 
<li><a href="#Buffer%20Names">Buffer Names</a>:                 Buffers and files are different. 
<li><a href="#Getting%20Buffers">Getting Buffers</a>:              Getting a buffer itself, not merely its name. 
<li><a href="#Switching%20Buffers">Switching Buffers</a>:            How to change to another buffer. 
<li><a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size &amp; Locations</a>:      Where point is located and the size of
                                the buffer. 
<li><a href="#Evaluation%20Exercise">Evaluation Exercise</a>: 
</ul>

<p><hr>
Node:<a name="How%20to%20Evaluate">How to Evaluate</a>,
Next:<a rel=next href="#Buffer%20Names">Buffer Names</a>,
Previous:<a rel=previous href="#Practicing%20Evaluation">Practicing Evaluation</a>,
Up:<a rel=up href="#Practicing%20Evaluation">Practicing Evaluation</a>
<br>

<h2>How to Evaluate</h2>

<p><i>Whenever you give an editing command</i> to Emacs Lisp, such as the
command to move the cursor or to scroll the screen, <i>you are evaluating
an expression,</i> the first element of which is a function.  <i>This is
how Emacs works.</i>

<p>When you type keys, you cause the Lisp interpreter to evaluate an
expression and that is how you get your results.  Even typing plain text
involves evaluating an Emacs Lisp function, in this case, one that uses
<code>self-insert-command</code>, which simply inserts the character you
typed.  The functions you evaluate by typing keystrokes are called
<dfn>interactive</dfn> functions, or <dfn>commands</dfn>; how you make a function
interactive will be illustrated in the chapter on how to write function
definitions.  See <a href="#Interactive">Making a Function Interactive</a>.

<p>In addition to typing keyboard commands, we have seen a second way to
evaluate an expression: by positioning the cursor after a list and
typing <kbd>C-x C-e</kbd>.  This is what we will do in the rest of this
section.  There are other ways to evaluate an expression as well; these
will be described as we come to them.

<p>Besides being used for practicing evaluation, the functions shown in the
next few sections are important in their own right.  A study of these
functions makes clear the distinction between buffers and files, how to
switch to a buffer, and how to determine a location within it.

<p><hr>
Node:<a name="Buffer%20Names">Buffer Names</a>,
Next:<a rel=next href="#Getting%20Buffers">Getting Buffers</a>,
Previous:<a rel=previous href="#How%20to%20Evaluate">How to Evaluate</a>,
Up:<a rel=up href="#Practicing%20Evaluation">Practicing Evaluation</a>
<br>

<h2>2.1 Buffer Names</h2>

<p>The two functions, <code>buffer-name</code> and <code>buffer-file-name</code>, show
the difference between a file and a buffer.  When you evaluate the
following expression, <code>(buffer-name)</code>, the name of the buffer
appears in the echo area.  When you evaluate <code>(buffer-file-name)</code>,
the name of the file to which the buffer refers appears in the echo
area.  Usually, the name returned by <code>(buffer-name)</code> is the same as
the name of the file to which it refers, and the name returned by
<code>(buffer-file-name)</code> is the full path-name of the file.

<p>A file and a buffer are two different entities.  A file is information
recorded permanently in the computer (unless you delete it).  A buffer,
on the other hand, is information inside of Emacs that will vanish at
the end of the editing session (or when you kill the buffer).  Usually,
a buffer contains information that you have copied from a file; we say
the buffer is <dfn>visiting</dfn> that file.  This copy is what you work on
and modify.  Changes to the buffer do not change the file, until you
save the buffer.  When you save the buffer, the buffer is copied to the file
and is thus saved permanently.

<p>If you are reading this in Info inside of GNU Emacs, you can evaluate
each of the following expressions by positioning the cursor after it and
typing <kbd>C-x C-e</kbd>.

<pre>(buffer-name)

(buffer-file-name)
</pre>

<p>When I do this, <code>"introduction.texinfo"</code> is the value returned by
evaluating <code>(buffer-name)</code>, and
<code>"/gnu/work/intro/introduction.texinfo"</code> is the value returned by
evaluating <code>(buffer-file-name)</code>.  The former is the name of the
buffer and the latter is the name of the file.  (In the expressions, the
parentheses tell the Lisp interpreter to treat <code>buffer-name</code> and
<code>buffer-file-name</code> as functions; without the parentheses, the
interpreter would attempt to evaluate the symbols as variables. 
See <a href="#Variables">Variables</a>.)

<p>In spite of the distinction between files and buffers, you will often
find that people refer to a file when they mean a buffer and vice-versa. 
Indeed, most people say, "I am editing a file," rather than saying,
"I am editing a buffer which I will soon save to a file."  It is
almost always clear from context what people mean.  When dealing with
computer programs, however, it is important to keep the distinction in mind,
since the computer is not as smart as a person.

<p>The word `buffer', by the way, comes from the meaning of the word as a
cushion that deadens the force of a collision.  In early computers, a
buffer cushioned the interaction between files and the computer's
central processing unit.  The drums or tapes that held a file and the
central processing unit were pieces of equipment that were very
different from each other, working at their own speeds, in spurts.  The
buffer made it possible for them to work together effectively. 
Eventually, the buffer grew from being an intermediary, a temporary
holding place, to being the place where work is done.  This
transformation is rather like that of a small seaport that grew into a
great city: once it was merely the place where cargo was warehoused
temporarily before being loaded onto ships; then it became a business
and cultural center in its own right.

<p>Not all buffers are associated with files.  For example, when you start
an Emacs session by typing the command <code>emacs</code> alone, without
naming any files, Emacs will start with the <code>*scratch*</code> buffer on
the screen.  This buffer is not visiting any file.  Similarly, a
<code>*Help*</code> buffer is not associated with any file.

<p>If you switch to the <code>*scratch*</code> buffer, type <code>(buffer-name)</code>,
position the cursor after it, and type <kbd>C-x C-e</kbd> to evaluate the
expression, the name <code>"*scratch*"</code> is returned and will appear in
the echo area.  <code>"*scratch*"</code> is the name of the buffer.  However,
if you type <code>(buffer-file-name)</code> in the <code>*scratch*</code> buffer and
evaluate that, <code>nil</code> will appear in the echo area.  <code>nil</code> is
from the Latin word for `nothing'; in this case, it means that the
<code>*scratch*</code> buffer is not associated with any file.  (In Lisp,
<code>nil</code> is also used to mean `false' and is a synonym for the empty
list, <code>()</code>.)

<p>Incidentally, if you are in the <code>*scratch*</code> buffer and want the
value returned by an expression to appear in the <code>*scratch*</code>
buffer itself rather than in the echo area, type <kbd>C-u C-x C-e</kbd>
instead of <kbd>C-x C-e</kbd>.  This causes the value returned to appear
after the expression.  The buffer will look like this:

<pre>(buffer-name)"*scratch*"
</pre>

<p>You cannot do this in Info since Info is read-only and it will not allow
you to change the contents of the buffer.  But you can do this in any
buffer you can edit; and when you write code or documentation (such as
this book), this feature is very useful.

<p><hr>
Node:<a name="Getting%20Buffers">Getting Buffers</a>,
Next:<a rel=next href="#Switching%20Buffers">Switching Buffers</a>,
Previous:<a rel=previous href="#Buffer%20Names">Buffer Names</a>,
Up:<a rel=up href="#Practicing%20Evaluation">Practicing Evaluation</a>
<br>

<h2>2.2 Getting Buffers</h2>

<p>The <code>buffer-name</code> function returns the <em>name</em> of the buffer;
to get the buffer <em>itself</em>, a different function is needed: the
<code>current-buffer</code> function.  If you use this function in code, what
you get is the buffer itself.

<p>A name and the object or entity to which the name refers are different
from each other.  You are not your name.  You are a person to whom
others refer by name.  If you ask to speak to George and someone hands you
a card with the letters <code>G</code>, <code>e</code>, <code>o</code>, <code>r</code>,
<code>g</code>, and <code>e</code> written on it, you might be amused, but you would
not be satisfied.  You do not want to speak to the name, but to the
person to whom the name refers.  A buffer is similar: the name of the
scratch buffer is <code>*scratch*</code>, but the name is not the buffer.  To
get a buffer itself, you need to use a function such as
<code>current-buffer</code>.

<p>However, there is a slight complication: if you evaluate
<code>current-buffer</code> in an expression on its own, as we will do here,
what you see is a printed representation of the name of the buffer
without the contents of the buffer.  Emacs works this way for two
reasons: the buffer may be thousands of lines long--too long to be
conveniently displayed; and, another buffer may have the same contents
but a different name, and it is important to distinguish between them.

<p>Here is an expression containing the function:

<pre>(current-buffer)
</pre>

<p>If you evaluate the expression in the usual way, <code>#&lt;buffer *info*&gt;</code>
appears in the echo area.  The special format indicates that the
buffer itself is being returned, rather than just its name.

<p>Incidentally, while you can type a number or symbol into a program, you
cannot do that with the printed representation of a buffer: the only way
to get a buffer itself is with a function such as <code>current-buffer</code>.

<p>A related function is <code>other-buffer</code>.  This returns the most
recently selected buffer other than the one you are in currently.  If
you have recently switched back and forth from the <code>*scratch*</code>
buffer, <code>other-buffer</code> will return that buffer.

<p>You can see this by evaluating the expression:

<pre>(other-buffer)
</pre>

<p>You should see <code>#&lt;buffer *scratch*&gt;</code> appear in the echo area, or
the name of whatever other buffer you switched back from most
recently<a rel=footnote href="#fn-3"><sup>3</sup></a>.

<p><hr>
Node:<a name="Switching%20Buffers">Switching Buffers</a>,
Next:<a rel=next href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>,
Previous:<a rel=previous href="#Getting%20Buffers">Getting Buffers</a>,
Up:<a rel=up href="#Practicing%20Evaluation">Practicing Evaluation</a>
<br>

<h2>2.3 Switching Buffers</h2>

<p>The <code>other-buffer</code> function actually provides a buffer when it is
used as an argument to a function that requires one.  We can see this
by using <code>other-buffer</code> and <code>switch-to-buffer</code> to switch to a
different buffer.

<p>But first, a brief introduction to the <code>switch-to-buffer</code>
function.  When you switched back and forth from Info to the
<code>*scratch*</code> buffer to evaluate <code>(buffer-name)</code>, you most
likely typed <kbd>C-x b</kbd> and then typed <code>*scratch*</code><a rel=footnote href="#fn-4"><sup>4</sup></a> when
prompted in the minibuffer for the name of the buffer to which you
wanted to switch.  The keystrokes, <kbd>C-x b</kbd>, cause the Lisp
interpreter to evaluate the interactive function
<code>switch-to-buffer</code>.  As we said before, this is how Emacs works:
different keystrokes call or run different functions.  For example,
<kbd>C-f</kbd> calls <code>forward-char</code>, <kbd>M-e</kbd> calls
<code>forward-sentence</code>, and so on.

<p>By writing <code>switch-to-buffer</code> in an expression, and giving it a
buffer to switch to, we can switch buffers just the way <kbd>C-x b</kbd>
does.

<p>Here is the Lisp expression:

<pre>(switch-to-buffer (other-buffer))
</pre>

<p>The symbol <code>switch-to-buffer</code> is the first element of the list,
so the Lisp interpreter will treat it as a function and carry out the
instructions that are attached to it.  But before doing that, the
interpreter will note that <code>other-buffer</code> is inside parentheses
and work on that symbol first.  <code>other-buffer</code> is the first (and
in this case, the only) element of this list, so the Lisp interpreter
calls or runs the function.  It returns another buffer.  Next, the
interpreter runs <code>switch-to-buffer</code>, passing to it, as an
argument, the other buffer, which is what Emacs will switch to.  If
you are reading this in Info, try this now.  Evaluate the expression. 
(To get back, type <kbd>C-x b &lt;RET&gt;</kbd>.)<a rel=footnote href="#fn-5"><sup>5</sup></a>

<p>In the programming examples in later sections of this document, you will
see the function <code>set-buffer</code> more often than
<code>switch-to-buffer</code>.  This is because of a difference between
computer programs and humans: humans have eyes and expect to see the
buffer on which they are working on their computer terminals.  This is
so obvious, it almost goes without saying.  However, programs do not
have eyes.  When a computer program works on a buffer, that buffer does
not need to be visible on the screen.

<p><code>switch-to-buffer</code> is designed for humans and does two different
things: it switches the buffer to which Emacs' attention is directed; and
it switches the buffer displayed in the window to the new buffer. 
<code>set-buffer</code>, on the other hand, does only one thing: it switches
the attention of the computer program to a different buffer.  The buffer
on the screen remains unchanged (of course, normally nothing happens
there until the command finishes running).

<p>Also, we have just introduced another jargon term, the word <dfn>call</dfn>. 
When you evaluate a list in which the first symbol is a function, you
are calling that function.  The use of the term comes from the notion of
the function as an entity that can do something for you if you `call'
it--just as a plumber is an entity who can fix a leak if you call him
or her.

<p><hr>
Node:<a name="Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>,
Next:<a rel=next href="#Evaluation%20Exercise">Evaluation Exercise</a>,
Previous:<a rel=previous href="#Switching%20Buffers">Switching Buffers</a>,
Up:<a rel=up href="#Practicing%20Evaluation">Practicing Evaluation</a>
<br>

<h2>2.4 Buffer Size and the Location of Point</h2>

<p>Finally, let's look at several rather simple functions,
<code>buffer-size</code>, <code>point</code>, <code>point-min</code>, and
<code>point-max</code>.  These give information about the size of a buffer and
the location of point within it.

<p>The function <code>buffer-size</code> tells you the size of the current
buffer; that is, the function returns a count of the number of
characters in the buffer.

<pre>(buffer-size)
</pre>

<p>You can evaluate this in the usual way, by positioning the
cursor after the expression and typing <kbd>C-x C-e</kbd>.

<p>In Emacs, the current  position of the cursor is called <dfn>point</dfn>. 
The expression <code>(point)</code> returns a number that tells you where the
cursor is located as a count of the number of characters from the
beginning of the buffer up to point.

<p>You can see the character count for point in this buffer by evaluating
the following expression in the usual way:

<pre>(point)
</pre>

<p>As I write this, the value of <code>point</code> is 65724.  The <code>point</code>
function is frequently used in some of the examples later in this
book.

<p>The value of point depends, of course, on its location within the
buffer.  If you evaluate point in this spot, the number will be larger:

<pre>(point)
</pre>

<p>For me, the value of point in this location is 66043, which means that
there are 319 characters (including spaces) between the two expressions.

<p>The function <code>point-min</code> is somewhat similar to <code>point</code>, but
it returns the value of the minimum permissible value of point in the
current buffer.  This is the number 1 unless <dfn>narrowing</dfn> is in
effect.  (Narrowing is a mechanism whereby you can restrict yourself,
or a program, to operations on just a part of a buffer. 
See <a href="#Narrowing%20&amp;%20Widening">Narrowing and Widening</a>.)  Likewise, the
function <code>point-max</code> returns the value of the maximum permissible
value of point in the current buffer.

<p><hr>
Node:<a name="Evaluation%20Exercise">Evaluation Exercise</a>,
Previous:<a rel=previous href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>,
Up:<a rel=up href="#Practicing%20Evaluation">Practicing Evaluation</a>
<br>

<h2>2.5 Exercise</h2>

<p>Find a file with which you are working and move towards its middle. 
Find its buffer name, file name, length, and your position in the file.

<p><hr>
Node:<a name="Writing%20Defuns">Writing Defuns</a>,
Next:<a rel=next href="#Buffer%20Walk%20Through">Buffer Walk Through</a>,
Previous:<a rel=previous href="#Practicing%20Evaluation">Practicing Evaluation</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>3 How To Write Function Definitions</h1>

<p>When the Lisp interpreter evaluates a list, it looks to see whether the
first symbol on the list has a function definition attached to it; or,
put another way, whether the symbol points to a function definition.  If
it does, the computer carries out the instructions in the definition.  A
symbol that has a function definition is called, simply, a function
(although, properly speaking, the definition is the function and the
symbol refers to it.)

<ul>
<li><a href="#Primitive%20Functions">Primitive Functions</a>: 
<li><a href="#defun">defun</a>:                        The <code>defun</code> special form. 
<li><a href="#Install">Install</a>:                      Install a function definition. 
<li><a href="#Interactive">Interactive</a>:                  Making a function interactive. 
<li><a href="#Interactive%20Options">Interactive Options</a>:          Different options for <code>interactive</code>. 
<li><a href="#Permanent%20Installation">Permanent Installation</a>:       Installing code permanently. 
<li><a href="#let">let</a>:                          Creating and initializing local variables. 
<li><a href="#if">if</a>:                           What if? 
<li><a href="#else">else</a>:                         If--then--else expressions. 
<li><a href="#Truth%20&amp;%20Falsehood">Truth &amp; Falsehood</a>:            What Lisp considers false and true. 
<li><a href="#save-excursion">save-excursion</a>:               Keeping track of point, mark, and buffer. 
<li><a href="#Review">Review</a>: 
<li><a href="#defun%20Exercises">defun Exercises</a>: 
</ul>

<p><hr>
Node:<a name="Primitive%20Functions">Primitive Functions</a>,
Next:<a rel=next href="#defun">defun</a>,
Previous:<a rel=previous href="#Writing%20Defuns">Writing Defuns</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>An Aside about Primitive Functions</h2>

<p>All functions are defined in terms of other functions, except for a few
<dfn>primitive</dfn> functions that are written in the C programming
language.  When you write functions' definitions, you will write them in
Emacs Lisp and use other functions as your building blocks.  Some of the
functions you will use will themselves be written in Emacs Lisp (perhaps
by you) and some will be primitives written in C.  The primitive
functions are used exactly like those written in Emacs Lisp and behave
like them.  They are written in C so we can easily run GNU Emacs on any
computer that has sufficient power and can run C.

<p>Let me re-emphasize this: when you write code in Emacs Lisp, you do not
distinguish between the use of functions written in C and the use of
functions written in Emacs Lisp.  The difference is irrelevant.  I
mention the distinction only because it is interesting to know.  Indeed,
unless you investigate, you won't know whether an already-written
function is written in Emacs Lisp or C.

<p><hr>
Node:<a name="defun">defun</a>,
Next:<a rel=next href="#Install">Install</a>,
Previous:<a rel=previous href="#Primitive%20Functions">Primitive Functions</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.1 The <code>defun</code> Special Form</h2>

<p>In Lisp, a symbol such as <code>mark-whole-buffer</code> has code attached to
it that tells the computer what to do when the function is called. 
This code is called the <dfn>function definition</dfn> and is created by
evaluating a Lisp expression that starts with the symbol <code>defun</code>
(which is an abbreviation for <em>define function</em>).  Because
<code>defun</code> does not evaluate its arguments in the usual way, it is
called a <dfn>special form</dfn>.

<p>In subsequent sections, we will look at function definitions from the
Emacs source code, such as <code>mark-whole-buffer</code>.  In this section,
we will describe a simple function definition so you can see how it
looks.  This function definition uses arithmetic because it makes for a
simple example.  Some people dislike examples using arithmetic; however,
if you are such a person, do not despair.  Hardly any of the code we
will study in the remainder of this introduction involves arithmetic or
mathematics.  The examples mostly involve text in one way or another.

<p>A function definition has up to five parts following the word
<code>defun</code>:

<ol type=1 start=1>
</p><li>The name of the symbol to which the function definition should be
attached.

<li>A list of the arguments that will be passed to the function.  If no
arguments will be passed to the function, this is an empty list,
<code>()</code>.

<li>Documentation describing the function.  (Technically optional, but
strongly recommended.)

<li>Optionally, an expression to make the function interactive so you can
use it by typing <kbd>M-x</kbd> and then the name of the function; or by
typing an appropriate key or keychord.

<li>The code that instructs the computer what to do: the <dfn>body</dfn> of the
function definition.
</ol>

<p>It is helpful to think of the five parts of a function definition as
being organized in a template, with slots for each part:

<pre>(defun <var>function-name</var> (<var>arguments</var><small>...</small>)
  "<var>optional-documentation</var><small>...</small>"
  (interactive <var>argument-passing-info</var>)     ; optional
  <var>body</var><small>...</small>)
</pre>

<p>As an example, here is the code for a function that multiplies its
argument by 7.  (This example is not interactive.  See <a href="#Interactive">Making a Function Interactive</a>, for that information.)

<pre>(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))
</pre>

<p>This definition begins with a parenthesis and the symbol <code>defun</code>,
followed by the name of the function.

<p>The name of the function is followed by a list that contains the
arguments that will be passed to the function.  This list is called
the <dfn>argument list</dfn>.  In this example, the list has only one
element, the symbol, <code>number</code>.  When the function is used, the
symbol will be bound to the value that is used as the argument to the
function.

<p>Instead of choosing the word <code>number</code> for the name of the argument,
I could have picked any other name.  For example, I could have chosen
the word <code>multiplicand</code>.  I picked the word `number' because it
tells what kind of value is intended for this slot; but I could just as
well have chosen the word `multiplicand' to indicate the role that the
value placed in this slot will play in the workings of the function.  I
could have called it <code>foogle</code>, but that would have been a bad
choice because it would not tell humans what it means.  The choice of
name is up to the programmer and should be chosen to make the meaning of
the function clear.

<p>Indeed, you can choose any name you wish for a symbol in an argument
list, even the name of a symbol used in some other function: the name
you use in an argument list is private to that particular definition. 
In that definition, the name refers to a different entity than any use
of the same name outside the function definition.  Suppose you have a
nick-name `Shorty' in your family; when your family members refer to
`Shorty', they mean you.  But outside your family, in a movie, for
example, the name `Shorty' refers to someone else.  Because a name in an
argument list is private to the function definition, you can change the
value of such a symbol inside the body of a function without changing
its value outside the function.  The effect is similar to that produced
by a <code>let</code> expression.  (See <a href="#let"><code>let</code></a>.)

<p>The argument list is followed by the documentation string that
describes the function.  This is what you see when you type
<kbd>C-h&nbsp;f</kbd> and the name of a function.  Incidentally, when you
write a documentation string like this, you should make the first line
a complete sentence since some commands, such as <code>apropos</code>, print
only the first line of a multi-line documentation string.  Also, you
should not indent the second line of a documentation string, if you
have one, because that looks odd when you use <kbd>C-h f</kbd>
(<code>describe-function</code>).  The documentation string is optional, but
it is so useful, it should be included in almost every function you
write.

<p>The third line of the example consists of the body of the function
definition.  (Most functions' definitions, of course, are longer than
this.)  In this function, the body is the list, <code>(* 7 number)</code>, which
says to multiply the value of <var>number</var> by 7.  (In Emacs Lisp,
<code>*</code> is the function for multiplication, just as <code>+</code> is the
function for addition.)

<p>When you use the <code>multiply-by-seven</code> function, the argument
<code>number</code> evaluates to the actual number you want used.  Here is an
example that shows how <code>multiply-by-seven</code> is used; but don't try
to evaluate this yet!

<pre>(multiply-by-seven 3)
</pre>

<p>The symbol <code>number</code>, specified in the function definition in the
next section, is given or "bound to" the value 3 in the actual use of
the function.  Note that although <code>number</code> was inside parentheses
in the function definition, the argument passed to the
<code>multiply-by-seven</code> function is not in parentheses.  The
parentheses are written in the function definition so the computer can
figure out where the argument list ends and the rest of the function
definition begins.

<p>If you evaluate this example, you are likely to get an error message. 
(Go ahead, try it!)  This is because we have written the function
definition, but not yet told the computer about the definition--we have
not yet installed (or `loaded') the function definition in Emacs. 
Installing a function is the process that tells the Lisp interpreter the
definition of the function.  Installation is described in the next
section.

<p><hr>
Node:<a name="Install">Install</a>,
Next:<a rel=next href="#Interactive">Interactive</a>,
Previous:<a rel=previous href="#defun">defun</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.2 Install a Function Definition</h2>

<p>If you are reading this inside of Info in Emacs, you can try out the
<code>multiply-by-seven</code> function by first evaluating the function
definition and then evaluating <code>(multiply-by-seven 3)</code>.  A copy of
the function definition follows.  Place the cursor after the last
parenthesis of the function definition and type <kbd>C-x C-e</kbd>.  When you
do this, <code>multiply-by-seven</code> will appear in the echo area.  (What
this means is that when a function definition is evaluated, the value it
returns is the name of the defined function.)  At the same time, this
action installs the function definition.

<pre>(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))
</pre>

<p>By evaluating this <code>defun</code>, you have just installed
<code>multiply-by-seven</code> in Emacs.  The function is now just as much a
part of Emacs as <code>forward-word</code> or any other editing function you
use.  (<code>multiply-by-seven</code> will stay installed until you quit
Emacs.  To reload code automatically whenever you start Emacs, see
<a href="#Permanent%20Installation">Installing Code Permanently</a>.)

<ul>
<li><a href="#Effect%20of%20installation">Effect of installation</a>: 
<li><a href="#Change%20a%20defun">Change a defun</a>:               How to change a function definition. 
</ul>

<p><hr>
Node:<a name="Effect%20of%20installation">Effect of installation</a>,
Next:<a rel=next href="#Change%20a%20defun">Change a defun</a>,
Previous:<a rel=previous href="#Install">Install</a>,
Up:<a rel=up href="#Install">Install</a>
<br>

<h3>The effect of installation</h3>

<p>You can see the effect of installing <code>multiply-by-seven</code> by
evaluating the following sample.  Place the cursor after the following
expression and type <kbd>C-x C-e</kbd>.  The number 21 will appear in the
echo area.

<pre>(multiply-by-seven 3)
</pre>

<p>If you wish, you can read the documentation for the function by typing
<kbd>C-h f</kbd> (<code>describe-function</code>) and then the name of the
function, <code>multiply-by-seven</code>.  When you do this, a
<code>*Help*</code> window will appear on your screen that says:

<pre>multiply-by-seven:
Multiply NUMBER by seven.
</pre>

<p>(To return to a single window on your screen, type <kbd>C-x 1</kbd>.)

<p><hr>
Node:<a name="Change%20a%20defun">Change a defun</a>,
Previous:<a rel=previous href="#Effect%20of%20installation">Effect of installation</a>,
Up:<a rel=up href="#Install">Install</a>
<br>

<h3>3.2.1 Change a Function Definition</h3>

<p>If you want to change the code in <code>multiply-by-seven</code>, just rewrite
it.  To install the new version in place of the old one, evaluate the
function definition again.  This is how you modify code in Emacs.  It is
very simple.

<p>As an example, you can change the <code>multiply-by-seven</code> function to
add the number to itself seven times instead of multiplying the number
by seven.  It produces the same answer, but by a different path.  At
the same time, we will add a comment to the code; a comment is text
that the Lisp interpreter ignores, but that a human reader may find
useful or enlightening.  The comment is that this is the "second
version".

<pre>(defun multiply-by-seven (number)       ; Second version.
  "Multiply NUMBER by seven."
  (+ number number number number number number number))
</pre>

<p>The comment follows a semicolon, <code>;</code>.  In Lisp, everything on a
line that follows a semicolon is a comment.  The end of the line is the
end of the comment.  To stretch a comment over two or more lines, begin
each line with a semicolon.

<p>See <a href="#Beginning%20a%20.emacs%20File">Beginning a <code>.emacs</code> File</a>, and <a href="elisp.html#Comments">Comments</a>, for more about comments.

<p>You can install this version of the <code>multiply-by-seven</code> function by
evaluating it in the same way you evaluated the first function: place
the cursor after the last parenthesis and type <kbd>C-x C-e</kbd>.

<p>In summary, this is how you write code in Emacs Lisp: you write a
function; install it; test it; and then make fixes or enhancements and
install it again.

<p><hr>
Node:<a name="Interactive">Interactive</a>,
Next:<a rel=next href="#Interactive%20Options">Interactive Options</a>,
Previous:<a rel=previous href="#Install">Install</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.3 Make a Function Interactive</h2>

<p>You make a function interactive by placing a list that begins with
the special form <code>interactive</code> immediately after the
documentation.  A user can invoke an interactive function by typing
<kbd>M-x</kbd> and then the name of the function; or by typing the keys to
which it is bound, for example, by typing <kbd>C-n</kbd> for
<code>next-line</code> or <kbd>C-x h</kbd> for <code>mark-whole-buffer</code>.

<p>Interestingly, when you call an interactive function interactively,
the value returned is not automatically displayed in the echo area. 
This is because you often call an interactive function for its side
effects, such as moving forward by a word or line, and not for the
value returned.  If the returned value were displayed in the echo area
each time you typed a key, it would be very distracting.

<ul>
<li><a href="#Interactive%20multiply-by-seven">Interactive multiply-by-seven</a>:   An overview. 
<li><a href="#multiply-by-seven%20in%20detail">multiply-by-seven in detail</a>:   The interactive version. 
</ul>

<p><hr>
Node:<a name="Interactive%20multiply-by-seven">Interactive multiply-by-seven</a>,
Next:<a rel=next href="#multiply-by-seven%20in%20detail">multiply-by-seven in detail</a>,
Previous:<a rel=previous href="#Interactive">Interactive</a>,
Up:<a rel=up href="#Interactive">Interactive</a>
<br>

<h3>An Interactive <code>multiply-by-seven</code>, An Overview</h3>

<p>Both the use of the special form <code>interactive</code> and one way to
display a value in the echo area can be illustrated by creating an
interactive version of <code>multiply-by-seven</code>.

<p>Here is the code:

<pre>(defun multiply-by-seven (number)       ; Interactive version.
  "Multiply NUMBER by seven."
  (interactive "p")
  (message "The result is %d" (* 7 number)))
</pre>

<p>You can install this code by placing your cursor after it and typing
<kbd>C-x C-e</kbd>.  The name of the function will appear in your echo area. 
Then, you can use this code by typing <kbd>C-u</kbd> and a number and then
typing <kbd>M-x multiply-by-seven</kbd> and pressing &lt;RET&gt;.  The phrase
<code>The result is <small>...</small></code> followed by the product will appear in the
echo area.

<p>Speaking more generally, you invoke a function like this in either of two
ways:

<ol type=1 start=1>
</p><li>By typing a prefix argument that contains the number to be passed, and
then typing <kbd>M-x</kbd> and the name of the function, as with
<kbd>C-u 3 M-x forward-sentence</kbd>; or,

<li>By typing whatever key or keychord the function is bound to, as with
<kbd>C-u 3 M-e</kbd>.
</ol>

<p>Both the examples just mentioned work identically to move point forward
three sentences.  (Since <code>multiply-by-seven</code> is not bound to a key,
it could not be used as an example of key binding.)

<p>(See <a href="#Keybindings">Some Keybindings</a>, to learn how to bind a command
to a key.)

<p>A prefix argument is passed to an interactive function by typing the
&lt;META&gt; key followed by a number, for example, <kbd>M-3 M-e</kbd>, or by
typing <kbd>C-u</kbd> and then a number, for example, <kbd>C-u 3 M-e</kbd> (if you
type <kbd>C-u</kbd> without a number, it defaults to 4).

<p><hr>
Node:<a name="multiply-by-seven%20in%20detail">multiply-by-seven in detail</a>,
Previous:<a rel=previous href="#Interactive%20multiply-by-seven">Interactive multiply-by-seven</a>,
Up:<a rel=up href="#Interactive">Interactive</a>
<br>

<h3>3.3.1 An Interactive <code>multiply-by-seven</code></h3>

<p>Let's look at the use of the special form <code>interactive</code> and then at
the function <code>message</code> in the interactive version of
<code>multiply-by-seven</code>.  You will recall that the function definition
looks like this:

<pre>(defun multiply-by-seven (number)       ; Interactive version.
  "Multiply NUMBER by seven."
  (interactive "p")
  (message "The result is %d" (* 7 number)))
</pre>

<p>In this function, the expression, <code>(interactive "p")</code>, is a list of
two elements.  The <code>"p"</code> tells Emacs to pass the prefix argument to
the function and use its value for the argument of the function.

<p>The argument will be a number.  This means that the symbol
<code>number</code> will be bound to a number in the line:

<pre>(message "The result is %d" (* 7 number))
</pre>

<p>For example, if your prefix argument is 5, the Lisp interpreter will
evaluate the line as if it were:

<pre>(message "The result is %d" (* 7 5))
</pre>

<p>(If you are reading this in GNU Emacs, you can evaluate this expression
yourself.)  First, the interpreter will evaluate the inner list, which
is <code>(* 7 5)</code>.  This returns a value of 35.  Next, it
will evaluate the outer list, passing the values of the second and
subsequent elements of the list to the function <code>message</code>.

<p>As we have seen, <code>message</code> is an Emacs Lisp function especially
designed for sending a one line message to a user.  (See <a href="#message">The <code>message</code> function</a>.) 
In summary, the <code>message</code> function prints its first argument in the
echo area as is, except for occurrences of <code>%d</code>, <code>%s</code>, or
<code>%c</code>.  When it sees one of these control sequences, the function
looks to the second and subsequent arguments and prints the value of the
argument in the location in the string where the control sequence is
located.

<p>In the interactive <code>multiply-by-seven</code> function, the control string
is <code>%d</code>, which requires a number, and the value returned by
evaluating <code>(* 7 5)</code> is the number 35.  Consequently, the number 35
is printed in place of the <code>%d</code> and the message is <code>The result
is 35</code>.

<p>(Note that when you call the function <code>multiply-by-seven</code>, the
message is printed without quotes, but when you call <code>message</code>, the
text is printed in double quotes.  This is because the value returned by
<code>message</code> is what appears in the echo area when you evaluate an
expression whose first element is <code>message</code>; but when embedded in a
function, <code>message</code> prints the text as a side effect without
quotes.)

<p><hr>
Node:<a name="Interactive%20Options">Interactive Options</a>,
Next:<a rel=next href="#Permanent%20Installation">Permanent Installation</a>,
Previous:<a rel=previous href="#Interactive">Interactive</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.4 Different Options for <code>interactive</code></h2>

<p>In the example, <code>multiply-by-seven</code> used <code>"p"</code> as the
argument to <code>interactive</code>.  This argument told Emacs to interpret
your typing either <kbd>C-u</kbd> followed by a number or &lt;META&gt;
followed by a number as a command to pass that number to the function
as its argument.  Emacs has more than twenty characters predefined for
use with <code>interactive</code>.  In almost every case, one of these
options will enable you to pass the right information interactively to
a function.  (See <a href="elisp.html#Code%20Characters%20for%20%3ccode%3einteractive%3c%2fcode%3e">Interactive Codes</a>.)

<p>For example, the character <code>r</code> causes Emacs to pass the beginning
and end of the region (the current values of point and mark) to the
function as two separate arguments.  It is used as follows:

<pre>(interactive "r")
</pre>

<p>On the other hand, a <code>B</code> tells Emacs to ask for the name of a
buffer that will be passed to the function.  When it sees a <code>B</code>,
Emacs will ask for the name by prompting the user in the minibuffer,
using a string that follows the <code>B</code>, as in <code>"BAppend to
buffer: "</code>.  Not only will Emacs prompt for the name, but Emacs will
complete the name if you type enough of it and press &lt;TAB&gt;.

<p>A function with two or more arguments can have information passed to
each argument by adding parts to the string that follows
<code>interactive</code>.  When you do this, the information is passed to
each argument in the same order it is specified in the
<code>interactive</code> list.  In the string, each part is separated from
the next part by a <code>\n</code>, which is a newline.  For example, you
could follow <code>"BAppend to buffer: "</code> with a <code>\n</code>) and an
<code>r</code>.  This would cause Emacs to pass the values of point and mark
to the function as well as prompt you for the buffer--three arguments
in all.

<p>In this case, the function definition would look like the following,
where <code>buffer</code>, <code>start</code>, and <code>end</code> are the symbols to
which <code>interactive</code> binds the buffer and the current values of the
beginning and ending of the region:

<pre>(defun <var>name-of-function</var> (buffer start end)
  "<var>documentation</var><small>...</small>"
  (interactive "BAppend to buffer: \nr")
  <var>body-of-function</var><small>...</small>)
</pre>

<p>(The space after the colon in the prompt makes it look better when you
are prompted.  The <code>append-to-buffer</code> function looks exactly like
this.  See <a href="#append-to-buffer">The Definition of <code>append-to-buffer</code></a>.)

<p>If a function does not have arguments, then <code>interactive</code> does not
require any.  Such a function contains the simple expression
<code>(interactive)</code>.  The <code>mark-whole-buffer</code> function is like
this.

<p>Alternatively, if the special letter-codes are not right for your
application, you can pass your own arguments to <code>interactive</code> as
a list.  See <a href="elisp.html#Using%20%3ccode%3eInteractive%3c%2fcode%3e">interactive</a>, for more information about this advanced
technique.

<p><hr>
Node:<a name="Permanent%20Installation">Permanent Installation</a>,
Next:<a rel=next href="#let">let</a>,
Previous:<a rel=previous href="#Interactive%20Options">Interactive Options</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.5 Install Code Permanently</h2>

<p>When you install a function definition by evaluating it, it will stay
installed until you quit Emacs.  The next time you start a new session
of Emacs, the function will not be installed unless you evaluate the
function definition again.

<p>At some point, you may want to have code installed automatically
whenever you start a new session of Emacs.  There are several ways of
doing this:

<ul>
<li>If you have code that is just for yourself, you can put the code for the
function definition in your <code>.emacs</code> initialization file.  When you
start Emacs, your <code>.emacs</code> file is automatically evaluated and all
the function definitions within it are installed. 
See <a href="#Emacs%20Initialization">Your <code>.emacs</code> File</a>.

<li>Alternatively, you can put the function definitions that you want
installed in one or more files of their own and use the <code>load</code>
function to cause Emacs to evaluate and thereby install each of the
functions in the files. 
See <a href="#Loading%20Files">Loading Files</a>.

<li>On the other hand, if you have code that your whole site will use, it
is usual to put it in a file called <code>site-init.el</code> that is loaded
when Emacs is built.  This makes the code available to everyone who
uses your machine.  (See the <code>INSTALL</code> file that is part of the
Emacs distribution.) 
</ul>

<p>Finally, if you have code that everyone who uses Emacs may want, you
can post it on a computer network or send a copy to the Free Software
Foundation.  (When you do this, please license the code and its
documentation under a license that permits other people to run, copy,
study, modify, and redistribute the code and which protects you from
having your work taken from you.)  If you send a copy of your code to
the Free Software Foundation, and properly protect yourself and
others, it may be included in the next release of Emacs.  In large
part, this is how Emacs has grown over the past years, by donations.

<p><hr>
Node:<a name="let">let</a>,
Next:<a rel=next href="#if">if</a>,
Previous:<a rel=previous href="#Permanent%20Installation">Permanent Installation</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.6 <code>let</code></h2>

<p>The <code>let</code> expression is a special form in Lisp that you will need
to use in most function definitions.

<p><code>let</code> is used to attach or bind a symbol to a value in such a way
that the Lisp interpreter will not confuse the variable with a
variable of the same name that is not part of the function.

<p>To understand why the <code>let</code> special form is necessary, consider
the situation in which you own a home that you generally refer to as
`the house', as in the sentence, "The house needs painting."  If you
are visiting a friend and your host refers to `the house', he is
likely to be referring to <em>his</em> house, not yours, that is, to a
different house.

<p>If your friend is referring to his house and you think he is referring
to your house, you may be in for some confusion.  The same thing could
happen in Lisp if a variable that is used inside of one function has
the same name as a variable that is used inside of another function,
and the two are not intended to refer to the same value.  The
<code>let</code> special form prevents this kind of confusion.

<ul>
<li><a href="#Prevent%20confusion">Prevent confusion</a>: 
<li><a href="#Parts%20of%20let%20Expression">Parts of let Expression</a>: 
<li><a href="#Sample%20let%20Expression">Sample let Expression</a>: 
<li><a href="#Uninitialized%20let%20Variables">Uninitialized let Variables</a>: 
</ul>

<p><hr>
Node:<a name="Prevent%20confusion">Prevent confusion</a>,
Next:<a rel=next href="#Parts%20of%20let%20Expression">Parts of let Expression</a>,
Previous:<a rel=previous href="#let">let</a>,
Up:<a rel=up href="#let">let</a>
<br>

<h3><code>let</code> Prevents Confusion</h3>

<p>The <code>let</code> special form prevents confusion.  <code>let</code> creates a
name for a <dfn>local variable</dfn> that overshadows any use of the same
name outside the <code>let</code> expression.  This is like understanding
that whenever your host refers to `the house', he means his house, not
yours.  (Symbols used in argument lists work the same way. 
See <a href="#defun">The <code>defun</code> Special Form</a>.)

<p>Local variables created by a <code>let</code> expression retain their value
<em>only</em> within the <code>let</code> expression itself (and within
expressions called within the <code>let</code> expression); the local
variables have no effect outside the <code>let</code> expression.

<p>Another way to think about <code>let</code> is that it is like a <code>setq</code>
that is temporary and local.  The values set by <code>let</code> are
automatically undone when the <code>let</code> is finished.  The setting
only effects expressions that are inside the bounds of the <code>let</code>
expression.  In computer science jargon, we would say "the binding of
a symbol is visible only in functions called in the <code>let</code> form;
in Emacs Lisp, scoping is dynamic, not lexical."

<p><code>let</code> can create more than one variable at once.  Also,
<code>let</code> gives each variable it creates an initial value, either a
value specified by you, or <code>nil</code>.  (In the jargon, this is called
`binding the variable to the value'.)  After <code>let</code> has created
and bound the variables, it executes the code in the body of the
<code>let</code>, and returns the value of the last expression in the body,
as the value of the whole <code>let</code> expression.  (`Execute' is a jargon
term that means to evaluate a list; it comes from the use of the word
meaning `to give practical effect to' (<cite>Oxford English
Dictionary</cite>).  Since you evaluate an expression to perform an action,
`execute' has evolved as a synonym to `evaluate'.)

<p><hr>
Node:<a name="Parts%20of%20let%20Expression">Parts of let Expression</a>,
Next:<a rel=next href="#Sample%20let%20Expression">Sample let Expression</a>,
Previous:<a rel=previous href="#Prevent%20confusion">Prevent confusion</a>,
Up:<a rel=up href="#let">let</a>
<br>

<h3>3.6.1 The Parts of a <code>let</code> Expression</h3>

<p>A <code>let</code> expression is a list of three parts.  The first part is
the symbol <code>let</code>.  The second part is a list, called a
<dfn>varlist</dfn>, each element of which is either a symbol by itself or a
two-element list, the first element of which is a symbol.  The third
part of the <code>let</code> expression is the body of the <code>let</code>.  The
body usually consists of one or more lists.

<p>A template for a <code>let</code> expression looks like this:

<pre>(let <var>varlist</var> <var>body</var><small>...</small>)
</pre>

<p>The symbols in the varlist are the variables that are given initial
values by the <code>let</code> special form.  Symbols by themselves are given
the initial value of <code>nil</code>; and each symbol that is the first
element of a two-element list is bound to the value that is returned
when the Lisp interpreter evaluates the second element.

<p>Thus, a varlist might look like this: <code>(thread (needles 3))</code>.  In
this case, in a <code>let</code> expression, Emacs binds the symbol
<code>thread</code> to an initial value of <code>nil</code>, and binds the symbol
<code>needles</code> to an initial value of 3.

<p>When you write a <code>let</code> expression, what you do is put the
appropriate expressions in the slots of the <code>let</code> expression
template.

<p>If the varlist is composed of two-element lists, as is often the case,
the template for the <code>let</code> expression looks like this:

<pre>(let ((<var>variable</var> <var>value</var>)
      (<var>variable</var> <var>value</var>)
      <small>...</small>)
  <var>body</var><small>...</small>)
</pre>

<p><hr>
Node:<a name="Sample%20let%20Expression">Sample let Expression</a>,
Next:<a rel=next href="#Uninitialized%20let%20Variables">Uninitialized let Variables</a>,
Previous:<a rel=previous href="#Parts%20of%20let%20Expression">Parts of let Expression</a>,
Up:<a rel=up href="#let">let</a>
<br>

<h3>3.6.2 Sample <code>let</code> Expression</h3>

<p>The following expression creates and gives initial values
to the two variables <code>zebra</code> and <code>tiger</code>.  The body of the
<code>let</code> expression is a list which calls the <code>message</code> function.

<pre>(let ((zebra 'stripes)
      (tiger 'fierce))
  (message "One kind of animal has %s and another is %s."
           zebra tiger))
</pre>

<p>Here, the varlist is <code>((zebra 'stripes) (tiger 'fierce))</code>.

<p>The two variables are <code>zebra</code> and <code>tiger</code>.  Each variable is
the first element of a two-element list and each value is the second
element of its two-element list.  In the varlist, Emacs binds the
variable <code>zebra</code> to the value <code>stripes</code>, and binds the
variable <code>tiger</code> to the value <code>fierce</code>.  In this example,
both values are symbols preceded by a quote.  The values could just as
well have been another list or a string.  The body of the <code>let</code>
follows after the list holding the variables.  In this example, the body
is a list that uses the <code>message</code> function to print a string in
the echo area.

<p>You may evaluate the example in the usual fashion, by placing the
cursor after the last parenthesis and typing <kbd>C-x C-e</kbd>.  When you do
this, the following will appear in the echo area:

<pre>"One kind of animal has stripes and another is fierce."
</pre>

<p>As we have seen before, the <code>message</code> function prints its first
argument, except for <code>%s</code>.  In this example, the value of the variable
<code>zebra</code> is printed at the location of the first <code>%s</code> and the
value of the variable <code>tiger</code> is printed at the location of the
second <code>%s</code>.

<p><hr>
Node:<a name="Uninitialized%20let%20Variables">Uninitialized let Variables</a>,
Previous:<a rel=previous href="#Sample%20let%20Expression">Sample let Expression</a>,
Up:<a rel=up href="#let">let</a>
<br>

<h3>3.6.3 Uninitialized Variables in a <code>let</code> Statement</h3>

<p>If you do not bind the variables in a <code>let</code> statement to specific
initial values, they will automatically be bound to an initial value of
<code>nil</code>, as in the following expression:

<pre>(let ((birch 3)
      pine
      fir
      (oak 'some))
  (message
   "Here are %d variables with %s, %s, and %s value."
   birch pine fir oak))
</pre>

<p>Here, the varlist is <code>((birch 3) pine fir (oak 'some))</code>.

<p>If you evaluate this expression in the usual way, the following will
appear in your echo area:

<pre>"Here are 3 variables with nil, nil, and some value."
</pre>

<p>In this example, Emacs binds the symbol <code>birch</code> to the number 3,
binds the symbols <code>pine</code> and <code>fir</code> to <code>nil</code>, and binds
the symbol <code>oak</code> to the value <code>some</code>.

<p>Note that in the first part of the <code>let</code>, the variables <code>pine</code>
and <code>fir</code> stand alone as atoms that are not surrounded by
parentheses; this is because they are being bound to <code>nil</code>, the
empty list.  But <code>oak</code> is bound to <code>some</code> and so is a part of
the list <code>(oak 'some)</code>.  Similarly, <code>birch</code> is bound to the
number 3 and so is in a list with that number.  (Since a number
evaluates to itself, the number does not need to be quoted.  Also, the
number is printed in the message using a <code>%d</code> rather than a
<code>%s</code>.)  The four variables as a group are put into a list to
delimit them from the body of the <code>let</code>.

<p><hr>
Node:<a name="if">if</a>,
Next:<a rel=next href="#else">else</a>,
Previous:<a rel=previous href="#let">let</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.7 The <code>if</code> Special Form</h2>

<p>A third special form, in addition to <code>defun</code> and <code>let</code>, is the
conditional <code>if</code>.  This form is used to instruct the computer to
make decisions.  You can write function definitions without using
<code>if</code>, but it is used often enough, and is important enough, to be
included here.  It is used, for example, in the code for the
function <code>beginning-of-buffer</code>.

<p>The basic idea behind an <code>if</code>, is that "<em>if</em> a test is true,
<em>then</em> an expression is evaluated."  If the test is not true, the
expression is not evaluated.  For example, you might make a decision
such as, "if it is warm and sunny, then go to the beach!"

<ul>
<li><a href="#if%20in%20more%20detail">if in more detail</a>: 
<li><a href="#type-of-animal%20in%20detail">type-of-animal in detail</a>:     An example of an <code>if</code> expression. 
</ul>

<p><hr>
Node:<a name="if%20in%20more%20detail">if in more detail</a>,
Next:<a rel=next href="#type-of-animal%20in%20detail">type-of-animal in detail</a>,
Previous:<a rel=previous href="#if">if</a>,
Up:<a rel=up href="#if">if</a>
<br>

<h3><code>if</code> in more detail</h3>

<p>An <code>if</code> expression written in Lisp does not use the word `then';
the test and the action are the second and third elements of the list
whose first element is <code>if</code>.  Nonetheless, the test part of an
<code>if</code> expression is often called the <dfn>if-part</dfn> and the second
argument is often called the <dfn>then-part</dfn>.

<p>Also, when an <code>if</code> expression is written, the true-or-false-test
is usually written on the same line as the symbol <code>if</code>, but the
action to carry out if the test is true, the "then-part", is written
on the second and subsequent lines.  This makes the <code>if</code>
expression easier to read.

<pre>(if <var>true-or-false-test</var>
    <var>action-to-carry-out-if-test-is-true</var>)
</pre>

<p>The true-or-false-test will be an expression that
is evaluated by the Lisp interpreter.

<p>Here is an example that you can evaluate in the usual manner.  The test
is whether the number 5 is greater than the number 4.  Since it is, the
message <code>5 is greater than 4!</code> will be printed.

<pre>(if (&gt; 5 4)                             ; if-part
    (message "5 is greater than 4!"))   ; then-part
</pre>

<p>(The function <code>&gt;</code> tests whether its first argument is greater than
its second argument and returns true if it is.)

<p>Of course, in actual use, the test in an <code>if</code> expression will not
be fixed for all time as it is by the expression <code>(&gt; 5 4)</code>. 
Instead, at least one of the variables used in the test will be bound to
a value that is not known ahead of time.  (If the value were known ahead
of time, we would not need to run the test!)

<p>For example, the value may be bound to an argument of a function
definition.  In the following function definition, the character of the
animal is a value that is passed to the function.  If the value bound to
<code>characteristic</code> is <code>fierce</code>, then the message, <code>It's a
tiger!</code> will be printed; otherwise, <code>nil</code> will be returned.

<pre>(defun type-of-animal (characteristic)
  "Print message in echo area depending on CHARACTERISTIC.
If the CHARACTERISTIC is the symbol `fierce',
then warn of a tiger."
  (if (equal characteristic 'fierce)
      (message "It's a tiger!")))
</pre>

<p>If you are reading this inside of GNU Emacs, you can evaluate the
function definition in the usual way to install it in Emacs, and then you
can evaluate the following two expressions to see the results:

<pre>(type-of-animal 'fierce)

(type-of-animal 'zebra)
</pre>

<p>When you evaluate <code>(type-of-animal 'fierce)</code>, you will see the
following message printed in the echo area: <code>"It's a tiger!"</code>; and
when you evaluate <code>(type-of-animal 'zebra)</code> you will see <code>nil</code>
printed in the echo area.

<p><hr>
Node:<a name="type-of-animal%20in%20detail">type-of-animal in detail</a>,
Previous:<a rel=previous href="#if%20in%20more%20detail">if in more detail</a>,
Up:<a rel=up href="#if">if</a>
<br>

<h3>3.7.1 The <code>type-of-animal</code> Function in Detail</h3>

<p>Let's look at the <code>type-of-animal</code> function in detail.

<p>The function definition for <code>type-of-animal</code> was written by filling
the slots of two templates, one for a function definition as a whole, and
a second for an <code>if</code> expression.

<p>The template for every function that is not interactive is:

<pre>(defun <var>name-of-function</var> (<var>argument-list</var>)
  "<var>documentation</var><small>...</small>"
  <var>body</var><small>...</small>)
</pre>

<p>The parts of the function that match this template look like this:

<pre>(defun type-of-animal (characteristic)
  "Print message in echo area depending on CHARACTERISTIC.
If the CHARACTERISTIC is the symbol `fierce',
then warn of a tiger."
  <var>body: the</var> <code>if</code> <var>expression</var>)
</pre>

<p>The name of function is <code>type-of-animal</code>; it is passed the value
of one argument.  The argument list is followed by a multi-line
documentation string.  The documentation string is included in the
example because it is a good habit to write documentation string for
every function definition.  The body of the function definition
consists of the <code>if</code> expression.

<p>The template for an <code>if</code> expression looks like this:

<pre>(if <var>true-or-false-test</var>
    <var>action-to-carry-out-if-the-test-returns-true</var>)
</pre>

<p>In the <code>type-of-animal</code> function, the code for the <code>if</code>
looks like this:

<pre>(if (equal characteristic 'fierce)
    (message "It's a tiger!")))
</pre>

<p>Here, the true-or-false-test is the expression:

<pre>(equal characteristic 'fierce)
</pre>

<p>In Lisp, <code>equal</code> is a function that determines whether its first
argument is equal to its second argument.  The second argument is the
quoted symbol <code>'fierce</code> and the first argument is the value of the
symbol <code>characteristic</code>--in other words, the argument passed to
this function.

<p>In the first exercise of <code>type-of-animal</code>, the argument
<code>fierce</code> is passed to <code>type-of-animal</code>.  Since <code>fierce</code>
is equal to <code>fierce</code>, the expression, <code>(equal characteristic
'fierce)</code>, returns a value of true.  When this happens, the <code>if</code>
evaluates the second argument or then-part of the <code>if</code>:
<code>(message "It's tiger!")</code>.

<p>On the other hand, in the second exercise of <code>type-of-animal</code>, the
argument <code>zebra</code> is passed to <code>type-of-animal</code>.  <code>zebra</code>
is not equal to <code>fierce</code>, so the then-part is not evaluated and
<code>nil</code> is returned by the <code>if</code> expression.

<p><hr>
Node:<a name="else">else</a>,
Next:<a rel=next href="#Truth%20&amp;%20Falsehood">Truth & Falsehood</a>,
Previous:<a rel=previous href="#if">if</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.8 If-then-else Expressions</h2>

<p>An <code>if</code> expression may have an optional third argument, called
the <dfn>else-part</dfn>, for the case when the true-or-false-test returns
false.  When this happens, the second argument or then-part of the
overall <code>if</code> expression is <em>not</em> evaluated, but the third or
else-part <em>is</em> evaluated.  You might think of this as the cloudy
day alternative for the decision `if it is warm and sunny, then go to
the beach, else read a book!".

<p>The word "else" is not written in the Lisp code; the else-part of an
<code>if</code> expression comes after the then-part.  In the written Lisp, the
else-part is usually written to start on a line of its own and is
indented less than the then-part:

<pre>(if <var>true-or-false-test</var>
    <var>action-to-carry-out-if-the-test-returns-true</var>
  <var>action-to-carry-out-if-the-test-returns-false</var>)
</pre>

<p>For example, the following <code>if</code> expression prints the message <code>4
is not greater than 5!</code> when you evaluate it in the usual way:

<pre>(if (&gt; 4 5)                             ; if-part
    (message "5 is greater than 4!")    ; then-part
  (message "4 is not greater than 5!")) ; else-part
</pre>

<p>Note that the different levels of indentation make it easy to
distinguish the then-part from the else-part.  (GNU Emacs has several
commands that automatically indent <code>if</code> expressions correctly. 
See <a href="#Typing%20Lists">GNU Emacs Helps You Type Lists</a>.)

<p>We can extend the <code>type-of-animal</code> function to include an
else-part by simply incorporating an additional part to the <code>if</code>
expression.

<p>You can see the consequences of doing this if you evaluate the following
version of the <code>type-of-animal</code> function definition to install it
and then evaluate the two subsequent expressions to pass different
arguments to the function.

<pre>(defun type-of-animal (characteristic)  ; Second version.
  "Print message in echo area depending on CHARACTERISTIC.
If the CHARACTERISTIC is the symbol `fierce',
then warn of a tiger;
else say it's not fierce."
  (if (equal characteristic 'fierce)
      (message "It's a tiger!")
    (message "It's not fierce!")))
</pre>


<br><p>
<pre>(type-of-animal 'fierce)

(type-of-animal 'zebra)
</pre>

<p>When you evaluate <code>(type-of-animal 'fierce)</code>, you will see the
following message printed in the echo area: <code>"It's a tiger!"</code>; but
when you evaluate <code>(type-of-animal 'zebra)</code>, you will see
<code>"It's not fierce!"</code>.

<p>(Of course, if the <var>characteristic</var> were <code>ferocious</code>, the
message <code>"It's not fierce!"</code> would be printed; and it would be
misleading!  When you write code, you need to take into account the
possibility that some such argument will be tested by the <code>if</code> and
write your program accordingly.)

<p><hr>
Node:<a name="Truth%20&amp;%20Falsehood">Truth & Falsehood</a>,
Next:<a rel=next href="#save-excursion">save-excursion</a>,
Previous:<a rel=previous href="#else">else</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.9 Truth and Falsehood in Emacs Lisp</h2>

<p>There is an important aspect to the truth test in an <code>if</code>
expression.  So far, we have spoken of `true' and `false' as values of
predicates as if they were new kinds of Emacs Lisp objects.  In fact,
`false' is just our old friend <code>nil</code>.  Anything else--anything
at all--is `true'.

<p>The expression that tests for truth is interpreted as <dfn>true</dfn>
if the result of evaluating it is a value that is not <code>nil</code>.  In
other words, the result of the test is considered true if the value
returned is a number such as 47, a string such as <code>"hello"</code>, or a
symbol (other than <code>nil</code>) such as <code>flowers</code>, or a list, or
even a buffer!

<ul>
<li><a href="#nil%20explained">nil explained</a>:                <code>nil</code> has two meanings. 
</ul>

<p><hr>
Node:<a name="nil%20explained">nil explained</a>,
Previous:<a rel=previous href="#Truth%20&amp;%20Falsehood">Truth & Falsehood</a>,
Up:<a rel=up href="#Truth%20&amp;%20Falsehood">Truth & Falsehood</a>
<br>

<h3>An explanation of <code>nil</code></h3>

<p>Before illustrating a test for truth, we need an explanation of <code>nil</code>.

<p>In Emacs Lisp, the symbol <code>nil</code> has two meanings.  First, it means the
empty list.  Second, it means false and is the value returned when a
true-or-false-test tests false.  <code>nil</code> can be written as an empty
list, <code>()</code>, or as <code>nil</code>.  As far as the Lisp interpreter is
concerned, <code>()</code> and <code>nil</code> are the same.  Humans, however, tend
to use <code>nil</code> for false and <code>()</code> for the empty list.

<p>In Emacs Lisp, any value that is not <code>nil</code>--is not the empty
list--is considered true.  This means that if an evaluation returns
something that is not an empty list, an <code>if</code> expression will test
true.  For example, if a number is put in the slot for the test, it
will be evaluated and will return itself, since that is what numbers
do when evaluated.  In this conditional, the <code>if</code> expression will
test true.  The expression tests false only when <code>nil</code>, an empty
list, is returned by evaluating the expression.

<p>You can see this by evaluating the two expressions in the following examples.

<p>In the first example, the number 4 is evaluated as the test in the
<code>if</code> expression and returns itself; consequently, the then-part
of the expression is evaluated and returned: <code>true</code> appears in
the echo area.  In the second example, the <code>nil</code> indicates false;
consequently, the else-part of the expression is evaluated and
returned: <code>false</code> appears in the echo area.

<pre>(if 4
    'true
  'false)

(if nil
    'true
  'false)
</pre>

<p>Incidentally, if some other useful value is not available for a test that
returns true, then the Lisp interpreter will return the symbol <code>t</code>
for true.  For example, the expression <code>(&gt; 5 4)</code> returns <code>t</code>
when evaluated, as you can see by evaluating it in the usual way:

<pre>(&gt; 5 4)
</pre>

<p>On the other hand, this function returns <code>nil</code> if the test is false.

<pre>(&gt; 4 5)
</pre>

<p><hr>
Node:<a name="save-excursion">save-excursion</a>,
Next:<a rel=next href="#Review">Review</a>,
Previous:<a rel=previous href="#Truth%20&amp;%20Falsehood">Truth & Falsehood</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.10 <code>save-excursion</code></h2>

<p>The <code>save-excursion</code> function is the fourth and final special form
that we will discuss in this chapter.

<p>In Emacs Lisp programs used for editing, the <code>save-excursion</code>
function is very common.  It saves the location of point and mark,
executes the body of the function, and then restores point and mark to
their previous positions if their locations were changed.  Its primary
purpose is to keep the user from being surprised and disturbed by
unexpected movement of point or mark.

<ul>
<li><a href="#Point%20and%20mark">Point and mark</a>:               A review of various locations. 
<li><a href="#Template%20for%20save-excursion">Template for save-excursion</a>: 
</ul>

<p><hr>
Node:<a name="Point%20and%20mark">Point and mark</a>,
Next:<a rel=next href="#Template%20for%20save-excursion">Template for save-excursion</a>,
Previous:<a rel=previous href="#save-excursion">save-excursion</a>,
Up:<a rel=up href="#save-excursion">save-excursion</a>
<br>

<h3>Point and Mark</h3>

<p>Before discussing <code>save-excursion</code>, however, it may be useful
first to review what point and mark are in GNU Emacs.  <dfn>Point</dfn> is
the current location of the cursor.  Wherever the cursor
is, that is point.  More precisely, on terminals where the cursor
appears to be on top of a character, point is immediately before the
character.  In Emacs Lisp, point is an integer.  The first character in
a buffer is number one, the second is number two, and so on.  The
function <code>point</code> returns the current position of the cursor as a
number.  Each buffer has its own value for point.

<p>The <dfn>mark</dfn> is another position in the buffer; its value can be set
with a command such as <kbd>C-&lt;SPC&gt;</kbd> (<code>set-mark-command</code>).  If
a mark has been set, you can use the command <kbd>C-x C-x</kbd>
(<code>exchange-point-and-mark</code>) to cause the cursor to jump to the mark
and set the mark to be the previous position of point.  In addition, if
you set another mark, the position of the previous mark is saved in the
mark ring.  Many mark positions can be saved this way.  You can jump the
cursor to a saved mark by typing <kbd>C-u C-&lt;SPC&gt;</kbd> one or more
times.

<p>The part of the buffer between point and mark is called <dfn>the
region</dfn>.  Numerous commands work on the region, including
<code>center-region</code>, <code>count-lines-region</code>, <code>kill-region</code>, and
<code>print-region</code>.

<p>The <code>save-excursion</code> special form saves the locations of point and
mark and restores those positions after the code within the body of the
special form is evaluated by the Lisp interpreter.  Thus, if point were
in the beginning of a piece of text and some code moved point to the end
of the buffer, the <code>save-excursion</code> would put point back to where
it was before, after the expressions in the body of the function were
evaluated.

<p>In Emacs, a function frequently moves point as part of its internal
workings even though a user would not expect this.  For example,
<code>count-lines-region</code> moves point.  To prevent the user from being
bothered by jumps that are both unexpected and (from the user's point of
view) unnecessary, <code>save-excursion</code> is often used to keep point and
mark in the location expected by the user.  The use of
<code>save-excursion</code> is good housekeeping.

<p>To make sure the house stays clean, <code>save-excursion</code> restores the
values of point and mark even if something goes wrong in the code inside
of it (or, to be more precise and to use the proper jargon, "in case of
abnormal exit").  This feature is very helpful.

<p>In addition to recording the values of point and mark,
<code>save-excursion</code> keeps track of the current buffer, and restores
it, too.  This means you can write code that will change the buffer and
have <code>save-excursion</code> switch you back to the original buffer.  This
is how <code>save-excursion</code> is used in <code>append-to-buffer</code>. 
(See <a href="#append-to-buffer">The Definition of <code>append-to-buffer</code></a>.)

<p><hr>
Node:<a name="Template%20for%20save-excursion">Template for save-excursion</a>,
Previous:<a rel=previous href="#Point%20and%20mark">Point and mark</a>,
Up:<a rel=up href="#save-excursion">save-excursion</a>
<br>

<h3>3.10.1 Template for a <code>save-excursion</code> Expression</h3>

<p>The template for code using <code>save-excursion</code> is simple:

<pre>(save-excursion
  <var>body</var><small>...</small>)
</pre>

<p>The body of the function is one or more expressions that will be
evaluated in sequence by the Lisp interpreter.  If there is more than
one expression in the body, the value of the last one will be returned
as the value of the <code>save-excursion</code> function.  The other
expressions in the body are evaluated only for their side effects; and
<code>save-excursion</code> itself is used only for its side effect (which
is restoring the positions of point and mark).

<p>In more detail, the template for a <code>save-excursion</code> expression
looks like this:

<pre>(save-excursion
  <var>first-expression-in-body</var>
  <var>second-expression-in-body</var>
  <var>third-expression-in-body</var>
   <small>...</small>
  <var>last-expression-in-body</var>)
</pre>

<p>An expression, of course, may be a symbol on its own or a list.

<p>In Emacs Lisp code, a <code>save-excursion</code> expression often occurs
within the body of a <code>let</code> expression.  It looks like this:

<pre>(let <var>varlist</var>
  (save-excursion
    <var>body</var><small>...</small>))
</pre>

<p><hr>
Node:<a name="Review">Review</a>,
Next:<a rel=next href="#defun%20Exercises">defun Exercises</a>,
Previous:<a rel=previous href="#save-excursion">save-excursion</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.11 Review</h2>

<p>In the last few chapters we have introduced a fair number of functions
and special forms.  Here they are described in brief, along with a few
similar functions that have not been mentioned yet.

<dl>
<dt><code>eval-last-sexp</code>
<dd>Evaluate the last symbolic expression before the current location of
point.  The value is printed in the echo area unless the function is
invoked with an argument; in that case, the output is printed in the
current buffer.  This command is normally bound to <kbd>C-x C-e</kbd>.

<br><dt><code>defun</code>
<dd>Define function.  This special form has up to five parts: the name,
a template for the arguments that will be passed to the function,
documentation, an optional interactive declaration, and the body of the
definition.

<p>For example:

<pre>(defun back-to-indentation ()
  "Move point to first visible character on line."
  (interactive)
  (beginning-of-line 1)
  (skip-chars-forward " \t"))
</pre>

<br><dt><code>interactive</code>
<dd>Declare to the interpreter that the function can be used
interactively.  This special form may be followed by a string with one
or more parts that pass the information to the arguments of the
function, in sequence.  These parts may also tell the interpreter to
prompt for information.  Parts of the string are separated by
newlines, <code>\n</code>.

<p>Common code characters are:

<dl>
<dt><code>b</code>
<dd>The name of an existing buffer.

<br><dt><code>f</code>
<dd>The name of an existing file.

<br><dt><code>p</code>
<dd>The numeric prefix argument.  (Note that this `p' is lower case.)

<br><dt><code>r</code>
<dd>Point and the mark, as two numeric arguments, smallest first.  This
is the only code letter that specifies two successive arguments
rather than one. 
</dl>

<p>See <a href="elisp.html#Code%20Characters%20for%20%3ccode%3einteractive%3c%2fcode%3e">Interactive Codes</a>, for a complete list of
code characters.

<br><dt><code>let</code>
<dd>Declare that a list of variables is for use within the body of the
<code>let</code> and give them an initial value, either <code>nil</code> or a
specified value; then evaluate the rest of the expressions in the body
of the <code>let</code> and return the value of the last one.  Inside the
body of the <code>let</code>, the Lisp interpreter does not see the values of
the variables of the same names that are bound outside of the
<code>let</code>.

<p>For example,

<pre>(let ((foo (buffer-name))
      (bar (buffer-size)))
  (message
   "This buffer is %s and has %d characters."
   foo bar))
</pre>

<br><dt><code>save-excursion</code>
<dd>Record the values of point and mark and the current buffer before
evaluating the body of this special form.  Restore the values of point
and mark and buffer afterward.

<p>For example,

<pre>(message "We are %d characters into this buffer."
         (- (point)
            (save-excursion
              (goto-char (point-min)) (point))))
</pre>

<br><dt><code>if</code>
<dd>Evaluate the first argument to the function; if it is true, evaluate
the second argument; else evaluate the third argument, if there is one.

<p>The <code>if</code> special form is called a <dfn>conditional</dfn>.  There are
other conditionals in Emacs Lisp, but <code>if</code> is perhaps the most
commonly used.

<p>For example,

<pre>(if (string-equal
     (number-to-string 21)
     (substring (emacs-version) 10 12))
    (message "This is version 21 Emacs")
  (message "This is not version 21 Emacs"))
</pre>

<br><dt><code>equal</code>
<dt><code>eq</code>
<dd>Test whether two objects are the same.  <code>equal</code> uses one meaning
of the word `same' and <code>eq</code> uses another:  <code>equal</code> returns
true if the two objects have a similar structure and contents, such as
two copies of the same book.  On the other hand, <code>eq</code>, returns
true if both arguments are actually the same object.

<br><dt><code>&lt;</code>
<dt><code>&gt;</code>
<dt><code>&lt;=</code>
<dt><code>&gt;=</code>
<dd>The <code>&lt;</code> function tests whether its first argument is smaller than
its second argument.  A corresponding function, <code>&gt;</code>, tests whether
the first argument is greater than the second.  Likewise, <code>&lt;=</code>
tests whether the first argument is less than or equal to the second and
<code>&gt;=</code> tests whether the first argument is greater than or equal to
the second.  In all cases, both arguments must be numbers or markers
(markers indicate positions in buffers).

<br><dt><code>string&lt;</code>
<dt><code>string-lessp</code>
<dt><code>string=</code>
<dt><code>string-equal</code>
<dd>The <code>string-lessp</code> function tests whether its first argument is
smaller than the second argument.  A shorter, alternative name for the
same function (a <code>defalias</code>) is <code>string&lt;</code>.

<p>The arguments to <code>string-lessp</code> must be strings or symbols; the
ordering is lexicographic, so case is significant.  The print names of
symbols are used instead of the symbols themselves.

<p>An empty string, <code>""</code>, a string with no characters in it, is
smaller than any string of characters.

<p><code>string-equal</code> provides the corresponding test for equality.  Its
shorter, alternative name is <code>string=</code>.  There are no string test
functions that correspond to <var>&gt;</var>, <code>&gt;=</code>, or <code>&lt;=</code>.

<br><dt><code>message</code>
<dd>Print a message in the echo area. The first argument is a string that
can contain <code>%s</code>, <code>%d</code>, or <code>%c</code> to print the value of
arguments that follow the string.  The argument used by <code>%s</code> must
be a string or a symbol; the argument used by <code>%d</code> must be a
number.  The argument used by <code>%c</code> must be an ascii code number;
it will be printed as the character with that <small>ASCII</small> code.

<br><dt><code>setq</code>
<dt><code>set</code>
<dd>The <code>setq</code> function sets the value of its first argument to the
value of the second argument.  The first argument is automatically
quoted by <code>setq</code>.  It does the same for succeeding pairs of
arguments.  Another function, <code>set</code>, takes only two arguments and
evaluates both of them before setting the value returned by its first
argument to the value returned by its second argument.

<br><dt><code>buffer-name</code>
<dd>Without an argument, return the name of the buffer, as a string.

<dt><code>buffer-file-name</code>
<dd>Without an argument, return the name of the file the buffer is
visiting.

<br><dt><code>current-buffer</code>
<dd>Return the buffer in which Emacs is active; it may not be
the buffer that is visible on the screen.

<br><dt><code>other-buffer</code>
<dd>Return the most recently selected buffer (other than the buffer passed
to <code>other-buffer</code> as an argument and other than the current
buffer).

<br><dt><code>switch-to-buffer</code>
<dd>Select a buffer for Emacs to be active in and display it in the current
window so users can look at it.  Usually bound to <kbd>C-x b</kbd>.

<br><dt><code>set-buffer</code>
<dd>Switch Emacs' attention to a buffer on which programs will run.  Don't
alter what the window is showing.

<br><dt><code>buffer-size</code>
<dd>Return the number of characters in the current buffer.

<br><dt><code>point</code>
<dd>Return the value of the current position of the cursor, as an
integer counting the number of characters from the beginning of the
buffer.

<br><dt><code>point-min</code>
<dd>Return the minimum permissible value of point in
the current buffer.  This is 1, unless narrowing is in effect.

<br><dt><code>point-max</code>
<dd>Return the value of the maximum permissible value of point in the
current buffer.  This is the end of the buffer, unless narrowing is in
effect. 
</dl>

<p><hr>
Node:<a name="defun%20Exercises">defun Exercises</a>,
Previous:<a rel=previous href="#Review">Review</a>,
Up:<a rel=up href="#Writing%20Defuns">Writing Defuns</a>
<br>

<h2>3.12 Exercises</h2>

<ul>
<li>Write a non-interactive function that doubles the value of its
argument, a number.  Make that function interactive.

<li>Write a function that tests whether the current value of
<code>fill-column</code> is greater than the argument passed to the function,
and if so, prints an appropriate message. 
</ul>

<p><hr>
Node:<a name="Buffer%20Walk%20Through">Buffer Walk Through</a>,
Next:<a rel=next href="#More%20Complex">More Complex</a>,
Previous:<a rel=previous href="#Writing%20Defuns">Writing Defuns</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>4 A Few Buffer-Related Functions</h1>

<p>In this chapter we study in detail several of the functions used in GNU
Emacs.  This is called a "walk-through".  These functions are used as
examples of Lisp code, but are not imaginary examples; with the
exception of the first, simplified function definition, these functions
show the actual code used in GNU Emacs.  You can learn a great deal from
these definitions.  The functions described here are all related to
buffers.  Later, we will study other functions.

<ul>
<li><a href="#Finding%20More">Finding More</a>:                 How to find more information. 
<li><a href="#simplified-beginning-of-buffer">simplified-beginning-of-buffer</a>:   Shows <code>goto-char</code>,
                                <code>point-min</code>, and <code>push-mark</code>. 
<li><a href="#mark-whole-buffer">mark-whole-buffer</a>:            Almost the same as <code>beginning-of-buffer</code>. 
<li><a href="#append-to-buffer">append-to-buffer</a>:             Uses <code>save-excursion</code> and
                                <code>insert-buffer-substring</code>. 
<li><a href="#Buffer%20Related%20Review">Buffer Related Review</a>:        Review. 
<li><a href="#Buffer%20Exercises">Buffer Exercises</a>: 
</ul>

<p><hr>
Node:<a name="Finding%20More">Finding More</a>,
Next:<a rel=next href="#simplified-beginning-of-buffer">simplified-beginning-of-buffer</a>,
Previous:<a rel=previous href="#Buffer%20Walk%20Through">Buffer Walk Through</a>,
Up:<a rel=up href="#Buffer%20Walk%20Through">Buffer Walk Through</a>
<br>

<h2>4.1 Finding More Information</h2>

<p>In this walk-through, I will describe each new function as we come to
it, sometimes in detail and sometimes briefly.  If you are interested,
you can get the full documentation of any Emacs Lisp function at any
time by typing <kbd>C-h f</kbd> and then the name of the function (and then
&lt;RET&gt;).  Similarly, you can get the full documentation for a
variable by typing <kbd>C-h v</kbd> and then the name of the variable (and
then &lt;RET&gt;).

<p>In versions 20 and higher, when a function is written in Emacs Lisp,
<code>describe-function</code> will also tell you the location of the
function definition.  If you move point over the file name and press
the &lt;RET&gt; key, which is this case means <code>help-follow</code> rather
than `return' or `enter', Emacs will take you directly to the function
definition.

<p>More generally, if you want to see a function in its original source
file, you can use the <code>find-tags</code> function to jump to it. 
<code>find-tags</code> works with a wide variety of languages, not just
Lisp, and C, and it works with non-programming text as well.  For
example, <code>find-tags</code> will jump to the various nodes in the
Texinfo source file of this document.

<p>The <code>find-tags</code> function depends on `tags tables' that record
the locations of the functions, variables, and other items to which
<code>find-tags</code> jumps.

<p>To use the <code>find-tags</code> command, type <kbd>M-.</kbd>  (i.e., type the
&lt;META&gt; key and the period key at the same time, or else type the
&lt;ESC&gt; key and then type the period key), and then, at the prompt,
type in the name of the function whose source code you want to see,
such as <code>mark-whole-buffer</code>, and then type &lt;RET&gt;.  Emacs will
switch buffers and display the source code for the function on your
screen.  To switch back to your current buffer, type <kbd>C-x b
&lt;RET&gt;</kbd>.  (On some keyboards, the &lt;META&gt; key is labelled
&lt;ALT&gt;.)

<p>Depending on how the initial default values of your copy of Emacs are
set, you may also need to specify the location of your `tags table',
which is a file called <code>TAGS</code>.  For example, if you are
interested in Emacs sources, the tags table you will most likely want,
if it has already been created for you, will be in a subdirectory of
the <code>/usr/local/share/emacs/</code> directory; thus you would use the
<code>M-x visit-tags-table</code> command and specify a pathname such as
<code>/usr/local/share/emacs/21.0.100/lisp/TAGS</code> or
<code>/usr/local/src/emacs/lisp/TAGS</code>.  If the tags table has
not already been created, you will have to create it yourself.

<p>To create a <code>TAGS</code> file in a specific directory, switch to that
directory in Emacs using <kbd>M-x cd</kbd> command, or list the directory
with <kbd>C-x d</kbd> (<code>dired</code>).  Then run the compile command, with
<code>etags&nbsp;*.el</code> as the command to execute

<pre>M-x compile RET etags *.el RET
</pre>

<p>For more information, see <a href="#etags">Create Your Own <code>TAGS</code> File</a>.

<p>After you become more familiar with Emacs Lisp, you will find that you will
frequently use <code>find-tags</code> to navigate your way around source code;
and you will create your own <code>TAGS</code> tables.

<p>Incidentally, the files that contain Lisp code are conventionally
called <dfn>libraries</dfn>.  The metaphor is derived from that of a
specialized library, such as a law library or an engineering library,
rather than a general library.  Each library, or file, contains
functions that relate to a particular topic or activity, such as
<code>abbrev.el</code> for handling abbreviations and other typing
shortcuts, and <code>help.el</code> for on-line help.  (Sometimes several
libraries provide code for a single activity, as the various
<code>rmail<small>...</small></code> files provide code for reading electronic mail.) 
In <cite>The GNU Emacs Manual</cite>, you will see sentences such as "The
<kbd>C-h p</kbd> command lets you search the standard Emacs Lisp libraries
by topic keywords."

<p><hr>
Node:<a name="simplified-beginning-of-buffer">simplified-beginning-of-buffer</a>,
Next:<a rel=next href="#mark-whole-buffer">mark-whole-buffer</a>,
Previous:<a rel=previous href="#Finding%20More">Finding More</a>,
Up:<a rel=up href="#Buffer%20Walk%20Through">Buffer Walk Through</a>
<br>

<h2>4.2 A Simplified <code>beginning-of-buffer</code> Definition</h2>

<p>The <code>beginning-of-buffer</code> command is a good function to start with
since you are likely to be familiar with it and it is easy to
understand.  Used as an interactive command, <code>beginning-of-buffer</code>
moves the cursor to the beginning of the buffer, leaving the mark at the
previous position.  It is generally bound to <kbd>M-&lt;</kbd>.

<p>In this section, we will discuss a shortened version of the function
that shows how it is most frequently used.  This shortened function
works as written, but it does not contain the code for a complex option. 
In another section, we will describe the entire function. 
(See <a href="#beginning-of-buffer">Complete Definition of <code>beginning-of-buffer</code></a>.)

<p>Before looking at the code, let's consider what the function
definition has to contain: it must include an expression that makes
the function interactive so it can be called by typing <kbd>M-x
beginning-of-buffer</kbd> or by typing a keychord such as <kbd>C-&lt;</kbd>; it
must include code to leave a mark at the original position in the
buffer; and it must include code to move the cursor to the beginning
of the buffer.

<p>Here is the complete text of the shortened version of the function:

<pre>(defun simplified-beginning-of-buffer ()
  "Move point to the beginning of the buffer;
leave mark at previous position."
  (interactive)
  (push-mark)
  (goto-char (point-min)))
</pre>

<p>Like all function definitions, this definition has five parts following
the special form <code>defun</code>:

<ol type=1 start=1>
</p><li>The name: in this example, <code>simplified-beginning-of-buffer</code>.

<li>A list of the arguments: in this example, an empty list, <code>()</code>,

<li>The documentation string.

<li>The interactive expression.

<li>The body.
</ol>

<p>In this function definition, the argument list is empty; this means that
this function does not require any arguments.  (When we look at the
definition for the complete function, we will see that it may be passed
an optional argument.)

<p>The interactive expression tells Emacs that the function is intended to
be used interactively.  In this example, <code>interactive</code> does not have
an argument because <code>simplified-beginning-of-buffer</code> does not
require one.

<p>The body of the function consists of the two lines:

<pre>(push-mark)
(goto-char (point-min))
</pre>

<p>The first of these lines is the expression, <code>(push-mark)</code>.  When
this expression is evaluated by the Lisp interpreter, it sets a mark at
the current position of the cursor, wherever that may be.  The position
of this mark is saved in the mark ring.

<p>The next line is <code>(goto-char (point-min))</code>.  This expression
jumps the cursor to the minimum point in the buffer, that is, to the
beginning of the buffer (or to the beginning of the accessible portion
of the buffer if it is narrowed.  See <a href="#Narrowing%20&amp;%20Widening">Narrowing and Widening</a>.)

<p>The <code>push-mark</code> command sets a mark at the place where the cursor
was located before it was moved to the beginning of the buffer by the
<code>(goto-char (point-min))</code> expression.  Consequently, you can, if
you wish, go back to where you were originally by typing <kbd>C-x C-x</kbd>.

<p>That is all there is to the function definition!

<p>When you are reading code such as this and come upon an unfamiliar
function, such as <code>goto-char</code>, you can find out what it does by
using the <code>describe-function</code> command.  To use this command, type
<kbd>C-h f</kbd> and then type in the name of the function and press
&lt;RET&gt;.  The <code>describe-function</code> command will print the
function's documentation string in a <code>*Help*</code> window.  For
example, the documentation for <code>goto-char</code> is:

<pre>One arg, a number.  Set point to that number.
Beginning of buffer is position (point-min),
end is (point-max).
</pre>

<p>(The prompt for <code>describe-function</code> will offer you the symbol
under or preceding the cursor, so you can save typing by positioning
the cursor right over or after the function and then typing <kbd>C-h f
&lt;RET&gt;</kbd>.)

<p>The <code>end-of-buffer</code> function definition is written in the same way as
the <code>beginning-of-buffer</code> definition except that the body of the
function contains the expression <code>(goto-char (point-max))</code> in place
of <code>(goto-char (point-min))</code>.

<p><hr>
Node:<a name="mark-whole-buffer">mark-whole-buffer</a>,
Next:<a rel=next href="#append-to-buffer">append-to-buffer</a>,
Previous:<a rel=previous href="#simplified-beginning-of-buffer">simplified-beginning-of-buffer</a>,
Up:<a rel=up href="#Buffer%20Walk%20Through">Buffer Walk Through</a>
<br>

<h2>4.3 The Definition of <code>mark-whole-buffer</code></h2>

<p>The <code>mark-whole-buffer</code> function is no harder to understand than the
<code>simplified-beginning-of-buffer</code> function.  In this case, however,
we will look at the complete function, not a shortened version.

<p>The <code>mark-whole-buffer</code> function is not as commonly used as the
<code>beginning-of-buffer</code> function, but is useful nonetheless: it
marks a whole buffer as a region by putting point at the beginning and
a mark at the end of the buffer.  It is generally bound to <kbd>C-x
h</kbd>.

<ul>
<li><a href="#mark-whole-buffer%20overview">mark-whole-buffer overview</a>: 
<li><a href="#Body%20of%20mark-whole-buffer">Body of mark-whole-buffer</a>:    Only three lines of code. 
</ul>

<p><hr>
Node:<a name="mark-whole-buffer%20overview">mark-whole-buffer overview</a>,
Next:<a rel=next href="#Body%20of%20mark-whole-buffer">Body of mark-whole-buffer</a>,
Previous:<a rel=previous href="#mark-whole-buffer">mark-whole-buffer</a>,
Up:<a rel=up href="#mark-whole-buffer">mark-whole-buffer</a>
<br>

<h3>An overview of <code>mark-whole-buffer</code></h3>

<p>In GNU Emacs 20, the code for the complete function looks like this:

<pre>(defun mark-whole-buffer ()
  "Put point at beginning and mark at end of buffer."
  (interactive)
  (push-mark (point))
  (push-mark (point-max))
  (goto-char (point-min)))
</pre>

<p>Like all other functions, the <code>mark-whole-buffer</code> function fits
into the template for a function definition.  The template looks like
this:

<pre>(defun <var>name-of-function</var> (<var>argument-list</var>)
  "<var>documentation</var><small>...</small>"
  (<var>interactive-expression</var><small>...</small>)
  <var>body</var><small>...</small>)
</pre>

<p>Here is how the function works: the name of the function is
<code>mark-whole-buffer</code>; it is followed by an empty argument list,
<code>()</code>, which means that the function does not require arguments. 
The documentation comes next.

<p>The next line is an <code>(interactive)</code> expression that tells Emacs
that the function will be used interactively.  These details are similar
to the <code>simplified-beginning-of-buffer</code> function described in the
previous section.

<p><hr>
Node:<a name="Body%20of%20mark-whole-buffer">Body of mark-whole-buffer</a>,
Previous:<a rel=previous href="#mark-whole-buffer%20overview">mark-whole-buffer overview</a>,
Up:<a rel=up href="#mark-whole-buffer">mark-whole-buffer</a>
<br>

<h3>4.3.1 Body of <code>mark-whole-buffer</code></h3>

<p>The body of the <code>mark-whole-buffer</code> function consists of three
lines of code:

<pre>(push-mark (point))
(push-mark (point-max))
(goto-char (point-min))
</pre>

<p>The first of these lines is the expression, <code>(push-mark (point))</code>.

<p>This line does exactly the same job as the first line of the body of
the <code>simplified-beginning-of-buffer</code> function, which is written
<code>(push-mark)</code>.  In both cases, the Lisp interpreter sets a mark
at the current position of the cursor.

<p>I don't know why the expression in <code>mark-whole-buffer</code> is written
<code>(push-mark (point))</code> and the expression in
<code>beginning-of-buffer</code> is written <code>(push-mark)</code>.  Perhaps
whoever wrote the code did not know that the arguments for
<code>push-mark</code> are optional and that if <code>push-mark</code> is not
passed an argument, the function automatically sets mark at the
location of point by default.  Or perhaps the expression was written
so as to parallel the structure of the next line.  In any case, the
line causes Emacs to determine the position of point and set a mark
there.

<p>The next line of <code>mark-whole-buffer</code> is <code>(push-mark (point-max)</code>. 
This expression sets a mark at the point in the buffer
that has the highest number.  This will be the end of the buffer (or,
if the buffer is narrowed, the end of the accessible portion of the
buffer.  See <a href="#Narrowing%20&amp;%20Widening">Narrowing and Widening</a>, for
more about narrowing.)  After this mark has been set, the previous
mark, the one set at point, is no longer set, but Emacs remembers its
position, just as all other recent marks are always remembered.  This
means that you can, if you wish, go back to that position by typing
<kbd>C-u C-&lt;SPC&gt;</kbd> twice.

<p>(In GNU Emacs 21, the <code>(push-mark (point-max)</code> is slightly more
complicated than shown here.  The line reads

<pre>(push-mark (point-max) nil t)
</pre>

<p>(The expression works nearly the same as before.  It sets a mark at
the highest numbered place in the buffer that it can.  However, in
this version, <code>push-mark</code> has two additional arguments.  The
second argument to <code>push-mark</code> is <code>nil</code>.  This tells the
function it <em>should</em> display a message that says `Mark set' when
it pushes the mark.  The third argument is <code>t</code>.  This tells
<code>push-mark</code> to activate the mark when Transient Mark mode is
turned on.  Transient Mark mode highlights the currently active
region.  It is usually turned off.)

<p>Finally, the last line of the function is <code>(goto-char
(point-min)))</code>.  This is written exactly the same way as it is written
in <code>beginning-of-buffer</code>.  The expression moves the cursor to
the minimum point in the buffer, that is, to the beginning of the buffer
(or to the beginning of the accessible portion of the buffer).  As a
result of this, point is placed at the beginning of the buffer and mark
is set at the end of the buffer.  The whole buffer is, therefore, the
region.

<p><hr>
Node:<a name="append-to-buffer">append-to-buffer</a>,
Next:<a rel=next href="#Buffer%20Related%20Review">Buffer Related Review</a>,
Previous:<a rel=previous href="#mark-whole-buffer">mark-whole-buffer</a>,
Up:<a rel=up href="#Buffer%20Walk%20Through">Buffer Walk Through</a>
<br>

<h2>4.4 The Definition of <code>append-to-buffer</code></h2>

<p>The <code>append-to-buffer</code> command is very nearly as simple as the
<code>mark-whole-buffer</code> command.  What it does is copy the region (that
is, the part of the buffer between point and mark) from the current
buffer to a specified buffer.

<ul>
<li><a href="#append-to-buffer%20overview">append-to-buffer overview</a>: 
<li><a href="#append%20interactive">append interactive</a>:           A two part interactive expression. 
<li><a href="#append-to-buffer%20body">append-to-buffer body</a>:        Incorporates a <code>let</code> expression. 
<li><a href="#append%20save-excursion">append save-excursion</a>:        How the <code>save-excursion</code> works. 
</ul>

<p><hr>
Node:<a name="append-to-buffer%20overview">append-to-buffer overview</a>,
Next:<a rel=next href="#append%20interactive">append interactive</a>,
Previous:<a rel=previous href="#append-to-buffer">append-to-buffer</a>,
Up:<a rel=up href="#append-to-buffer">append-to-buffer</a>
<br>

<h3>An Overview of <code>append-to-buffer</code></h3>

<p>The <code>append-to-buffer</code> command uses the
<code>insert-buffer-substring</code> function to copy the region. 
<code>insert-buffer-substring</code> is described by its name: it takes a
string of characters from part of a buffer, a "substring", and
inserts them into another buffer.  Most of <code>append-to-buffer</code> is
concerned with setting up the conditions for
<code>insert-buffer-substring</code> to work: the code must specify both the
buffer to which the text will go and the region that will be copied. 
Here is the complete text of the function:

<pre>(defun append-to-buffer (buffer start end)
  "Append to specified buffer the text of the region.
It is inserted into that buffer before its point.

When calling from a program, give three arguments:
a buffer or the name of one, and two character numbers
specifying the portion of the current buffer to be copied."
  (interactive "BAppend to buffer: \nr")
  (let ((oldbuf (current-buffer)))
    (save-excursion
      (set-buffer (get-buffer-create buffer))
      (insert-buffer-substring oldbuf start end))))
</pre>

<p>The function can be understood by looking at it as a series of
filled-in templates.

<p>The outermost template is for the function definition.  In this
function, it looks like this (with several slots filled in):

<pre>(defun append-to-buffer (buffer start end)
  "<var>documentation</var><small>...</small>"
  (interactive "BAppend to buffer: \nr")
  <var>body</var><small>...</small>)
</pre>

<p>The first line of the function includes its name and three arguments. 
The arguments are the <code>buffer</code> to which the text will be copied, and
the <code>start</code> and <code>end</code> of the region in the current buffer that
will be copied.

<p>The next part of the function is the documentation, which is clear and
complete.

<p><hr>
Node:<a name="append%20interactive">append interactive</a>,
Next:<a rel=next href="#append-to-buffer%20body">append-to-buffer body</a>,
Previous:<a rel=previous href="#append-to-buffer%20overview">append-to-buffer overview</a>,
Up:<a rel=up href="#append-to-buffer">append-to-buffer</a>
<br>

<h3>4.4.1 The <code>append-to-buffer</code> Interactive Expression</h3>

<p>Since the <code>append-to-buffer</code> function will be used interactively,
the function must have an <code>interactive</code> expression.  (For a
review of <code>interactive</code>, see <a href="#Interactive">Making a Function Interactive</a>.)  The expression reads as follows:

<pre>(interactive "BAppend to buffer: \nr")
</pre>

<p>This expression has an argument inside of quotation marks and that
argument has two parts, separated by <code>\n</code>.

<p>The first part is <code>BAppend to buffer: </code>.  Here, the <code>B</code>
tells Emacs to ask for the name of the buffer that will be passed to the
function.  Emacs will ask for the name by prompting the user in the
minibuffer, using the string following the <code>B</code>, which is the string
<code>Append to buffer: </code>.  Emacs then binds the variable <code>buffer</code>
in the function's argument list to the specified buffer.

<p>The newline, <code>\n</code>, separates the first part of the argument from
the second part.  It is followed by an <code>r</code> that tells Emacs to bind
the two arguments that follow the symbol <code>buffer</code> in the function's
argument list (that is, <code>start</code> and <code>end</code>) to the values of
point and mark.

<p><hr>
Node:<a name="append-to-buffer%20body">append-to-buffer body</a>,
Next:<a rel=next href="#append%20save-excursion">append save-excursion</a>,
Previous:<a rel=previous href="#append%20interactive">append interactive</a>,
Up:<a rel=up href="#append-to-buffer">append-to-buffer</a>
<br>

<h3>4.4.2 The Body of <code>append-to-buffer</code></h3>

<p>The body of the <code>append-to-buffer</code> function begins with <code>let</code>.

<p>As we have seen before (see <a href="#let"><code>let</code></a>), the purpose of a
<code>let</code> expression is to create and give initial values to one or
more variables that will only be used within the body of the
<code>let</code>.  This means that such a variable will not be confused with
any variable of the same name outside the <code>let</code> expression.

<p>We can see how the <code>let</code> expression fits into the function as a
whole by showing a template for <code>append-to-buffer</code> with the
<code>let</code> expression in outline:

<pre>(defun append-to-buffer (buffer start end)
  "<var>documentation</var><small>...</small>"
  (interactive "BAppend to buffer: \nr")
  (let ((<var>variable</var> <var>value</var>))
        <var>body</var><small>...</small>)
</pre>

<p>The <code>let</code> expression has three elements:

<ol type=1 start=1>
</p><li>The symbol <code>let</code>;

<li>A varlist containing, in this case, a single two-element list,
<code>(<var>variable</var> <var>value</var>)</code>;

<li>The body of the <code>let</code> expression.
</ol>

<p>In the <code>append-to-buffer</code> function, the varlist looks like this:

<pre>(oldbuf (current-buffer))
</pre>

<p>In this part of the <code>let</code> expression, the one variable,
<code>oldbuf</code>, is bound to the value returned by the
<code>(current-buffer)</code> expression.  The variable, <code>oldbuf</code>, is
used to keep track of the buffer in which you are working and from
which you will copy.

<p>The element or elements of a varlist are surrounded by a set of
parentheses so the Lisp interpreter can distinguish the varlist from
the body of the <code>let</code>.  As a consequence, the two-element list
within the varlist is surrounded by a circumscribing set of parentheses. 
The line looks like this:

<pre>(let ((oldbuf (current-buffer)))
  <small>...</small> )
</pre>

<p>The two parentheses before <code>oldbuf</code> might surprise you if you did
not realize that the first parenthesis before <code>oldbuf</code> marks the
boundary of the varlist and the second parenthesis marks the beginning
of the two-element list, <code>(oldbuf (current-buffer))</code>.

<p><hr>
Node:<a name="append%20save-excursion">append save-excursion</a>,
Previous:<a rel=previous href="#append-to-buffer%20body">append-to-buffer body</a>,
Up:<a rel=up href="#append-to-buffer">append-to-buffer</a>
<br>

<h3>4.4.3 <code>save-excursion</code> in <code>append-to-buffer</code></h3>

<p>The body of the <code>let</code> expression in <code>append-to-buffer</code>
consists of a <code>save-excursion</code> expression.

<p>The <code>save-excursion</code> function saves the locations of point and
mark, and restores them to those positions after the expressions in the
body of the <code>save-excursion</code> complete execution.  In addition,
<code>save-excursion</code> keeps track of the original buffer, and
restores it.  This is how <code>save-excursion</code> is used in
<code>append-to-buffer</code>.

<p>Incidentally, it is worth noting here that a Lisp function is normally
formatted so that everything that is enclosed in a multi-line spread is
indented more to the right than the first symbol.  In this function
definition, the <code>let</code> is indented more than the <code>defun</code>, and
the <code>save-excursion</code> is indented more than the <code>let</code>, like
this:

<pre>(defun <small>...</small>
  <small>...</small>
  <small>...</small>
  (let<small>...</small>
    (save-excursion
      <small>...</small>
</pre>

<p>This formatting convention makes it easy to see that the two lines in
the body of the <code>save-excursion</code> are enclosed by the parentheses
associated with <code>save-excursion</code>, just as the
<code>save-excursion</code> itself is enclosed by the parentheses associated
with the <code>let</code>:

<pre>(let ((oldbuf (current-buffer)))
  (save-excursion
    (set-buffer (get-buffer-create buffer))
    (insert-buffer-substring oldbuf start end))))
</pre>

<p>The use of the <code>save-excursion</code> function can be viewed as a process
of filling in the slots of a template:

<pre>(save-excursion
  <var>first-expression-in-body</var>
  <var>second-expression-in-body</var>
   <small>...</small>
  <var>last-expression-in-body</var>)
</pre>

<p>In this function, the body of the <code>save-excursion</code> contains only
two expressions.  The body looks like this:

<pre>(set-buffer (get-buffer-create buffer))
(insert-buffer-substring oldbuf start end)
</pre>

<p>When the <code>append-to-buffer</code> function is evaluated, the two
expressions in the body of the <code>save-excursion</code> are evaluated in
sequence.  The value of the last expression is returned as the value of
the <code>save-excursion</code> function; the other expression is evaluated
only for its side effects.

<p>The first line in the body of the <code>save-excursion</code> uses the
<code>set-buffer</code> function to change the current buffer to the one
specified in the first argument to <code>append-to-buffer</code>.  (Changing
the buffer is the side effect; as we have said before, in Lisp, a side
effect is often the primary thing we want.)  The second line does the
primary work of the function.

<p>The <code>set-buffer</code> function changes Emacs' attention to the buffer to
which the text will be copied and from which <code>save-excursion</code> will
return.

<p>The line looks like this:

<pre>(set-buffer (get-buffer-create buffer))
</pre>

<p>The innermost expression of this list is <code>(get-buffer-create
buffer)</code>.  This expression uses the <code>get-buffer-create</code> function,
which either gets the named buffer, or if it does not exist, creates one
with the given name.  This means you can use <code>append-to-buffer</code> to
put text into a buffer that did not previously exist.

<p><code>get-buffer-create</code> also keeps <code>set-buffer</code> from getting an
unnecessary error: <code>set-buffer</code> needs a buffer to go to; if you
were to specify a buffer that does not exist, Emacs would baulk. 
Since <code>get-buffer-create</code> will create a buffer if none exists,
<code>set-buffer</code> is always provided with a buffer.

<p>The last line of <code>append-to-buffer</code> does the work of appending
the text:

<pre>(insert-buffer-substring oldbuf start end)
</pre>

<p>The <code>insert-buffer-substring</code> function copies a string <em>from</em>
the buffer specified as its first argument and inserts the string into
the present buffer.  In this case, the argument to
<code>insert-buffer-substring</code> is the value of the variable created and
bound by the <code>let</code>, namely the value of <code>oldbuf</code>, which was
the current buffer when you gave the <code>append-to-buffer</code> command.

<p>After <code>insert-buffer-substring</code> has done its work,
<code>save-excursion</code> will restore the action to the original buffer and
<code>append-to-buffer</code> will have done its job.

<p>Written in skeletal form, the workings of the body look like this:

<pre>(let (<var>bind-</var><code>oldbuf</code><var>-to-value-of-</var><code>current-buffer</code>)
  (save-excursion                       ; Keep track of buffer.
    <var>change-buffer</var>
    <var>insert-substring-from-</var><code>oldbuf</code><var>-into-buffer</var>)

  <var>change-back-to-original-buffer-when-finished</var>
<var>let-the-local-meaning-of-</var><code>oldbuf</code><var>-disappear-when-finished</var>
</pre>

<p>In summary, <code>append-to-buffer</code> works as follows: it saves the value
of the current buffer in the variable called <code>oldbuf</code>.  It gets the
new buffer, creating one if need be, and switches Emacs to it.  Using
the value of <code>oldbuf</code>, it inserts the region of text from the old
buffer into the new buffer; and then using <code>save-excursion</code>, it
brings you back to your original buffer.

<p>In looking at <code>append-to-buffer</code>, you have explored a fairly
complex function.  It shows how to use <code>let</code> and
<code>save-excursion</code>, and how to change to and come back from another
buffer.  Many function definitions use <code>let</code>,
<code>save-excursion</code>, and <code>set-buffer</code> this way.

<p><hr>
Node:<a name="Buffer%20Related%20Review">Buffer Related Review</a>,
Next:<a rel=next href="#Buffer%20Exercises">Buffer Exercises</a>,
Previous:<a rel=previous href="#append-to-buffer">append-to-buffer</a>,
Up:<a rel=up href="#Buffer%20Walk%20Through">Buffer Walk Through</a>
<br>

<h2>4.5 Review</h2>

<p>Here is a brief summary of the various functions discussed in this chapter.

<dl>
<dt><code>describe-function</code>
<dt><code>describe-variable</code>
<dd>Print the documentation for a function or variable. 
Conventionally bound to <kbd>C-h f</kbd> and <kbd>C-h v</kbd>.

<br><dt><code>find-tag</code>
<dd>Find the file containing the source for a function or variable and
switch buffers to it, positioning point at the beginning of the item. 
Conventionally bound to <kbd>M-.</kbd> (that's a period following the
&lt;META&gt; key).

<br><dt><code>save-excursion</code>
<dd>Save the location of point and mark and restore their values after the
arguments to <code>save-excursion</code> have been evaluated.  Also, remember
the current buffer and return to it.

<br><dt><code>push-mark</code>
<dd>Set mark at a location and record the value of the previous mark on the
mark ring.  The mark is a location in the buffer that will keep its
relative position even if text is added to or removed from the buffer.

<br><dt><code>goto-char</code>
<dd>Set point to the location specified by the value of the argument, which
can be a number, a marker,  or an expression that returns the number of
a position, such as <code>(point-min)</code>.

<br><dt><code>insert-buffer-substring</code>
<dd>Copy a region of text from a buffer that is passed to the function as
an argument and insert the region into the current buffer.

<br><dt><code>mark-whole-buffer</code>
<dd>Mark the whole buffer as a region.  Normally bound to <kbd>C-x h</kbd>.

<br><dt><code>set-buffer</code>
<dd>Switch the attention of Emacs to another buffer, but do not change the
window being displayed.  Used when the program rather than a human is
to work on a different buffer.

<br><dt><code>get-buffer-create</code>
<dt><code>get-buffer</code>
<dd>Find a named buffer or create one if a buffer of that name does not
exist.  The <code>get-buffer</code> function returns <code>nil</code> if the named
buffer does not exist. 
</dl>

<p><hr>
Node:<a name="Buffer%20Exercises">Buffer Exercises</a>,
Previous:<a rel=previous href="#Buffer%20Related%20Review">Buffer Related Review</a>,
Up:<a rel=up href="#Buffer%20Walk%20Through">Buffer Walk Through</a>
<br>

<h2>4.6 Exercises</h2>

<ul>
<li>Write your own <code>simplified-end-of-buffer</code> function definition;
then test it to see whether it works.

<li>Use <code>if</code> and <code>get-buffer</code> to write a function that prints a
message telling you whether a buffer exists.

<li>Using <code>find-tag</code>, find the source for the <code>copy-to-buffer</code>
function. 
</ul>

<p><hr>
Node:<a name="More%20Complex">More Complex</a>,
Next:<a rel=next href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>,
Previous:<a rel=previous href="#Buffer%20Walk%20Through">Buffer Walk Through</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>5 A Few More Complex Functions</h1>

<p>In this chapter, we build on what we have learned in previous chapters
by looking at more complex functions.  The <code>copy-to-buffer</code>
function illustrates use of two <code>save-excursion</code> expressions in
one definition, while the <code>insert-buffer</code> function illustrates
use of an asterisk in an <code>interactive</code> expression, use of
<code>or</code>, and the important distinction between a name and the object
to which the name refers.

<ul>
<li><a href="#copy-to-buffer">copy-to-buffer</a>:               With <code>set-buffer</code>, <code>get-buffer-create</code>. 
<li><a href="#insert-buffer">insert-buffer</a>:                Read-only, and with <code>or</code>. 
<li><a href="#beginning-of-buffer">beginning-of-buffer</a>:          Shows <code>goto-char</code>,
                                <code>point-min</code>, and <code>push-mark</code>. 
<li><a href="#Second%20Buffer%20Related%20Review">Second Buffer Related Review</a>: 
<li><a href="#optional%20Exercise">optional Exercise</a>: 
</ul>

<p><hr>
Node:<a name="copy-to-buffer">copy-to-buffer</a>,
Next:<a rel=next href="#insert-buffer">insert-buffer</a>,
Previous:<a rel=previous href="#More%20Complex">More Complex</a>,
Up:<a rel=up href="#More%20Complex">More Complex</a>
<br>

<h2>5.1 The Definition of <code>copy-to-buffer</code></h2>

<p>After understanding how <code>append-to-buffer</code> works, it is easy to
understand <code>copy-to-buffer</code>.  This function copies text into a
buffer, but instead of adding to the second buffer, it replaces the
previous text in the second buffer.  The code for the
<code>copy-to-buffer</code> function is almost the same as the code for
<code>append-to-buffer</code>, except that <code>erase-buffer</code> and a second
<code>save-excursion</code> are used.  (See <a href="#append-to-buffer">The Definition of <code>append-to-buffer</code></a>, for the description of
<code>append-to-buffer</code>.)

<p>The body of <code>copy-to-buffer</code> looks like this

<pre><small>...</small>
(interactive "BCopy to buffer: \nr")
  (let ((oldbuf (current-buffer)))
    (save-excursion
      (set-buffer (get-buffer-create buffer))
      (erase-buffer)
      (save-excursion
        (insert-buffer-substring oldbuf start end)))))
</pre>

<p>This code is similar to the code in <code>append-to-buffer</code>: it is
only after changing to the buffer to which the text will be copied
that the definition for this function diverges from the definition for
<code>append-to-buffer</code>: the <code>copy-to-buffer</code> function erases the
buffer's former contents.  (This is what is meant by `replacement'; to
replace text, Emacs erases the previous text and then inserts new
text.)  After erasing the previous contents of the buffer,
<code>save-excursion</code> is used for a second time and the new text is
inserted.

<p>Why is <code>save-excursion</code> used twice?  Consider again what the
function does.

<p>In outline, the body of <code>copy-to-buffer</code> looks like this:

<pre>(let (<var>bind-</var><code>oldbuf</code><var>-to-value-of-</var><code>current-buffer</code>)
  (save-excursion         ; First use of <code>save-excursion</code>.
    <var>change-buffer</var>
      (erase-buffer)
      (save-excursion     ; Second use of <code>save-excursion</code>.
        <var>insert-substring-from-</var><code>oldbuf</code><var>-into-buffer</var>)))
</pre>

<p>The first use of <code>save-excursion</code> returns Emacs to the buffer from
which the text is being copied.  That is clear, and is just like its use
in <code>append-to-buffer</code>.  Why the second use?  The reason is that
<code>insert-buffer-substring</code> always leaves point at the <em>end</em> of
the region being inserted.  The second <code>save-excursion</code> causes
Emacs to leave point at the beginning of the text being inserted.  In
most circumstances, users prefer to find point at the beginning of
inserted text.  (Of course, the <code>copy-to-buffer</code> function returns
the user to the original buffer when done--but if the user <em>then</em>
switches to the copied-to buffer, point will go to the beginning of the
text.  Thus, this use of a second <code>save-excursion</code> is a little
nicety.)

<p><hr>
Node:<a name="insert-buffer">insert-buffer</a>,
Next:<a rel=next href="#beginning-of-buffer">beginning-of-buffer</a>,
Previous:<a rel=previous href="#copy-to-buffer">copy-to-buffer</a>,
Up:<a rel=up href="#More%20Complex">More Complex</a>
<br>

<h2>5.2 The Definition of <code>insert-buffer</code></h2>

<p><code>insert-buffer</code> is yet another buffer-related function.  This
command copies another buffer <em>into</em> the current buffer.  It is the
reverse of <code>append-to-buffer</code> or <code>copy-to-buffer</code>, since they
copy a region of text <em>from</em> the current buffer to another buffer.

<p>In addition, this code illustrates the use of <code>interactive</code> with a
buffer that might be <dfn>read-only</dfn> and the important distinction
between the name of an object and the object actually referred to.

<ul>
<li><a href="#insert-buffer%20code">insert-buffer code</a>: 
<li><a href="#insert-buffer%20interactive">insert-buffer interactive</a>:    When you can read, but not write. 
<li><a href="#insert-buffer%20body">insert-buffer body</a>:           The body has an <code>or</code> and a <code>let</code>. 
<li><a href="#if%20&amp;%20or">if &amp; or</a>:                      Using an <code>if</code> instead of an <code>or</code>. 
<li><a href="#Insert%20or">Insert or</a>:                    How the <code>or</code> expression works. 
<li><a href="#Insert%20let">Insert let</a>:                   Two <code>save-excursion</code> expressions. 
</ul>

<p><hr>
Node:<a name="insert-buffer%20code">insert-buffer code</a>,
Next:<a rel=next href="#insert-buffer%20interactive">insert-buffer interactive</a>,
Previous:<a rel=previous href="#insert-buffer">insert-buffer</a>,
Up:<a rel=up href="#insert-buffer">insert-buffer</a>
<br>

<h3>The Code for <code>insert-buffer</code></h3>

<p>Here is the code:

<pre>(defun insert-buffer (buffer)
  "Insert after point the contents of BUFFER.
Puts mark after the inserted text.
BUFFER may be a buffer or a buffer name."
  (interactive "*bInsert buffer: ")
  (or (bufferp buffer)
      (setq buffer (get-buffer buffer)))
  (let (start end newmark)
    (save-excursion
      (save-excursion
        (set-buffer buffer)
        (setq start (point-min) end (point-max)))
      (insert-buffer-substring buffer start end)
      (setq newmark (point)))
    (push-mark newmark)))
</pre>

<p>As with other function definitions, you can use a template to see an
outline of the function:

<pre>(defun insert-buffer (buffer)
  "<var>documentation</var><small>...</small>"
  (interactive "*bInsert buffer: ")
  <var>body</var><small>...</small>)
</pre>

<p><hr>
Node:<a name="insert-buffer%20interactive">insert-buffer interactive</a>,
Next:<a rel=next href="#insert-buffer%20body">insert-buffer body</a>,
Previous:<a rel=previous href="#insert-buffer%20code">insert-buffer code</a>,
Up:<a rel=up href="#insert-buffer">insert-buffer</a>
<br>

<h3>5.2.1 The Interactive Expression in <code>insert-buffer</code></h3>

<p>In <code>insert-buffer</code>, the argument to the <code>interactive</code>
declaration has two parts, an asterisk, <code>*</code>, and <code>bInsert
buffer: </code>.

<ul>
<li><a href="#Read-only%20buffer">Read-only buffer</a>:             When a buffer cannot be modified. 
<li><a href="#b%20for%20interactive">b for interactive</a>:            An existing buffer or else its name. 
</ul>

<p><hr>
Node:<a name="Read-only%20buffer">Read-only buffer</a>,
Next:<a rel=next href="#b%20for%20interactive">b for interactive</a>,
Previous:<a rel=previous href="#insert-buffer%20interactive">insert-buffer interactive</a>,
Up:<a rel=up href="#insert-buffer%20interactive">insert-buffer interactive</a>
<br>

<h4>A Read-only Buffer</h4>

<p>The asterisk is for the situation when the buffer is a read-only
buffer--a buffer that cannot be modified.  If <code>insert-buffer</code> is
called on a buffer that is read-only, a message to this effect is
printed in the echo area and the terminal may beep or blink at you;
you will not be permitted to insert anything into current buffer.  The
asterisk does not need to be followed by a newline to separate it from
the next argument.

<p><hr>
Node:<a name="b%20for%20interactive">b for interactive</a>,
Previous:<a rel=previous href="#Read-only%20buffer">Read-only buffer</a>,
Up:<a rel=up href="#insert-buffer%20interactive">insert-buffer interactive</a>
<br>

<h4><code>b</code> in an Interactive Expression</h4>

<p>The next argument in the interactive expression starts with a lower
case <code>b</code>.  (This is different from the code for
<code>append-to-buffer</code>, which uses an upper-case <code>B</code>. 
See <a href="#append-to-buffer">The Definition of <code>append-to-buffer</code></a>.) 
The lower-case <code>b</code> tells the Lisp interpreter that the argument
for <code>insert-buffer</code> should be an existing buffer or else its
name.  (The upper-case <code>B</code> option provides for the possibility
that the buffer does not exist.)  Emacs will prompt you for the name
of the buffer, offering you a default buffer, with name completion
enabled.  If the buffer does not exist, you receive a message that
says "No match"; your terminal may beep at you as well.

<p><hr>
Node:<a name="insert-buffer%20body">insert-buffer body</a>,
Next:<a rel=next href="#if%20&amp;%20or">if & or</a>,
Previous:<a rel=previous href="#insert-buffer%20interactive">insert-buffer interactive</a>,
Up:<a rel=up href="#insert-buffer">insert-buffer</a>
<br>

<h3>5.2.2 The Body of the <code>insert-buffer</code> Function</h3>

<p>The body of the <code>insert-buffer</code> function has two major parts: an
<code>or</code> expression and a <code>let</code> expression.  The purpose of the
<code>or</code> expression is to ensure that the argument <code>buffer</code> is
bound to a buffer and not just the name of a buffer.  The body of the
<code>let</code> expression contains the code which copies the other buffer
into the current buffer.

<p>In outline, the two expressions fit into the <code>insert-buffer</code>
function like this:

<pre>(defun insert-buffer (buffer)
  "<var>documentation</var><small>...</small>"
  (interactive "*bInsert buffer: ")
  (or <small>...</small>
      <small>...</small>
  (let (<var>varlist</var>)
      <var>body-of-</var><code>let</code><small>...</small> )
</pre>

<p>To understand how the <code>or</code> expression ensures that the argument
<code>buffer</code> is bound to a buffer and not to the name of a buffer, it
is first necessary to understand the <code>or</code> function.

<p>Before doing this, let me rewrite this part of the function using
<code>if</code> so that you can see what is done in a manner that will be familiar.

<p><hr>
Node:<a name="if%20&amp;%20or">if & or</a>,
Next:<a rel=next href="#Insert%20or">Insert or</a>,
Previous:<a rel=previous href="#insert-buffer%20body">insert-buffer body</a>,
Up:<a rel=up href="#insert-buffer">insert-buffer</a>
<br>

<h3>5.2.3 <code>insert-buffer</code> With an <code>if</code> Instead of an <code>or</code></h3>

<p>The job to be done is to make sure the value of <code>buffer</code> is a
buffer itself and not the name of a buffer.  If the value is the name,
then the buffer itself must be got.

<p>You can imagine yourself at a conference where an usher is wandering
around holding a list with your name on it and looking for you: the
usher is "bound" to your name, not to you; but when the usher finds
you and takes your arm, the usher becomes "bound" to you.

<p>In Lisp, you might describe this situation like this:

<pre>(if (not (holding-on-to-guest))
    (find-and-take-arm-of-guest))
</pre>

<p>We want to do the same thing with a buffer--if we do not have the
buffer itself, we want to get it.

<p>Using a predicate called <code>bufferp</code> that tells us whether we have a
buffer (rather than its name), we can write the code like this:

<pre>(if (not (bufferp buffer))              ; if-part
    (setq buffer (get-buffer buffer)))  ; then-part
</pre>

<p>Here, the true-or-false-test of the <code>if</code> expression is
<code>(not&nbsp;(bufferp&nbsp;buffer))</code>; and the then-part is the expression
<code>(setq&nbsp;buffer&nbsp;(get-buffer&nbsp;buffer))</code>.

<p>In the test, the function <code>bufferp</code> returns true if its argument is
a buffer--but false if its argument is the name of the buffer.  (The
last character of the function name <code>bufferp</code> is the character
<code>p</code>; as we saw earlier, such use of <code>p</code> is a convention that
indicates that the function is a predicate, which is a term that means
that the function will determine whether some property is true or false. 
See <a href="#Wrong%20Type%20of%20Argument">Using the Wrong Type Object as an Argument</a>.)

<p>The function <code>not</code> precedes the expression <code>(bufferp buffer)</code>,
so the true-or-false-test looks like this:

<pre>(not (bufferp buffer))
</pre>

<p><code>not</code> is a function that returns true if its argument is false
and false if its argument is true.  So if <code>(bufferp buffer)</code>
returns true, the <code>not</code> expression returns false and vice-versa:
what is "not true" is false and what is "not false" is true.

<p>Using this test, the <code>if</code> expression works as follows: when the
value of the variable <code>buffer</code> is actually a buffer rather then
its name, the true-or-false-test returns false and the <code>if</code>
expression does not evaluate the then-part.  This is fine, since we do
not need to do anything to the variable <code>buffer</code> if it really is
a buffer.

<p>On the other hand, when the value of <code>buffer</code> is not a buffer
itself, but the name of a buffer, the true-or-false-test returns true
and the then-part of the expression is evaluated.  In this case, the
then-part is <code>(setq buffer (get-buffer buffer))</code>.  This
expression uses the <code>get-buffer</code> function to return an actual
buffer itself, given its name.  The <code>setq</code> then sets the variable
<code>buffer</code> to the value of the buffer itself, replacing its previous
value (which was the name of the buffer).

<p><hr>
Node:<a name="Insert%20or">Insert or</a>,
Next:<a rel=next href="#Insert%20let">Insert let</a>,
Previous:<a rel=previous href="#if%20&amp;%20or">if & or</a>,
Up:<a rel=up href="#insert-buffer">insert-buffer</a>
<br>

<h3>5.2.4 The <code>or</code> in the Body</h3>

<p>The purpose of the <code>or</code> expression in the <code>insert-buffer</code>
function is to ensure that the argument <code>buffer</code> is bound to a
buffer and not just to the name of a buffer.  The previous section shows
how the job could have been done using an <code>if</code> expression. 
However, the <code>insert-buffer</code> function actually uses <code>or</code>. 
To understand this, it is necessary to understand how <code>or</code> works.

<p>An <code>or</code> function can have any number of arguments.  It evaluates
each argument in turn and returns the value of the first of its
arguments that is not <code>nil</code>.  Also, and this is a crucial feature
of <code>or</code>, it does not evaluate any subsequent arguments after
returning the first non-<code>nil</code> value.

<p>The <code>or</code> expression looks like this:

<pre>(or (bufferp buffer)
    (setq buffer (get-buffer buffer)))
</pre>

<p>The first argument to <code>or</code> is the expression <code>(bufferp buffer)</code>. 
This expression returns true (a non-<code>nil</code> value) if the buffer is
actually a buffer, and not just the name of a buffer.  In the <code>or</code>
expression, if this is the case, the <code>or</code> expression returns this
true value and does not evaluate the next expression--and this is fine
with us, since we do not want to do anything to the value of
<code>buffer</code> if it really is a buffer.

<p>On the other hand, if the value of <code>(bufferp buffer)</code> is <code>nil</code>,
which it will be if the value of <code>buffer</code> is the name of a buffer,
the Lisp interpreter evaluates the next element of the <code>or</code>
expression.  This is the expression <code>(setq buffer (get-buffer
buffer))</code>.  This expression returns a non-<code>nil</code> value, which
is the value to which it sets the variable <code>buffer</code>--and this
value is a buffer itself, not the name of a buffer.

<p>The result of all this is that the symbol <code>buffer</code> is always
bound to a buffer itself rather than to the name of a buffer.  All
this is necessary because the <code>set-buffer</code> function in a
following line only works with a buffer itself, not with the name to a
buffer.

<p>Incidentally, using <code>or</code>, the situation with the usher would be
written like this:

<pre>(or (holding-on-to-guest) (find-and-take-arm-of-guest))
</pre>

<p><hr>
Node:<a name="Insert%20let">Insert let</a>,
Previous:<a rel=previous href="#Insert%20or">Insert or</a>,
Up:<a rel=up href="#insert-buffer">insert-buffer</a>
<br>

<h3>5.2.5 The <code>let</code> Expression in <code>insert-buffer</code></h3>

<p>After ensuring that the variable <code>buffer</code> refers to a buffer itself
and not just to the name of a buffer, the <code>insert-buffer function</code>
continues with a <code>let</code> expression.  This specifies three local
variables, <code>start</code>, <code>end</code>, and <code>newmark</code> and binds them
to the initial value <code>nil</code>.  These variables are used inside the
remainder of the <code>let</code> and temporarily hide any other occurrence of
variables of the same name in Emacs until the end of the <code>let</code>.

<p>The body of the <code>let</code> contains two <code>save-excursion</code>
expressions.  First, we will look at the inner <code>save-excursion</code>
expression in detail.  The expression looks like this:

<pre>(save-excursion
  (set-buffer buffer)
  (setq start (point-min) end (point-max)))
</pre>

<p>The expression <code>(set-buffer buffer)</code> changes Emacs' attention
from the current buffer to the one from which the text will copied. 
In that buffer, the variables <code>start</code> and <code>end</code> are set to
the beginning and end of the buffer, using the commands
<code>point-min</code> and <code>point-max</code>.  Note that we have here an
illustration of how <code>setq</code> is able to set two variables in the
same expression.  The first argument of <code>setq</code> is set to the
value of its second, and its third argument is set to the value of its
fourth.

<p>After the body of the inner <code>save-excursion</code> is evaluated, the
<code>save-excursion</code> restores the original buffer, but <code>start</code> and
<code>end</code> remain set to the values of the beginning and end of the
buffer from which the text will be copied.

<p>The outer <code>save-excursion</code> expression looks like this:

<pre>(save-excursion
  (<var>inner-</var><code>save-excursion</code><var>-expression</var>
     (<var>go-to-new-buffer-and-set-</var><code>start</code><var>-and-</var><code>end</code>)
  (insert-buffer-substring buffer start end)
  (setq newmark (point)))
</pre>

<p>The <code>insert-buffer-substring</code> function copies the text
<em>into</em> the current buffer <em>from</em> the region indicated by
<code>start</code> and <code>end</code> in <code>buffer</code>.  Since the whole of the
second buffer lies between <code>start</code> and <code>end</code>, the whole of
the second buffer is copied into the buffer you are editing.  Next,
the value of point, which will be at the end of the inserted text, is
recorded in the variable <code>newmark</code>.

<p>After the body of the outer <code>save-excursion</code> is evaluated, point
and mark are relocated to their original places.

<p>However, it is convenient to locate a mark at the end of the newly
inserted text and locate point at its beginning.  The <code>newmark</code>
variable records the end of the inserted text.  In the last line of
the <code>let</code> expression, the <code>(push-mark newmark)</code> expression
function sets a mark to this location.  (The previous location of the
mark is still accessible; it is recorded on the mark ring and you can
go back to it with <kbd>C-u C-&lt;SPC&gt;</kbd>.)  Meanwhile, point is
located at the beginning of the inserted text, which is where it was
before you called the insert function.

<p>The whole <code>let</code> expression looks like this:

<pre>(let (start end newmark)
  (save-excursion
    (save-excursion
      (set-buffer buffer)
      (setq start (point-min) end (point-max)))
    (insert-buffer-substring buffer start end)
    (setq newmark (point)))
  (push-mark newmark))
</pre>

<p>Like the <code>append-to-buffer</code> function, the <code>insert-buffer</code>
function uses <code>let</code>, <code>save-excursion</code>, and
<code>set-buffer</code>.  In addition, the function illustrates one way to
use <code>or</code>.  All these functions are building blocks that we will
find and use again and again.

<p><hr>
Node:<a name="beginning-of-buffer">beginning-of-buffer</a>,
Next:<a rel=next href="#Second%20Buffer%20Related%20Review">Second Buffer Related Review</a>,
Previous:<a rel=previous href="#insert-buffer">insert-buffer</a>,
Up:<a rel=up href="#More%20Complex">More Complex</a>
<br>

<h2>5.3 Complete Definition of <code>beginning-of-buffer</code></h2>

<p>The basic structure of the <code>beginning-of-buffer</code> function has
already been discussed.  (See <a href="#simplified-beginning-of-buffer">A Simplified <code>beginning-of-buffer</code> Definition</a>.) 
This section describes the complex part of the definition.

<p>As previously described, when invoked without an argument,
<code>beginning-of-buffer</code> moves the cursor to the beginning of the
buffer, leaving the mark at the previous position.  However, when the
command is invoked with a number between one and ten, the function
considers that number to be a fraction of the length of the buffer,
measured in tenths, and Emacs moves the cursor that fraction of the way
from the beginning of the buffer.  Thus, you can either call this
function with the key command <kbd>M-&lt;</kbd>, which will move the cursor to
the beginning of the buffer, or with a key command such as <kbd>C-u 7
M-&lt;</kbd> which will move the cursor to a point 70% of the way through the
buffer.  If a number bigger than ten is used for the argument, it moves
to the end of the buffer.

<p>The <code>beginning-of-buffer</code> function can be called with or without an
argument.  The use of the argument is optional.

<ul>
<li><a href="#Optional%20Arguments">Optional Arguments</a>: 
<li><a href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>:   Example with optional argument. 
<li><a href="#beginning-of-buffer%20complete">beginning-of-buffer complete</a>: 
</ul>

<p><hr>
Node:<a name="Optional%20Arguments">Optional Arguments</a>,
Next:<a rel=next href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>,
Previous:<a rel=previous href="#beginning-of-buffer">beginning-of-buffer</a>,
Up:<a rel=up href="#beginning-of-buffer">beginning-of-buffer</a>
<br>

<h3>5.3.1 Optional Arguments</h3>

<p>Unless told otherwise, Lisp expects that a function with an argument in
its function definition will be called with a value for that argument. 
If that does not happen, you get an error and a message that says
<code>Wrong number of arguments</code>.

<p>However, optional arguments are a feature of Lisp: a <dfn>keyword</dfn> may
be used to tell the Lisp interpreter that an argument is optional. 
The keyword is <code>&amp;optional</code>.  (The <code>&amp;</code> in front of
<code>optional</code> is part of the keyword.)  In a function definition, if
an argument follows the keyword <code>&amp;optional</code>, a value does not
need to be passed to that argument when the function is called.

<p>The first line of the function definition of <code>beginning-of-buffer</code>
therefore looks like this:

<pre>(defun beginning-of-buffer (&amp;optional arg)
</pre>

<p>In outline, the whole function looks like this:

<pre>(defun beginning-of-buffer (&amp;optional arg)
  "<var>documentation</var><small>...</small>"
  (interactive "P")
  (push-mark)
  (goto-char
    (<var>if-there-is-an-argument</var>
        <var>figure-out-where-to-go</var>
      <var>else-go-to</var>
      (point-min))))
</pre>

<p>The function is similar to the <code>simplified-beginning-of-buffer</code>
function except that the <code>interactive</code> expression has <code>"P"</code>
as an argument and the <code>goto-char</code> function is followed by an
if-then-else expression that figures out where to put the cursor if
there is an argument.

<p>The <code>"P"</code> in the <code>interactive</code> expression tells Emacs to pass
a prefix argument, if there is one, to the function.  A prefix argument
is made by typing the &lt;META&gt; key followed by a number, or by typing
<kbd>C-u</kbd> and then a number (if you don't type a number, <kbd>C-u</kbd>
defaults to 4).

<p>The true-or-false-test of the <code>if</code> expression is simple: it is
simply the argument <code>arg</code>.  If <code>arg</code> has a value that is not
<code>nil</code>, which will be the case if <code>beginning-of-buffer</code> is
called with an argument, then this true-or-false-test will return true
and the then-part of the <code>if</code> expression will be evaluated.  On the
other hand, if <code>beginning-of-buffer</code> is not called with an
argument, the value of <code>arg</code> will be <code>nil</code> and the else-part
of the <code>if</code> expression will be evaluated.  The else-part is simply
<code>point-min</code>, and when this is the outcome, the whole
<code>goto-char</code> expression is <code>(goto-char (point-min))</code>, which is
how we saw the <code>beginning-of-buffer</code> function in its simplified
form.

<p><hr>
Node:<a name="beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>,
Next:<a rel=next href="#beginning-of-buffer%20complete">beginning-of-buffer complete</a>,
Previous:<a rel=previous href="#Optional%20Arguments">Optional Arguments</a>,
Up:<a rel=up href="#beginning-of-buffer">beginning-of-buffer</a>
<br>

<h3>5.3.2 <code>beginning-of-buffer</code> with an Argument</h3>

<p>When <code>beginning-of-buffer</code> is called with an argument, an
expression is evaluated which calculates what value to pass to
<code>goto-char</code>.  This expression is rather complicated at first sight. 
It includes an inner <code>if</code> expression and much arithmetic.  It looks
like this:

<pre>(if (&gt; (buffer-size) 10000)
    ;; Avoid overflow for large buffer sizes!
    (* (prefix-numeric-value arg) (/ (buffer-size) 10))
  (/
   (+ 10
      (*
       (buffer-size) (prefix-numeric-value arg))) 10))
</pre>

<ul>
<li><a href="#Disentangle%20beginning-of-buffer">Disentangle beginning-of-buffer</a>: 
<li><a href="#Large%20buffer%20case">Large buffer case</a>: 
<li><a href="#Small%20buffer%20case">Small buffer case</a>: 
</ul>

<p><hr>
Node:<a name="Disentangle%20beginning-of-buffer">Disentangle beginning-of-buffer</a>,
Next:<a rel=next href="#Large%20buffer%20case">Large buffer case</a>,
Previous:<a rel=previous href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>,
Up:<a rel=up href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>
<br>

<h4>Disentangle <code>beginning-of-buffer</code></h4>

<p>Like other complex-looking expressions, the conditional expression
within <code>beginning-of-buffer</code> can be disentangled by looking at it
as parts of a template, in this case, the template for an if-then-else
expression.  In skeletal form, the expression looks like this:

<pre>(if (<var>buffer-is-large</var>
    <var>divide-buffer-size-by-10-and-multiply-by-arg</var>
  <var>else-use-alternate-calculation</var>
</pre>

<p>The true-or-false-test of this inner <code>if</code> expression checks the
size of the buffer.  The reason for this is that the old Version 18
Emacs used numbers that are no bigger than eight million or so
and in the computation that followed, the programmer feared that Emacs
might try to use over-large numbers if the buffer were large.  The
term `overflow', mentioned in the comment, means numbers that are over
large.  Version 21 Emacs uses larger numbers, but this code has not
been touched, if only because people now look at buffers that are far,
far larger than ever before.

<p>There are two cases:  if the buffer is large and if it is not.

<p><hr>
Node:<a name="Large%20buffer%20case">Large buffer case</a>,
Next:<a rel=next href="#Small%20buffer%20case">Small buffer case</a>,
Previous:<a rel=previous href="#Disentangle%20beginning-of-buffer">Disentangle beginning-of-buffer</a>,
Up:<a rel=up href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>
<br>

<h4>What happens in a large buffer</h4>

<p>In <code>beginning-of-buffer</code>, the inner <code>if</code> expression tests
whether the size of the buffer is greater than 10,000 characters.  To do
this, it uses the <code>&gt;</code> function and the <code>buffer-size</code> function.

<p>The line looks like this:

<pre>(if (&gt; (buffer-size) 10000)
</pre>

<p>When the buffer is large, the then-part of the <code>if</code> expression is
evaluated.  It reads like this (after formatting for easy reading):

<pre>(*
  (prefix-numeric-value arg)
  (/ (buffer-size) 10))
</pre>

<p>This expression is a multiplication, with two arguments to the function
<code>*</code>.

<p>The first argument is <code>(prefix-numeric-value arg)</code>.  When
<code>"P"</code> is used as the argument for <code>interactive</code>, the value
passed to the function as its argument is passed a "raw prefix
argument", and not a number.  (It is a number in a list.)  To perform
the arithmetic, a conversion is necessary, and
<code>prefix-numeric-value</code> does the job.

<p>The second argument is <code>(/ (buffer-size) 10)</code>.  This expression
divides the numeric value of the buffer by ten.  This produces a number
that tells how many characters make up one tenth of the buffer size. 
(In Lisp, <code>/</code> is used for division, just as <code>*</code> is
used for multiplication.)

<p>In the multiplication expression as a whole, this amount is multiplied
by the value of the prefix argument--the multiplication looks like this:

<pre>(* <var>numeric-value-of-prefix-arg</var>
   <var>number-of-characters-in-one-tenth-of-the-buffer</var>)
</pre>

<p>If, for example, the prefix argument is <code>7</code>, the one-tenth value
will be multiplied by 7 to give a position 70% of the way through the
buffer.

<p>The result of all this is that if the buffer is large, the
<code>goto-char</code> expression reads like this:

<pre>(goto-char (* (prefix-numeric-value arg)
              (/ (buffer-size) 10)))
</pre>

<p>This puts the cursor where we want it.

<p><hr>
Node:<a name="Small%20buffer%20case">Small buffer case</a>,
Previous:<a rel=previous href="#Large%20buffer%20case">Large buffer case</a>,
Up:<a rel=up href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>
<br>

<h4>What happens in a small buffer</h4>

<p>If the buffer contains fewer than 10,000 characters, a slightly
different computation is performed.  You might think this is not
necessary, since the first computation could do the job.  However, in
a small buffer, the first method may not put the cursor on exactly the
desired line; the second method does a better job.

<p>The code looks like this:

<pre>(/ (+ 10 (* (buffer-size) (prefix-numeric-value arg))) 10))
</pre>

<p>This is code in which you figure out what happens by discovering how the
functions are embedded in parentheses.  It is easier to read if you
reformat it with each expression indented more deeply than its
enclosing expression:

<pre>  (/
   (+ 10
      (*
       (buffer-size)
       (prefix-numeric-value arg)))
   10))
</pre>

<p>Looking at parentheses, we see that the innermost operation is
<code>(prefix-numeric-value arg)</code>, which converts the raw argument to a
number.  This number is multiplied by the buffer size in the following
expression:

<pre>(* (buffer-size) (prefix-numeric-value arg)
</pre>

<p>This multiplication creates a number that may be larger than the size of
the buffer--seven times larger if the argument is 7, for example.  Ten
is then added to this number and finally the large number is divided by
ten to provide a value that is one character larger than the percentage
position in the buffer.

<p>The number that results from all this is passed to <code>goto-char</code> and
the cursor is moved to that point.

<p><hr>
Node:<a name="beginning-of-buffer%20complete">beginning-of-buffer complete</a>,
Previous:<a rel=previous href="#beginning-of-buffer%20opt%20arg">beginning-of-buffer opt arg</a>,
Up:<a rel=up href="#beginning-of-buffer">beginning-of-buffer</a>
<br>

<h3>5.3.3 The Complete <code>beginning-of-buffer</code></h3>

<p>Here is the complete text of the <code>beginning-of-buffer</code> function:

<pre>(defun beginning-of-buffer (&amp;optional arg)
  "Move point to the beginning of the buffer;
leave mark at previous position.
With arg N, put point N/10 of the way
from the true beginning.
Don't use this in Lisp programs!
\(goto-char (point-min)) is faster
and does not set the mark."
  (interactive "P")
  (push-mark)
  (goto-char
   (if arg
       (if (&gt; (buffer-size) 10000)
           ;; Avoid overflow for large buffer sizes!
           (* (prefix-numeric-value arg)
              (/ (buffer-size) 10))
         (/ (+ 10 (* (buffer-size)
                     (prefix-numeric-value arg)))
            10))
     (point-min)))
  (if arg (forward-line 1)))
</pre>

<p>Except for two small points, the previous discussion shows how this
function works.  The first point deals with a detail in the
documentation string, and the second point concerns the last line of
the function.

<p>In the documentation string, there is reference to an expression:

<pre>\(goto-char (point-min))
</pre>

<p>A <code>\</code> is used before the first parenthesis of this expression. 
This <code>\</code> tells the Lisp interpreter that the expression should be
printed as shown in the documentation rather than evaluated as a
symbolic expression, which is what it looks like.

<p>Finally, the last line of the <code>beginning-of-buffer</code> command says to
move point to the beginning of the next line if the command is
invoked with an argument:

<pre>(if arg (forward-line 1)))
</pre>

<p>This puts the cursor at the beginning of the first line after the
appropriate tenths position in the buffer.  This is a flourish that
means that the cursor is always located <em>at least</em> the requested
tenths of the way through the buffer, which is a nicety that is,
perhaps, not necessary, but which, if it did not occur, would be sure to
draw complaints.

<p><hr>
Node:<a name="Second%20Buffer%20Related%20Review">Second Buffer Related Review</a>,
Next:<a rel=next href="#optional%20Exercise">optional Exercise</a>,
Previous:<a rel=previous href="#beginning-of-buffer">beginning-of-buffer</a>,
Up:<a rel=up href="#More%20Complex">More Complex</a>
<br>

<h2>5.4 Review</h2>

<p>Here is a brief summary of some of the topics covered in this chapter.

<dl>
<dt><code>or</code>
<dd>Evaluate each argument in sequence, and return the value of the first
argument that is not <code>nil</code>; if none return a value that is not
<code>nil</code>, return <code>nil</code>.  In brief, return the first true value
of the arguments; return a true value if one <em>or</em> any of the
other are true.

<br><dt><code>and</code>
<dd>Evaluate each argument in sequence, and if any are <code>nil</code>, return
<code>nil</code>; if none are <code>nil</code>, return the value of the last
argument.  In brief, return a true value only if all the arguments are
true; return a true value if one <em>and</em> each of the others is
true.

<br><dt><code>&amp;optional</code>
<dd>A keyword used to indicate that an argument to a function definition
is optional; this means that the function can be evaluated without the
argument, if desired.

<br><dt><code>prefix-numeric-value</code>
<dd>Convert the `raw prefix argument' produced by <code>(interactive
"P")</code> to a numeric value.

<br><dt><code>forward-line</code>
<dd>Move point forward to the beginning of the next line, or if the argument
is greater than one, forward that many lines.  If it can't move as far
forward as it is supposed to, <code>forward-line</code> goes forward as far as
it can and then returns a count of the number of additional lines it was
supposed to move but couldn't.

<br><dt><code>erase-buffer</code>
<dd>Delete the entire contents of the current buffer.

<br><dt><code>bufferp</code>
<dd>Return <code>t</code> if its argument is a buffer; otherwise return <code>nil</code>. 
</dl>

<p><hr>
Node:<a name="optional%20Exercise">optional Exercise</a>,
Previous:<a rel=previous href="#Second%20Buffer%20Related%20Review">Second Buffer Related Review</a>,
Up:<a rel=up href="#More%20Complex">More Complex</a>
<br>

<h2>5.5 <code>optional</code> Argument Exercise</h2>

<p>Write an interactive function with an optional argument that tests
whether its argument, a number, is greater or less than the value of
<code>fill-column</code>, and tells you which, in a message.  However, if you
do not pass an argument to the function, use 56 as a default value.

<p><hr>
Node:<a name="Narrowing%20&amp;%20Widening">Narrowing & Widening</a>,
Next:<a rel=next href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>,
Previous:<a rel=previous href="#More%20Complex">More Complex</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>6 Narrowing and Widening</h1>

<p>Narrowing is a feature of Emacs that makes it possible for you to focus
on a specific part of a buffer, and work without accidentally changing
other parts.  Narrowing is normally disabled since it can confuse
novices.

<ul>
<li><a href="#Narrowing%20advantages">Narrowing advantages</a>:         The advantages of narrowing
<li><a href="#save-restriction">save-restriction</a>:             The <code>save-restriction</code> special form. 
<li><a href="#what-line">what-line</a>:                    The number of the line that point is on. 
<li><a href="#narrow%20Exercise">narrow Exercise</a>: 
</ul>

<p><hr>
Node:<a name="Narrowing%20advantages">Narrowing advantages</a>,
Next:<a rel=next href="#save-restriction">save-restriction</a>,
Previous:<a rel=previous href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>,
Up:<a rel=up href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>
<br>

<h2>The Advantages of Narrowing</h2>

<p>With narrowing, the rest of a buffer is made invisible, as if it weren't
there.  This is an advantage if, for example, you want to replace a word
in one part of a buffer but not in another: you narrow to the part you want
and the replacement is carried out only in that section, not in the rest
of the buffer.  Searches will only work within a narrowed region, not
outside of one, so if you are fixing a part of a document, you can keep
yourself from accidentally finding parts you do not need to fix by
narrowing just to the region you want. 
(The key binding for <code>narrow-to-region</code> is <kbd>C-x n n</kbd>.)

<p>However, narrowing does make the rest of the buffer invisible, which
can scare people who inadvertently invoke narrowing and think they
have deleted a part of their file.  Moreover, the <code>undo</code> command
(which is usually bound to <kbd>C-x u</kbd>) does not turn off narrowing
(nor should it), so people can become quite desperate if they do not
know that they can return the rest of a buffer to visibility with the
<code>widen</code> command. 
(The key binding for <code>widen</code> is <kbd>C-x n w</kbd>.)

<p>Narrowing is just as useful to the Lisp interpreter as to a human. 
Often, an Emacs Lisp function is designed to work on just part of a
buffer; or conversely, an Emacs Lisp function needs to work on all of a
buffer that has been narrowed.  The <code>what-line</code> function, for
example, removes the narrowing from a buffer, if it has any narrowing
and when it has finished its job, restores the narrowing to what it was. 
On the other hand, the <code>count-lines</code> function, which is called by
<code>what-line</code>, uses narrowing to restrict itself to just that portion
of the buffer in which it is interested and then restores the previous
situation.

<p><hr>
Node:<a name="save-restriction">save-restriction</a>,
Next:<a rel=next href="#what-line">what-line</a>,
Previous:<a rel=previous href="#Narrowing%20advantages">Narrowing advantages</a>,
Up:<a rel=up href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>
<br>

<h2>6.1 The <code>save-restriction</code> Special Form</h2>

<p>In Emacs Lisp, you can use the <code>save-restriction</code> special form to
keep track of whatever narrowing is in effect, if any.  When the Lisp
interpreter meets with <code>save-restriction</code>, it executes the code
in the body of the <code>save-restriction</code> expression, and then undoes
any changes to narrowing that the code caused.  If, for example, the
buffer is narrowed and the code that follows <code>save-restriction</code>
gets rid of the narrowing, <code>save-restriction</code> returns the buffer
to its narrowed region afterwards.  In the <code>what-line</code> command,
any narrowing the buffer may have is undone by the <code>widen</code>
command that immediately follows the <code>save-restriction</code> command. 
Any original narrowing is restored just before the completion of the
function.

<p>The template for a <code>save-restriction</code> expression is simple:

<pre>(save-restriction
  <var>body</var><small>...</small> )
</pre>

<p>The body of the <code>save-restriction</code> is one or more expressions that
will be evaluated in sequence by the Lisp interpreter.

<p>Finally, a point to note: when you use both <code>save-excursion</code> and
<code>save-restriction</code>, one right after the other, you should use
<code>save-excursion</code> outermost.  If you write them in reverse order,
you may fail to record narrowing in the buffer to which Emacs switches
after calling <code>save-excursion</code>.  Thus, when written together,
<code>save-excursion</code> and <code>save-restriction</code> should be written
like this:

<pre>(save-excursion
  (save-restriction
    <var>body</var><small>...</small>))
</pre>

<p>In other circumstances, when not written together, the
<code>save-excursion</code> and <code>save-restriction</code> special forms must
be written in the order appropriate to the function.

<p>For example,

<pre>  (save-restriction
    (widen)
    (save-excursion
    <var>body</var><small>...</small>))
</pre>

<p><hr>
Node:<a name="what-line">what-line</a>,
Next:<a rel=next href="#narrow%20Exercise">narrow Exercise</a>,
Previous:<a rel=previous href="#save-restriction">save-restriction</a>,
Up:<a rel=up href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>
<br>

<h2>6.2 <code>what-line</code></h2>

<p>The <code>what-line</code> command tells you the number of the line in which
the cursor is located.  The function illustrates the use of the
<code>save-restriction</code> and <code>save-excursion</code> commands.  Here is the
text of the function in full:

<pre>(defun what-line ()
  "Print the current line number (in the buffer) of point."
  (interactive)
  (save-restriction
    (widen)
    (save-excursion
      (beginning-of-line)
      (message "Line %d"
               (1+ (count-lines 1 (point)))))))
</pre>

<p>The function has a documentation line and is interactive, as you would
expect.  The next two lines use the functions <code>save-restriction</code> and
<code>widen</code>.

<p>The <code>save-restriction</code> special form notes whatever narrowing is in
effect, if any, in the current buffer and restores that narrowing after
the code in the body of the <code>save-restriction</code> has been evaluated.

<p>The <code>save-restriction</code> special form is followed by <code>widen</code>. 
This function undoes any narrowing the current buffer may have had
when <code>what-line</code> was called.  (The narrowing that was there is
the narrowing that <code>save-restriction</code> remembers.)  This widening
makes it possible for the line counting commands to count from the
beginning of the buffer.  Otherwise, they would have been limited to
counting within the accessible region.  Any original narrowing is
restored just before the completion of the function by the
<code>save-restriction</code> special form.

<p>The call to <code>widen</code> is followed by <code>save-excursion</code>, which
saves the location of the cursor (i.e., of point) and of the mark, and
restores them after the code in the body of the <code>save-excursion</code>
uses the <code>beginning-of-line</code> function to move point.

<p>(Note that the <code>(widen)</code> expression comes between the
<code>save-restriction</code> and <code>save-excursion</code> special forms.  When
you write the two <code>save- <small>...</small></code> expressions in sequence, write
<code>save-excursion</code> outermost.)

<p>The last two lines of the <code>what-line</code> function are functions to
count the number of lines in the buffer and then print the number in the
echo area.

<pre>(message "Line %d"
         (1+ (count-lines 1 (point)))))))
</pre>

<p>The <code>message</code> function prints a one-line message at the bottom of the
Emacs screen.  The first argument is inside of quotation marks and is
printed as a string of characters.  However, it may contain <code>%d</code>,
<code>%s</code>, or <code>%c</code> to print arguments that follow the string. 
<code>%d</code> prints the argument as a decimal, so the message will say
something such as <code>Line 243</code>.

<p>The number that is printed in place of the <code>%d</code> is computed by the
last line of the function:

<pre>(1+ (count-lines 1 (point)))
</pre>

<p>What this does is count the lines from the first position of the
buffer, indicated by the <code>1</code>, up to <code>(point)</code>, and then add
one to that number.  (The <code>1+</code> function adds one to its
argument.)  We add one to it because line 2 has only one line before
it, and <code>count-lines</code> counts only the lines <em>before</em> the
current line.

<p>After <code>count-lines</code> has done its job, and the message has been
printed in the echo area, the <code>save-excursion</code> restores point and
mark to their original positions; and <code>save-restriction</code> restores
the original narrowing, if any.

<p><hr>
Node:<a name="narrow%20Exercise">narrow Exercise</a>,
Previous:<a rel=previous href="#what-line">what-line</a>,
Up:<a rel=up href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>
<br>

<h2>6.3 Exercise with Narrowing</h2>

<p>Write a function that will display the first 60 characters of the
current buffer, even if you have narrowed the buffer to its latter
half so that the first line is inaccessible.  Restore point, mark,
and narrowing.  For this exercise, you need to use
<code>save-restriction</code>, <code>widen</code>, <code>goto-char</code>,
<code>point-min</code>, <code>buffer-substring</code>, <code>message</code>, and other
functions, a whole potpourri.

<p><hr>
Node:<a name="car%20cdr%20&amp;%20cons">car cdr & cons</a>,
Next:<a rel=next href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>,
Previous:<a rel=previous href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>7 <code>car</code>, <code>cdr</code>, <code>cons</code>: Fundamental Functions</h1>

<p>In Lisp, <code>car</code>, <code>cdr</code>, and <code>cons</code> are fundamental
functions.  The <code>cons</code> function is used to construct lists, and
the <code>car</code> and <code>cdr</code> functions are used to take them apart.

<p>In the walk through of the <code>copy-region-as-kill</code> function, we
will see <code>cons</code> as well as two variants on <code>cdr</code>,
namely, <code>setcdr</code> and <code>nthcdr</code>.  (See <a href="#copy-region-as-kill">copy-region-as-kill</a>.)

<ul>
<li><a href="#Strange%20Names">Strange Names</a>:                An historical aside: why the strange names? 
<li><a href="#car%20&amp;%20cdr">car &amp; cdr</a>:                    Functions for extracting part of a list. 
<li><a href="#cons">cons</a>:                         Constructing a list. 
<li><a href="#nthcdr">nthcdr</a>:                       Calling <code>cdr</code> repeatedly. 
<li><a href="#nth">nth</a>: 
<li><a href="#setcar">setcar</a>:                       Changing the first element of a list. 
<li><a href="#setcdr">setcdr</a>:                       Changing the rest of a list. 
<li><a href="#cons%20Exercise">cons Exercise</a>: 
</ul>

<p><hr>
Node:<a name="Strange%20Names">Strange Names</a>,
Next:<a rel=next href="#car%20&amp;%20cdr">car & cdr</a>,
Previous:<a rel=previous href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>Strange Names</h2>

<p>The name of the <code>cons</code> function is not unreasonable: it is an
abbreviation of the word `construct'.  The origins of the names for
<code>car</code> and <code>cdr</code>, on the other hand, are esoteric: <code>car</code>
is an acronym from the phrase `Contents of the Address part of the
Register'; and <code>cdr</code> (pronounced `could-er') is an acronym from
the phrase `Contents of the Decrement part of the Register'.  These
phrases refer to specific pieces of hardware on the very early
computer on which the original Lisp was developed.  Besides being
obsolete, the phrases have been completely irrelevant for more than 25
years to anyone thinking about Lisp.  Nonetheless, although a few
brave scholars have begun to use more reasonable names for these
functions, the old terms are still in use.  In particular, since the
terms are used in the Emacs Lisp source code, we will use them in this
introduction.

<p><hr>
Node:<a name="car%20&amp;%20cdr">car & cdr</a>,
Next:<a rel=next href="#cons">cons</a>,
Previous:<a rel=previous href="#Strange%20Names">Strange Names</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>7.1 <code>car</code> and <code>cdr</code></h2>

<p>The <small>CAR</small> of a list is, quite simply, the first item in the list. 
Thus the <small>CAR</small> of the list <code>(rose violet daisy buttercup)</code> is
<code>rose</code>.

<p>If you are reading this in Info in GNU Emacs, you can see this by
evaluating the following:

<pre>(car '(rose violet daisy buttercup))
</pre>

<p>After evaluating the expression, <code>rose</code> will appear in the echo
area.

<p>Clearly, a more reasonable name for the <code>car</code> function would be
<code>first</code> and this is often suggested.

<p><code>car</code> does not remove the first item from the list; it only reports
what it is.  After <code>car</code> has been applied to a list, the list is
still the same as it was.  In the jargon, <code>car</code> is
`non-destructive'.  This feature turns out to be important.

<p>The <small>CDR</small> of a list is the rest of the list, that is, the
<code>cdr</code> function returns the part of the list that follows the
first item.  Thus, while the <small>CAR</small> of the list <code>'(rose violet
daisy buttercup)</code> is <code>rose</code>, the rest of the list, the value
returned by the <code>cdr</code> function, is <code>(violet daisy
buttercup)</code>.

<p>You can see this by evaluating the following in the usual way:

<pre>(cdr '(rose violet daisy buttercup))
</pre>

<p>When you evaluate this, <code>(violet daisy buttercup)</code> will appear in
the echo area.

<p>Like <code>car</code>, <code>cdr</code> does not remove any elements from the
list--it just returns a report of what the second and subsequent
elements are.

<p>Incidentally, in the example, the list of flowers is quoted.  If it were
not, the Lisp interpreter would try to evaluate the list by calling
<code>rose</code> as a function.  In this example, we do not want to do that.

<p>Clearly, a more reasonable name for <code>cdr</code> would be <code>rest</code>.

<p>(There is a lesson here: when you name new functions, consider very
carefully what you are doing, since you may be stuck with the names
for far longer than you expect.  The reason this document perpetuates
these names is that the Emacs Lisp source code uses them, and if I did
not use them, you would have a hard time reading the code; but do,
please, try to avoid using these terms yourself.  The people who come
after you will be grateful to you.)

<p>When <code>car</code> and <code>cdr</code> are applied to a list made up of symbols,
such as the list <code>(pine fir oak maple)</code>, the element of the list
returned by the function <code>car</code> is the symbol <code>pine</code> without
any parentheses around it.  <code>pine</code> is the first element in the
list.  However, the <small>CDR</small> of the list is a list itself, <code>(fir
oak maple)</code>, as you can see by evaluating the following expressions in
the usual way:

<pre>(car '(pine fir oak maple))

(cdr '(pine fir oak maple))
</pre>

<p>On the other hand, in a list of lists, the first element is itself a
list.  <code>car</code> returns this first element as a list.  For example,
the following list contains three sub-lists, a list of carnivores, a
list of herbivores and a list of sea mammals:

<pre>(car '((lion tiger cheetah)
       (gazelle antelope zebra)
       (whale dolphin seal)))
</pre>

<p>In this example, the first element or <small>CAR</small> of the list is the list of
carnivores, <code>(lion tiger cheetah)</code>, and the rest of the list is
<code>((gazelle antelope zebra) (whale dolphin seal))</code>.

<pre>(cdr '((lion tiger cheetah)
       (gazelle antelope zebra)
       (whale dolphin seal)))
</pre>

<p>It is worth saying again that <code>car</code> and <code>cdr</code> are
non-destructive--that is, they do not modify or change lists to which
they are applied.  This is very important for how they are used.

<p>Also, in the first chapter, in the discussion about atoms, I said that
in Lisp, "certain kinds of atom, such as an array, can be separated
into parts; but the mechanism for doing this is different from the
mechanism for splitting a list.  As far as Lisp is concerned, the
atoms of a list are unsplittable."  (See <a href="#Lisp%20Atoms">Lisp Atoms</a>.)  The
<code>car</code> and <code>cdr</code> functions are used for splitting lists and
are considered fundamental to Lisp.  Since they cannot split or gain
access to the parts of an array, an array is considered an atom. 
Conversely, the other fundamental function, <code>cons</code>, can put
together or construct a list, but not an array.  (Arrays are handled
by array-specific functions.  See <a href="elisp.html#Arrays">Arrays</a>.)

<p><hr>
Node:<a name="cons">cons</a>,
Next:<a rel=next href="#nthcdr">nthcdr</a>,
Previous:<a rel=previous href="#car%20&amp;%20cdr">car & cdr</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>7.2 <code>cons</code></h2>

<p>The <code>cons</code> function constructs lists; it is the inverse of
<code>car</code> and <code>cdr</code>.  For example, <code>cons</code> can be used to make
a four element list from the three element list, <code>(fir oak maple)</code>:

<pre>(cons 'pine '(fir oak maple))
</pre>

<p>After evaluating this list, you will see

<pre>(pine fir oak maple)
</pre>

<p>appear in the echo area.  <code>cons</code> puts a new element at the
beginning of a list; it attaches or pushes elements onto the list.

<ul>
<li><a href="#Build%20a%20list">Build a list</a>: 
<li><a href="#length">length</a>:                       How to find the length of a list. 
</ul>

<p><hr>
Node:<a name="Build%20a%20list">Build a list</a>,
Next:<a rel=next href="#length">length</a>,
Previous:<a rel=previous href="#cons">cons</a>,
Up:<a rel=up href="#cons">cons</a>
<br>

<h3>Build a list</h3>

<p><code>cons</code> must have a list to attach to.<a rel=footnote href="#fn-6"><sup>6</sup></a>  You
cannot start from absolutely nothing.  If you are building a list, you
need to provide at least an empty list at the beginning.  Here is a
series of <code>cons</code> expressions that build up a list of flowers.  If
you are reading this in Info in GNU Emacs, you can evaluate each of
the expressions in the usual way; the value is printed in this text
after <code>=&gt;</code>, which you may read as `evaluates to'.

<pre>(cons 'buttercup ())
     =&gt; (buttercup)

(cons 'daisy '(buttercup))
     =&gt; (daisy buttercup)

(cons 'violet '(daisy buttercup))
     =&gt; (violet daisy buttercup)

(cons 'rose '(violet daisy buttercup))
     =&gt; (rose violet daisy buttercup)
</pre>

<p>In the first example, the empty list is shown as <code>()</code> and a list
made up of <code>buttercup</code> followed by the empty list is constructed. 
As you can see, the empty list is not shown in the list that was
constructed.  All that you see is <code>(buttercup)</code>.  The empty list is
not counted as an element of a list because there is nothing in an empty
list.  Generally speaking, an empty list is invisible.

<p>The second example, <code>(cons 'daisy '(buttercup))</code> constructs a new,
two element list by putting <code>daisy</code> in front of <code>buttercup</code>;
and the third example constructs a three element list by putting
<code>violet</code> in front of <code>daisy</code> and <code>buttercup</code>.

<p><hr>
Node:<a name="length">length</a>,
Previous:<a rel=previous href="#Build%20a%20list">Build a list</a>,
Up:<a rel=up href="#cons">cons</a>
<br>

<h3>7.2.1 Find the Length of a List: <code>length</code></h3>

<p>You can find out how many elements there are in a list by using the Lisp
function <code>length</code>, as in the following examples:

<pre>(length '(buttercup))
     =&gt; 1

(length '(daisy buttercup))
     =&gt; 2

(length (cons 'violet '(daisy buttercup)))
     =&gt; 3
</pre>

<p>In the third example, the <code>cons</code> function is used to construct a
three element list which is then passed to the <code>length</code> function as
its argument.

<p>We can also use <code>length</code> to count the number of elements in an
empty list:

<pre>(length ())
     =&gt; 0
</pre>

<p>As you would expect, the number of elements in an empty list is zero.

<p>An interesting experiment is to find out what happens if you try to find
the length of no list at all; that is, if you try to call <code>length</code>
without giving it an argument, not even an empty list:

<pre>(length )
</pre>

<p>What you see, if you evaluate this, is the error message

<pre>Wrong number of arguments: #&lt;subr length&gt;, 0
</pre>

<p>This means that the function receives the wrong number of
arguments, zero, when it expects some other number of arguments.  In
this case, one argument is expected, the argument being a list whose
length the function is measuring.  (Note that <em>one</em> list is
<em>one</em> argument, even if the list has many elements inside it.)

<p>The part of the error message that says <code>#&lt;subr length&gt;</code> is the
name of the function.  This is written with a special notation,
<code>#&lt;subr</code>, that indicates that the function <code>length</code> is one
of the primitive functions written in C rather than in Emacs Lisp. 
(<code>subr</code> is an abbreviation for `subroutine'.)  See <a href="elisp.html#What%20Is%20a%20Function%3f">What Is a Function</a>, for more about subroutines.

<p><hr>
Node:<a name="nthcdr">nthcdr</a>,
Next:<a rel=next href="#nth">nth</a>,
Previous:<a rel=previous href="#cons">cons</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>7.3 <code>nthcdr</code></h2>

<p>The <code>nthcdr</code> function is associated with the <code>cdr</code> function. 
What it does is take the <small>CDR</small> of a list repeatedly.

<p>If you take the <small>CDR</small> of the list <code>(pine fir
oak maple)</code>, you will be returned the list <code>(fir oak maple)</code>.  If you
repeat this on what was returned, you will be returned the list
<code>(oak maple)</code>.  (Of course, repeated <small>CDR</small>ing on the original
list will just give you the original <small>CDR</small> since the function does
not change the list.  You need to evaluate the <small>CDR</small> of the
<small>CDR</small> and so on.)  If you continue this, eventually you will be
returned an empty list, which in this case, instead of being shown as
<code>()</code> is shown as <code>nil</code>.

<p>For review, here is a series of repeated <small>CDR</small>s, the text following
the <code>=&gt;</code> shows what is returned.

<pre>(cdr '(pine fir oak maple))
     =&gt;(fir oak maple)

(cdr '(fir oak maple))
     =&gt; (oak maple)

(cdr '(oak maple))
     =&gt;(maple)

(cdr '(maple))
     =&gt; nil

(cdr 'nil)
     =&gt; nil

(cdr ())
     =&gt; nil
</pre>

<p>You can also do several <small>CDR</small>s without printing the values in
between, like this:

<pre>(cdr (cdr '(pine fir oak maple)))
     =&gt; (oak maple)
</pre>

<p>In this example, the Lisp interpreter evaluates the innermost list first. 
The innermost list is quoted, so it just passes the list as it is to the
innermost <code>cdr</code>.  This <code>cdr</code> passes a list made up of the
second and subsequent elements of the list to the outermost <code>cdr</code>,
which produces a list composed of the third and subsequent elements of
the original list.  In this example, the <code>cdr</code> function is repeated
and returns a list that consists of the original list without its
first two elements.

<p>The <code>nthcdr</code> function does the same as repeating the call to
<code>cdr</code>.  In the following example, the argument 2 is passed to the
function <code>nthcdr</code>, along with the list, and the value returned is
the list without its first two items, which is exactly the same
as repeating <code>cdr</code> twice on the list:

<pre>(nthcdr 2 '(pine fir oak maple))
     =&gt; (oak maple)
</pre>

<p>Using the original four element list, we can see what happens when
various numeric arguments are passed to <code>nthcdr</code>, including 0, 1,
and 5:

<pre>;; Leave the list as it was.
(nthcdr 0 '(pine fir oak maple))
     =&gt; (pine fir oak maple)

;; Return a copy without the first element.
(nthcdr 1 '(pine fir oak maple))
     =&gt; (fir oak maple)

;; Return a copy of the list without three elements.
(nthcdr 3 '(pine fir oak maple))
     =&gt; (maple)

;; Return a copy lacking all four elements.
(nthcdr 4 '(pine fir oak maple))
     =&gt; nil

;; Return a copy lacking all elements.
(nthcdr 5 '(pine fir oak maple))
     =&gt; nil
</pre>

<p><hr>
Node:<a name="nth">nth</a>,
Next:<a rel=next href="#setcar">setcar</a>,
Previous:<a rel=previous href="#nthcdr">nthcdr</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>7.4 <code>nth</code></h2>

<p>The <code>nthcdr</code> function takes the <small>CDR</small> of a list repeatedly. 
The <code>nth</code> function takes the <small>CAR</small> of the result returned by
<code>nthcdr</code>.  It returns the Nth element of the list.

<p>Thus, if it were not defined in C for speed, the definition of
<code>nth</code> would be:

<pre>(defun nth (n list)
  "Returns the Nth element of LIST.
N counts from zero.  If LIST is not that long, nil is returned."
  (car (nthcdr n list)))
</pre>

<p>(Originally, <code>nth</code> was defined in Emacs Lisp in <code>subr.el</code>,
but its definition was redone in C in the 1980s.)

<p>The <code>nth</code> function returns a single element of a list. 
This can be very convenient.

<p>Note that the elements are numbered from zero, not one.  That is to
say, the first element of a list, its <small>CAR</small> is the zeroth element. 
This is called `zero-based' counting and often bothers people who
are accustomed to the first element in a list being number one, which
is `one-based'.

<p>For example:

<pre>(nth 0 '("one" "two" "three"))
    =&gt; "one"

(nth 1 '("one" "two" "three"))
    =&gt; "two"
</pre>

<p>It is worth mentioning that <code>nth</code>, like <code>nthcdr</code> and
<code>cdr</code>, does not change the original list--the function is
non-destructive.  This is in sharp contrast to the <code>setcar</code> and
<code>setcdr</code> functions.

<p><hr>
Node:<a name="setcar">setcar</a>,
Next:<a rel=next href="#setcdr">setcdr</a>,
Previous:<a rel=previous href="#nth">nth</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>7.5 <code>setcar</code></h2>

<p>As you might guess from their names, the <code>setcar</code> and <code>setcdr</code>
functions set the <small>CAR</small> or the <small>CDR</small> of a list to a new value. 
They actually change the original list, unlike <code>car</code> and <code>cdr</code>
which leave the original list as it was.  One way to find out how this
works is to experiment.  We will start with the <code>setcar</code> function.

<p>First, we can make a list and then set the value of a variable to the
list, using the <code>setq</code> function.  Here is a list of animals:

<pre>(setq animals '(antelope giraffe lion tiger))
</pre>

<p>If you are reading this in Info inside of GNU Emacs, you can evaluate
this expression in the usual fashion, by positioning the cursor after
the expression and typing <kbd>C-x C-e</kbd>.  (I'm doing this right here as
I write this.  This is one of the advantages of having the interpreter
built into the computing environment.)

<p>When we evaluate the variable <code>animals</code>, we see that it is bound to
the list <code>(antelope giraffe lion tiger)</code>:

<pre>animals
     =&gt; (antelope giraffe lion tiger)
</pre>

<p>Put another way, the variable <code>animals</code> points to the list
<code>(antelope giraffe lion tiger)</code>.

<p>Next, evaluate the function <code>setcar</code> while passing it two
arguments, the variable <code>animals</code> and the quoted symbol
<code>hippopotamus</code>; this is done by writing the three element list
<code>(setcar animals 'hippopotamus)</code> and then evaluating it in the
usual fashion:

<pre>(setcar animals 'hippopotamus)
</pre>

<p>After evaluating this expression, evaluate the variable <code>animals</code>
again.  You will see that the list of animals has changed:

<pre>animals
     =&gt; (hippopotamus giraffe lion tiger)
</pre>

<p>The first element on the list, <code>antelope</code> is replaced by
<code>hippopotamus</code>.

<p>So we can see that <code>setcar</code> did not add a new element to the list
as <code>cons</code> would have; it replaced <code>giraffe</code> with
<code>hippopotamus</code>; it <em>changed</em> the list.

<p><hr>
Node:<a name="setcdr">setcdr</a>,
Next:<a rel=next href="#cons%20Exercise">cons Exercise</a>,
Previous:<a rel=previous href="#setcar">setcar</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>7.6 <code>setcdr</code></h2>

<p>The <code>setcdr</code> function is similar to the <code>setcar</code> function,
except that the function replaces the second and subsequent elements of
a list rather than the first element.

<p>To see how this works, set the value of the variable to a list of
domesticated animals by evaluating the following expression:

<pre>(setq domesticated-animals '(horse cow sheep goat))
</pre>

<p>If you now evaluate the list, you will be returned the list
<code>(horse cow sheep goat)</code>:

<pre>domesticated-animals
     =&gt; (horse cow sheep goat)
</pre>

<p>Next, evaluate <code>setcdr</code> with two arguments, the name of the
variable which has a list as its value, and the list to which the
<small>CDR</small> of the first list will be set;

<pre>(setcdr domesticated-animals '(cat dog))
</pre>

<p>If you evaluate this expression, the list <code>(cat dog)</code> will appear
in the echo area.  This is the value returned by the function.  The
result we are interested in is the "side effect", which we can see by
evaluating the variable <code>domesticated-animals</code>:

<pre>domesticated-animals
     =&gt; (horse cat dog)
</pre>

<p>Indeed, the list is changed from <code>(horse cow sheep goat)</code> to
<code>(horse cat dog)</code>.  The <small>CDR</small> of the list is changed from
<code>(cow sheep goat)</code> to <code>(cat dog)</code>.

<p><hr>
Node:<a name="cons%20Exercise">cons Exercise</a>,
Previous:<a rel=previous href="#setcdr">setcdr</a>,
Up:<a rel=up href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<br>

<h2>7.7 Exercise</h2>

<p>Construct a list of four birds by evaluating several expressions with
<code>cons</code>.  Find out what happens when you <code>cons</code> a list onto
itself.  Replace the first element of the list of four birds with a
fish.  Replace the rest of that list with a list of other fish. 
<p><hr>
Node:<a name="Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>,
Next:<a rel=next href="#List%20Implementation">List Implementation</a>,
Previous:<a rel=previous href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>8 Cutting and Storing Text</h1>

<p>Whenever you cut or clip text out of a buffer with a `kill' command in
GNU Emacs, it is stored in a list and you can bring it back with a
`yank' command.

<p>(The use of the word `kill' in Emacs for processes which specifically
<em>do not</em> destroy the values of the entities is an unfortunate
historical accident.  A much more appropriate word would be `clip' since
that is what the kill commands do; they clip text out of a buffer and
put it into storage from which it can be brought back.  I have often
been tempted to replace globally all occurrences of `kill' in the Emacs
sources with `clip' and all occurrences of `killed' with `clipped'.)

<ul>
<li><a href="#Storing%20Text">Storing Text</a>:                 Text is stored in a list. 
<li><a href="#zap-to-char">zap-to-char</a>:                  Cutting out text up to a character. 
<li><a href="#kill-region">kill-region</a>:                  Cutting text out of a region. 
<li><a href="#Digression%20into%20C">Digression into C</a>:            Minor note on C programming language macros. 
<li><a href="#defvar">defvar</a>:                       How to give a variable an initial value. 
<li><a href="#copy-region-as-kill">copy-region-as-kill</a>:          A definition for copying text. 
<li><a href="#cons%20&amp;%20search-fwd%20Review">cons &amp; search-fwd Review</a>: 
<li><a href="#search%20Exercises">search Exercises</a>: 
</ul>

<p><hr>
Node:<a name="Storing%20Text">Storing Text</a>,
Next:<a rel=next href="#zap-to-char">zap-to-char</a>,
Previous:<a rel=previous href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>Storing Text in a List</h2>

<p>When text is cut out of a buffer, it is stored on a list.  Successive
pieces of text are stored on the list successively, so the list might
look like this:

<pre>("a piece of text" "previous piece")
</pre>

<p>The function <code>cons</code> can be used to add a piece of text to the list,
like this:

<pre>(cons "another piece"
      '("a piece of text" "previous piece"))
</pre>

<p>If you evaluate this expression, a list of three elements will appear in
the echo area:

<pre>("another piece" "a piece of text" "previous piece")
</pre>

<p>With the <code>car</code> and <code>nthcdr</code> functions, you can retrieve
whichever piece of text you want.  For example, in the following code,
<code>nthcdr 1 <small>...</small></code> returns the list with the first item removed;
and the <code>car</code> returns the first element of that remainder--the
second element of the original list:

<pre>(car (nthcdr 1 '("another piece"
                 "a piece of text"
                 "previous piece")))
     =&gt; "a piece of text"
</pre>

<p>The actual functions in Emacs are more complex than this, of course. 
The code for cutting and retrieving text has to be written so that
Emacs can figure out which element in the list you want--the first,
second, third, or whatever.  In addition, when you get to the end of
the list, Emacs should give you the first element of the list, rather
than nothing at all.

<p>The list that holds the pieces of text is called the <dfn>kill ring</dfn>. 
This chapter leads up to a description of the kill ring and how it is
used by first tracing how the <code>zap-to-char</code> function works.  This
function uses (or `calls') a function that invokes a function that
manipulates the kill ring.  Thus, before reaching the mountains, we
climb the foothills.

<p>A subsequent chapter describes how text that is cut from the buffer is
retrieved.  See <a href="#Yanking">Yanking Text Back</a>.

<p><hr>
Node:<a name="zap-to-char">zap-to-char</a>,
Next:<a rel=next href="#kill-region">kill-region</a>,
Previous:<a rel=previous href="#Storing%20Text">Storing Text</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>8.1 <code>zap-to-char</code></h2>

<p>The <code>zap-to-char</code> function barely changed between GNU Emacs
version 19 and GNU Emacs version 21.  However, <code>zap-to-char</code>
calls another function, <code>kill-region</code>, which enjoyed a major rewrite
on the way to version 21.

<p>The <code>kill-region</code> function in Emacs 19 is complex, but does not
use code that is important at this time.  We will skip it.

<p>The <code>kill-region</code> function in Emacs 21 is easier to read than the
same function in Emacs 19 and introduces a very important concept,
that of error handling.  We will walk through the function.

<p>But first, let us look at the interactive <code>zap-to-char</code> function.

<ul>
<li><a href="#Complete%20zap-to-char">Complete zap-to-char</a>:         The complete implementation. 
<li><a href="#zap-to-char%20interactive">zap-to-char interactive</a>:      A three part interactive expression. 
<li><a href="#zap-to-char%20body">zap-to-char body</a>:             A short overview. 
<li><a href="#search-forward">search-forward</a>:               How to search for a string. 
<li><a href="#progn">progn</a>:                        The <code>progn</code> special form. 
<li><a href="#Summing%20up%20zap-to-char">Summing up zap-to-char</a>:       Using <code>point</code> and <code>search-forward</code>. 
</ul>

<p><hr>
Node:<a name="Complete%20zap-to-char">Complete zap-to-char</a>,
Next:<a rel=next href="#zap-to-char%20interactive">zap-to-char interactive</a>,
Previous:<a rel=previous href="#zap-to-char">zap-to-char</a>,
Up:<a rel=up href="#zap-to-char">zap-to-char</a>
<br>

<h3>The Complete <code>zap-to-char</code> Implementation</h3>

<p>The GNU Emacs version 19 and version 21 implementations of the
<code>zap-to-char</code> function are nearly identical in form, and they
work alike.  The function removes the text in the region between the
location of the cursor (i.e., of point) up to and including the next
occurrence of a specified character.  The text that <code>zap-to-char</code>
removes is put in the kill ring; and it can be retrieved from the kill
ring by typing <kbd>C-y</kbd> (<code>yank</code>).  If the command is given an
argument, it removes text through that number of occurrences.  Thus,
if the cursor were at the beginning of this sentence and the character
were <code>s</code>, <code>Thus</code> would be removed.  If the argument were
two, <code>Thus, if the curs</code> would be removed, up to and including
the <code>s</code> in <code>cursor</code>.

<p>If the specified character is not found, <code>zap-to-char</code> will say
"Search failed", tell you the character you typed, and not remove
any text.

<p>In order to determine how much text to remove, <code>zap-to-char</code> uses
a search function.  Searches are used extensively in code that
manipulates text, and we will focus attention on them as well as on the
deletion command.

<p>Here is the complete text of the version 19 implementation of the function:

<pre>(defun zap-to-char (arg char)  ; version 19 implementation
  "Kill up to and including ARG'th occurrence of CHAR.
Goes backward if ARG is negative; error if CHAR not found."
  (interactive "*p\ncZap to char: ")
  (kill-region (point)
               (progn
                 (search-forward
                  (char-to-string char) nil nil arg)
                 (point))))
</pre>

<p><hr>
Node:<a name="zap-to-char%20interactive">zap-to-char interactive</a>,
Next:<a rel=next href="#zap-to-char%20body">zap-to-char body</a>,
Previous:<a rel=previous href="#Complete%20zap-to-char">Complete zap-to-char</a>,
Up:<a rel=up href="#zap-to-char">zap-to-char</a>
<br>

<h3>8.1.1 The <code>interactive</code> Expression</h3>

<p>The interactive expression in the <code>zap-to-char</code> command looks like
this:

<pre>(interactive "*p\ncZap to char: ")
</pre>

<p>The part within quotation marks, <code>"*p\ncZap to char: "</code>, specifies
three different things.  First, and most simply, the asterisk, <code>*</code>,
causes an error to be signalled if the buffer is read-only.  This means that
if you try <code>zap-to-char</code> in a read-only buffer you will not be able to
remove text, and you will receive a message that says "Buffer is
read-only"; your terminal may beep at you as well.

<p>The version 21 implementation does not have the asterisk, <code>*</code>.  The
function works the same as in version 19: in both cases, it cannot
remove text from a read-only buffer but the function does copy the
text that would have been removed to the kill ring.  Also, in both
cases, you see an error message.

<p>However, the version 19 implementation copies text from a read-only
buffer only because of a mistake in the implementation of
<code>interactive</code>.  According to the documentation for
<code>interactive</code>, the asterisk, <code>*</code>, should prevent the
<code>zap-to-char</code> function from doing anything at all when the buffer
is read only.  The function should not copy the text to the kill ring. 
It is a bug that it does.

<p>In version 21, <code>interactive</code> is implemented correctly.  So the
asterisk, <code>*</code>, had to be removed from the interactive
specification.  If you insert an <code>*</code> and evaluate the function
definition, then the next time you run the <code>zap-to-char</code> function
on a read-only buffer, you will not copy any text.

<p>That change aside, and a change to the documentation, the two versions
of the  <code>zap-to-char</code> function are identical.

<p>Let us continue with the interactive specification.

<p>The second part of <code>"*p\ncZap to char: "</code> is the <code>p</code>. 
This part is separated from the next part by a newline, <code>\n</code>. 
The <code>p</code> means that the first argument to the function will be
passed the value of a `processed prefix'.  The prefix argument is
passed by typing <kbd>C-u</kbd> and a number, or <kbd>M-</kbd> and a number.  If
the function is called interactively without a prefix, 1 is passed to
this argument.

<p>The third part of <code>"*p\ncZap to char: "</code> is <code>cZap to char:
</code>.  In this part, the lower case <code>c</code> indicates that
<code>interactive</code> expects a prompt and that the argument will be a
character.  The prompt follows the <code>c</code> and is the string <code>Zap
to char: </code> (with a space after the colon to make it look good).

<p>What all this does is prepare the arguments to <code>zap-to-char</code> so they
are of the right type, and give the user a prompt.

<p><hr>
Node:<a name="zap-to-char%20body">zap-to-char body</a>,
Next:<a rel=next href="#search-forward">search-forward</a>,
Previous:<a rel=previous href="#zap-to-char%20interactive">zap-to-char interactive</a>,
Up:<a rel=up href="#zap-to-char">zap-to-char</a>
<br>

<h3>8.1.2 The Body of <code>zap-to-char</code></h3>

<p>The body of the <code>zap-to-char</code> function contains the code that
kills (that is, removes) the text in the region from the current
position of the cursor up to and including the specified character. 
The first part of the code looks like this:

<pre>(kill-region (point) <small>...</small>
</pre>

<p><code>(point)</code> is the current position of the cursor.

<p>The next part of the code is an expression using <code>progn</code>.  The body
of the <code>progn</code> consists of calls to <code>search-forward</code> and
<code>point</code>.

<p>It is easier to understand how <code>progn</code> works after learning about
<code>search-forward</code>, so we will look at <code>search-forward</code> and
then at <code>progn</code>.

<p><hr>
Node:<a name="search-forward">search-forward</a>,
Next:<a rel=next href="#progn">progn</a>,
Previous:<a rel=previous href="#zap-to-char%20body">zap-to-char body</a>,
Up:<a rel=up href="#zap-to-char">zap-to-char</a>
<br>

<h3>8.1.3 The <code>search-forward</code> Function</h3>

<p>The <code>search-forward</code> function is used to locate the
zapped-for-character in <code>zap-to-char</code>.  If the search is
successful, <code>search-forward</code> leaves point immediately after the
last character in the target string.  (In <code>zap-to-char</code>, the
target string is just one character long.)  If the search is
backwards, <code>search-forward</code> leaves point just before the first
character in the target.  Also, <code>search-forward</code> returns <code>t</code>
for true.  (Moving point is therefore a `side effect'.)

<p>In <code>zap-to-char</code>, the <code>search-forward</code> function looks like this:

<pre>(search-forward (char-to-string char) nil nil arg)
</pre>

<p>The <code>search-forward</code> function takes four arguments:

<ol type=1 start=1>
</p><li>The first argument is the target, what is searched for.  This must be a
string, such as <code>"z"</code>.

<p>As it happens, the argument passed to <code>zap-to-char</code> is a single
character.  Because of the way computers are built, the Lisp
interpreter may treat a single character as being different from a
string of characters.  Inside the computer, a single character has a
different electronic format than a string of one character.  (A single
character can often be recorded in the computer using exactly one
byte; but a string may be longer, and the computer needs to be ready
for this.)  Since the <code>search-forward</code> function searches for a
string, the character that the <code>zap-to-char</code> function receives as
its argument must be converted inside the computer from one format to
the other; otherwise the <code>search-forward</code> function will fail. 
The <code>char-to-string</code> function is used to make this conversion.

</p><li>The second argument bounds the search; it is specified as a position in
the buffer.  In this case, the search can go to the end of the buffer,
so no bound is set and the second argument is <code>nil</code>.

<li>The third argument tells the function what it should do if the search
fails--it can signal an error (and print a message) or it can return
<code>nil</code>.  A <code>nil</code> as the third argument causes the function to
signal an error when the search fails.

<li>The fourth argument to <code>search-forward</code> is the repeat count--how
many occurrences of the string to look for.  This argument is optional
and if the function is called without a repeat count, this argument is
passed the value 1.  If this argument is negative, the search goes
backwards.
</ol>

<p>In template form, a <code>search-forward</code> expression looks like this:

<pre>(search-forward "<var>target-string</var>"
                <var>limit-of-search</var>
                <var>what-to-do-if-search-fails</var>
                <var>repeat-count</var>)
</pre>

<p>We will look at <code>progn</code> next.

<p><hr>
Node:<a name="progn">progn</a>,
Next:<a rel=next href="#Summing%20up%20zap-to-char">Summing up zap-to-char</a>,
Previous:<a rel=previous href="#search-forward">search-forward</a>,
Up:<a rel=up href="#zap-to-char">zap-to-char</a>
<br>

<h3>8.1.4 The <code>progn</code> Special Form</h3>

<p><code>progn</code> is a special form that causes each of its arguments to be
evaluated in sequence and then returns the value of the last one.  The
preceding expressions are evaluated only for the side effects they
perform.  The values produced by them are discarded.

<p>The template for a <code>progn</code> expression is very simple:

<pre>(progn
  <var>body</var><small>...</small>)
</pre>

<p>In <code>zap-to-char</code>, the <code>progn</code> expression has to do two things:
put point in exactly the right position; and return the location of
point so that <code>kill-region</code> will know how far to kill to.

<p>The first argument to the <code>progn</code> is <code>search-forward</code>.  When
<code>search-forward</code> finds the string, the function leaves point
immediately after the last character in the target string.  (In this
case the target string is just one character long.)  If the search is
backwards, <code>search-forward</code> leaves point just before the first
character in the target.  The movement of point is a side effect.

<p>The second and last argument to <code>progn</code> is the expression
<code>(point)</code>.  This expression returns the value of point, which in
this case will be the location to which it has been moved by
<code>search-forward</code>.  This value is returned by the <code>progn</code>
expression and is passed to <code>kill-region</code> as <code>kill-region</code>'s
second argument.

<p><hr>
Node:<a name="Summing%20up%20zap-to-char">Summing up zap-to-char</a>,
Previous:<a rel=previous href="#progn">progn</a>,
Up:<a rel=up href="#zap-to-char">zap-to-char</a>
<br>

<h3>8.1.5 Summing up <code>zap-to-char</code></h3>

<p>Now that we have seen how <code>search-forward</code> and <code>progn</code> work,
we can see how the <code>zap-to-char</code> function works as a whole.

<p>The first argument to <code>kill-region</code> is the position of the cursor
when the <code>zap-to-char</code> command is given--the value of point at
that time.  Within the <code>progn</code>, the search function then moves
point to just after the zapped-to-character and <code>point</code> returns the
value of this location.  The <code>kill-region</code> function puts together
these two values of point, the first one as the beginning of the region
and the second one as the end of the region, and removes the region.

<p>The <code>progn</code> special form is necessary because the <code>kill-region</code>
command takes two arguments; and it would fail if <code>search-forward</code>
and <code>point</code> expressions were  written in sequence as two
additional arguments.  The <code>progn</code> expression is a single argument
to <code>kill-region</code> and returns the one value that <code>kill-region</code>
needs for its second argument.

<p><hr>
Node:<a name="kill-region">kill-region</a>,
Next:<a rel=next href="#Digression%20into%20C">Digression into C</a>,
Previous:<a rel=previous href="#zap-to-char">zap-to-char</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>8.2 <code>kill-region</code></h2>

<p>The <code>zap-to-char</code> function uses the <code>kill-region</code> function. 
This function clips text from a region and copies that text to
the kill ring, from which it may be retrieved.

<p>The Emacs 21 version of that function uses <code>condition-case</code> and
<code>copy-region-as-kill</code>, both of which we will explain. 
<code>condition-case</code> is an important special form.

<p>In essence, the <code>kill-region</code> function calls
<code>condition-case</code>, which takes three arguments.  In this function,
the first argument does nothing.  The second argument contains the
code that does the work when all goes well.  The third argument
contains the code that is called in the event of an error.

<ul>
<li><a href="#Complete%20kill-region">Complete kill-region</a>:         The function definition. 
<li><a href="#condition-case">condition-case</a>:               Dealing with a problem. 
<li><a href="#delete-and-extract-region">delete-and-extract-region</a>:    Doing the work. 
</ul>

<p><hr>
Node:<a name="Complete%20kill-region">Complete kill-region</a>,
Next:<a rel=next href="#condition-case">condition-case</a>,
Previous:<a rel=previous href="#kill-region">kill-region</a>,
Up:<a rel=up href="#kill-region">kill-region</a>
<br>

<h3>The Complete <code>kill-region</code> Definition</h3>

<p>We will go through the <code>condition-case</code> code in a moment.  First,
let us look at the complete definition of <code>kill-region</code>, with
comments added:

<pre>(defun kill-region (beg end)
  "Kill between point and mark.
The text is deleted but saved in the kill ring."
  (interactive "r")

  ;; 1. `condition-case' takes three arguments.
  ;;    If the first argument is nil, as it is here,
  ;;    information about the error signal is not
  ;;    stored for use by another function.
  (condition-case nil

      ;; 2. The second argument to `condition-case'
      ;;    tells the Lisp interpreter what to do when all goes well.

      ;;    The `delete-and-extract-region' function usually does the
      ;;    work.  If the beginning and ending of the region are both
      ;;    the same, then the variable `string' will be empty, or nil
      (let ((string (delete-and-extract-region beg end)))

        ;; `when' is an `if' clause that cannot take an `else-part'.
        ;; Emacs normally sets the value of `last-command' to the
        ;; previous command.
        ;; `kill-append' concatenates the new string and the old.
        ;; `kill-new' inserts text into a new item in the kill ring.
        (when string
          (if (eq last-command 'kill-region)
              ;; if true, prepend string
              (kill-append string (&lt; end beg))
            (kill-new string)))
        (setq this-command 'kill-region))

    ;; 3. The third argument to `condition-case' tells the interpreter
    ;;    what to do with an error.
    ;;    The third argument has a conditions part and a body part.
    ;;    If the conditions are met (in this case,
    ;;             if text or buffer is read-only)
    ;;    then the body is executed.
    ((buffer-read-only text-read-only) ;; this is the if-part
     ;; then...
     (copy-region-as-kill beg end)
     (if kill-read-only-ok            ;; usually this variable is nil
         (message "Read only text copied to kill ring")
       ;; or else, signal an error if the buffer is read-only;
       (barf-if-buffer-read-only)
       ;; and, in any case, signal that the text is read-only.
       (signal 'text-read-only (list (current-buffer)))))))
</pre>

<p><hr>
Node:<a name="condition-case">condition-case</a>,
Next:<a rel=next href="#delete-and-extract-region">delete-and-extract-region</a>,
Previous:<a rel=previous href="#Complete%20kill-region">Complete kill-region</a>,
Up:<a rel=up href="#kill-region">kill-region</a>
<br>

<h3>8.2.1 <code>condition-case</code></h3>

<p>As we have seen earlier (see <a href="#Making%20Errors">Generate an Error Message</a>), when the Emacs Lisp interpreter has trouble evaluating an
expression, it provides you with help; in the jargon, this is called
"signaling an error".  Usually, the computer stops the program and
shows you a message.

<p>However, some programs undertake complicated actions.  They should not
simply stop on an error.  In the <code>kill-region</code> function, the most
likely error is that you will try to kill text that is read-only and
cannot be removed.  So the <code>kill-region</code> function contains code
to handle this circumstance.  This code, which makes up the body of
the <code>kill-region</code> function, is inside of a <code>condition-case</code>
special form.

<p>The template for <code>condition-case</code> looks like this:

<pre>(condition-case
  <var>var</var>
  <var>bodyform</var>
  <var>error-handler</var><small>...</small>)
</pre>

<p>The second argument, <var>bodyform</var>, is straightforward.  The
<code>condition-case</code> special form causes the Lisp interpreter to
evaluate the code in <var>bodyform</var>.  If no error occurs, the special
form returns the code's value and produces the side-effects, if any.

<p>In short, the <var>bodyform</var> part of a <code>condition-case</code>
expression determines what should happen when everything works
correctly.

<p>However, if an error occurs, among its other actions, the function
generating the error signal will define one or more error condition
names.

<p>An error handler is the third argument to <code>condition case</code>. 
An error handler has two parts, a <var>condition-name</var> and a
<var>body</var>.  If the <var>condition-name</var> part of an error handler
matches a condition name generated by an error, then the <var>body</var>
part of the error handler is run.

<p>As you will expect, the <var>condition-name</var> part of an error handler
may be either a single condition name or a list of condition names.

<p>Also, a complete <code>condition-case</code> expression may contain more
than one error handler.  When an error occurs, the first applicable
handler is run.

<p>Lastly, the first argument to the <code>condition-case</code> expression,
the <var>var</var> argument, is sometimes bound to a variable that
contains information about the error.  However, if that argument is
nil, as is the case in <code>kill-region</code>, that information is
discarded.

<p>In brief, in the <code>kill-region</code> function, the code
<code>condition-case</code> works like this:

<pre><var>If no errors</var>, <var>run only this code</var>
    <var>but</var>, <var>if errors</var>, <var>run this other code</var>.
</pre>

<p><hr>
Node:<a name="delete-and-extract-region">delete-and-extract-region</a>,
Previous:<a rel=previous href="#condition-case">condition-case</a>,
Up:<a rel=up href="#kill-region">kill-region</a>
<br>

<h3>8.2.2 <code>delete-and-extract-region</code></h3>

<p>A <code>condition-case</code> expression has two parts, a part that is
evaluated in the expectation that all will go well, but which may
generate an error; and a part that is evaluated when there is an
error.

<p>First, let us look at the code in <code>kill-region</code> that is run in
the expectation that all goes well.  This is the core of the function. 
The code looks like this:

<pre>(let ((string (delete-and-extract-region beg end)))
  (when string
    (if (eq last-command 'kill-region)
        (kill-append string (&lt; end beg))
      (kill-new string)))
  (setq this-command 'kill-region))
</pre>

<p>It looks complicated because we have the new functions
<code>delete-and-extract-region</code>, <code>kill-append</code>, and
<code>kill-new</code> as well as the new variables,
<code>last-command</code> and <code>this-command</code>.

<p>The <code>delete-and-extract-region</code> function is straightforward.  It
is a built-in function that deletes the text in a region (a side
effect) and also returns that text.  This is the function that
actually removes the text.  (And if it cannot do that, it signals the
error.)

<p>In this <code>let</code> expression, the text that
<code>delete-and-extract-region</code> returns is placed in the local
variable called <code>string</code>.  This is the text that is removed from
the buffer.  (To be more precise, the variable is set to point to the
address of the extracted text; to say it is `placed in' the variable
is simply a shorthand.)

<p>If the variable <code>string</code> does point to text, that text is added
to the kill ring.  The variable will have a <code>nil</code> value if no
text was removed.

<p>The code uses <code>when</code> to determine whether the variable
<code>string</code> points to text.  A <code>when</code> statement is simply a
programmers' convenience.  A <code>when</code> statement is an <code>if</code>
statement without the possibility of an else clause.  In your mind, you
can replace <code>when</code> with <code>if</code> and understand what goes on. 
That is what the Lisp interpreter does.

<p>Technically speaking, <code>when</code> is a Lisp macro.  A Lisp <dfn>macro</dfn>
enables you to define new control constructs and other language
features.  It tells the interpreter how to compute another Lisp
expression which will in turn compute the value.  In this case, the
`other expression' is an <code>if</code> expression.  For more about Lisp
macros, see <a href="elisp.html#Macros">Macros</a>.  The C programming language also provides macros.  These are
different, but also useful.  We will briefly look at C macros in
<a href="#Digression%20into%20C"><code>delete-and-extract-region</code>: Digressing into C</a>.

<p>If the string has content, then another conditional expression is
executed.  This is an <code>if</code> with both a then-part and an else-part.

<pre>(if (eq last-command 'kill-region)
    (kill-append string (&lt; end beg))
  (kill-new string)))
</pre>

<p>The then-part is evaluated if the previous command was another call to
<code>kill-region</code>; if not, the else-part is evaluated.

<p><code>last-command</code> is a variable that comes with Emacs that we have
not seen before.  Normally, whenever a function is executed, Emacs
sets the value of <code>last-command</code> to the previous command.

<p>In this segment of the definition, the <code>if</code> expression checks
whether the previous command was <code>kill-region</code>.  If it was,

<pre>(kill-append string (&lt; end beg))
</pre>

<p>concatenates a copy of the newly clipped text to the just previously
clipped text in the kill ring.  (If the <code>(&lt;&nbsp;end&nbsp;beg))</code>
expression is true, <code>kill-append</code> prepends the string to the just
previously clipped text.  For a detailed discussion, see
<a href="#kill-append%20function">The <code>kill-append</code> function</a>.)

<p>If you then yank back the text, i.e., `paste' it, you get both
pieces of text at once.  That way, if you delete two words in a row,
and then yank them back, you get both words, in their proper order,
with one yank.  (The <code>(&lt;&nbsp;end&nbsp;beg))</code> expression makes sure the
order is correct.)

<p>On the other hand, if the previous command is not <code>kill-region</code>,
then the <code>kill-new</code> function is called, which adds the text to
the kill ring as the latest item, and sets the
<code>kill-ring-yank-pointer</code> variable to point to it.

<p><hr>
Node:<a name="Digression%20into%20C">Digression into C</a>,
Next:<a rel=next href="#defvar">defvar</a>,
Previous:<a rel=previous href="#kill-region">kill-region</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>8.3 <code>delete-and-extract-region</code>: Digressing into C</h2>

<p>The <code>zap-to-char</code> command uses the
<code>delete-and-extract-region</code> function, which in turn uses two
other functions, <code>copy-region-as-kill</code> and
<code>del_range_1</code>.  The <code>copy-region-as-kill</code> function will be
described in a following section; it puts a copy of the region in the
kill ring so it can be yanked back.  (See <a href="#copy-region-as-kill"><code>copy-region-as-kill</code></a>.)

<p>The <code>delete-and-extract-region</code> function removes the contents of
a region and you cannot get them back.

<p>Unlike the other code discussed here, <code>delete-and-extract-region</code>
is not written in Emacs Lisp; it is written in C and is one of the
primitives of the GNU Emacs system.  Since it is very simple, I will
digress briefly from Lisp and describe it here.

<p>Like many of the other Emacs primitives,
<code>delete-and-extract-region</code> is written as an instance of a C
macro, a macro being a template for code.  The complete macro looks
like this:

<pre>DEFUN ("delete-and-extract-region", Fdelete_and_extract_region,
       Sdelete_and_extract_region, 2, 2, 0,
  "Delete the text between START and END and return it.")
  (start, end)
     Lisp_Object start, end;
{
  validate_region (&amp;start, &amp;end);
  return del_range_1 (XINT (start), XINT (end), 1, 1);
}
</pre>

<p>Without going into the details of the macro writing process, let me
point out that this macro starts with the word <code>DEFUN</code>.  The word
<code>DEFUN</code> was chosen since the code serves the same purpose as
<code>defun</code> does in Lisp.  The word <code>DEFUN</code> is followed by seven
parts inside of parentheses:

<ul>
<li>The first part is the name given to the function in Lisp,
<code>delete-and-extract-region</code>.

<li>The second part is the name of the function in C,
<code>Fdelete_and_extract_region</code>.  By convention, it starts with
<code>F</code>.  Since C does not use hyphens in names, underscores are used
instead.

<li>The third part is the name for the C constant structure that records
information on this function for internal use.  It is the name of the
function in C but begins with an <code>S</code> instead of an <code>F</code>.

<li>The fourth and fifth parts specify the minimum and maximum number of
arguments the function can have.  This function demands exactly 2
arguments.

<li>The sixth part is nearly like the argument that follows the
<code>interactive</code> declaration in a function written in Lisp: a letter
followed, perhaps, by a prompt.  The only difference from the Lisp is
when the macro is called with no arguments.  Then you write a <code>0</code>
(which is a `null string'), as in this macro.

<p>If you were to specify arguments, you would place them between
quotation marks.  The C macro for <code>goto-char</code> includes
<code>"NGoto char: "</code> in this position to indicate that the function
expects a raw prefix, in this case, a numerical location in a buffer,
and provides a prompt.

</p><li>The seventh part is a documentation string, just like the one for a
function written in Emacs Lisp, except that every newline must be
written explicitly as <code>\n</code> followed by a backslash and carriage
return.

<p>Thus, the first two lines of documentation for  <code>goto-char</code> are
written like this:

<pre>  "Set point to POSITION, a number or marker.\n\
Beginning of buffer is position (point-min), end is (point-max).
</pre>
</ul>

<p>In a C macro, the formal parameters come next, with a statement of
what kind of object they are, followed by what might be called the `body'
of the macro.  For <code>delete-and-extract-region</code> the `body'
consists of the following two lines:

<pre>validate_region (&amp;start, &amp;end);
return del_range_1 (XINT (start), XINT (end), 1, 1);
</pre>

<p>The first function, <code>validate_region</code> checks whether the values
passed as the beginning and end of the region are the proper type and
are within range.  The second function, <code>del_range_1</code>, actually
deletes the text.

<p><code>del_range_1</code> is a complex function we will not look into.  It
updates the buffer and does other things.

<p>However, it is worth looking at the two arguments passed to
<code>del_range</code>.  These are <code>XINT&nbsp;(start)</code> and <code>XINT&nbsp;(end)</code>.

<p>As far as the C language is concerned, <code>start</code> and <code>end</code> are
two integers that mark the beginning and end of the region to be
deleted<a rel=footnote href="#fn-7"><sup>7</sup></a>.

<p>In early versions of Emacs, these two numbers were thirty-two bits
long, but the code is slowly being generalized to handle other
lengths.  Three of the available bits are used to specify the type of
information and a fourth bit is used for handling the computer's
memory; the remaining bits are used as `content'.

<p><code>XINT</code> is a C macro that extracts the relevant number from the
longer collection of bits; the four other bits are discarded.

<p>The command in <code>delete-and-extract-region</code> looks like this:

<pre>del_range_1 (XINT (start), XINT (end), 1, 1);
</pre>

<p>It deletes the region between the beginning position, <code>start</code>,
and the ending position, <code>end</code>.

<p>From the point of view of the person writing Lisp, Emacs is all very
simple; but hidden underneath is a great deal of complexity to make it
all work.

<p><hr>
Node:<a name="defvar">defvar</a>,
Next:<a rel=next href="#copy-region-as-kill">copy-region-as-kill</a>,
Previous:<a rel=previous href="#Digression%20into%20C">Digression into C</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>8.4 Initializing a Variable with <code>defvar</code></h2>

<p>Unlike the <code>delete-and-extract-region</code> function, the
<code>copy-region-as-kill</code> function is written in Emacs Lisp.  Two
functions within it, <code>kill-append</code> and <code>kill-new</code>, copy a
region in a buffer and save it in a variable called the
<code>kill-ring</code>.  This section describes how the <code>kill-ring</code>
variable is created and initialized using the <code>defvar</code> special
form.

<p>(Again we note that the term <code>kill-ring</code> is a misnomer.  The text
that is clipped out of the buffer can be brought back; it is not a ring
of corpses, but a ring of resurrectable text.)

<p>In Emacs Lisp, a variable such as the <code>kill-ring</code> is created and
given an initial value by using the <code>defvar</code> special form.  The
name comes from "define variable".

<p>The <code>defvar</code> special form is similar to <code>setq</code> in that it sets
the value of a variable.  It is unlike <code>setq</code> in two ways: first,
it only sets the value of the variable if the variable does not already
have a value.  If the variable already has a value, <code>defvar</code> does
not override the existing value.  Second, <code>defvar</code> has a
documentation string.

<p>(Another special form, <code>defcustom</code>, is designed for variables
that people customize.  It has more features than <code>defvar</code>. 
(See <a href="#defcustom">Setting Variables with <code>defcustom</code></a>.)

<ul>
<li><a href="#See%20variable%20current%20value">See variable current value</a>: 
<li><a href="#defvar%20and%20asterisk">defvar and asterisk</a>:          An old-time convention. 
</ul>

<p><hr>
Node:<a name="See%20variable%20current%20value">See variable current value</a>,
Next:<a rel=next href="#defvar%20and%20asterisk">defvar and asterisk</a>,
Previous:<a rel=previous href="#defvar">defvar</a>,
Up:<a rel=up href="#defvar">defvar</a>
<br>

<h3>Seeing the Current Value of a Variable</h3>

<p>You can see the current value of a variable, any variable, by using
the <code>describe-variable</code> function, which is usually invoked by
typing <kbd>C-h v</kbd>.  If you type <kbd>C-h v</kbd> and then <code>kill-ring</code>
(followed by &lt;RET&gt;) when prompted, you will see what is in your
current kill ring--this may be quite a lot!  Conversely, if you have
been doing nothing this Emacs session except read this document, you
may have nothing in it.  Also, you will see the documentation for
<code>kill-ring</code>:

<pre>Documentation:
List of killed text sequences.
Since the kill ring is supposed to interact nicely with cut-and-paste
facilities offered by window systems, use of this variable should
interact nicely with `interprogram-cut-function' and
`interprogram-paste-function'.  The functions `kill-new',
`kill-append', and `current-kill' are supposed to implement this
interaction; you may want to use them instead of manipulating the kill
ring directly.
</pre>

<p>The kill ring is defined by a <code>defvar</code> in the following way:

<pre>(defvar kill-ring nil
  "List of killed text sequences.
<small>...</small>")
</pre>

<p>In this variable definition, the variable is given an initial value of
<code>nil</code>, which makes sense, since if you have saved nothing, you want
nothing back if you give a <code>yank</code> command.  The documentation
string is written just like the documentation string of a <code>defun</code>. 
As with the documentation string of the <code>defun</code>, the first line of
the documentation should be a complete sentence, since some commands,
like <code>apropos</code>, print only the first line of documentation. 
Succeeding lines should not be indented; otherwise they look odd when
you use <kbd>C-h v</kbd> (<code>describe-variable</code>).

<p><hr>
Node:<a name="defvar%20and%20asterisk">defvar and asterisk</a>,
Previous:<a rel=previous href="#See%20variable%20current%20value">See variable current value</a>,
Up:<a rel=up href="#defvar">defvar</a>
<br>

<h3>8.4.1 <code>defvar</code> and an asterisk</h3>

<p>In the past, Emacs used the <code>defvar</code> special form both for
internal variables that you would not expect a user to change and for
variables that you do expect a user to change.  Although you can still
use <code>defvar</code> for user customizable variables, please use
<code>defcustom</code> instead, since that special form provides a path into
the Customization commands.  (See <a href="#defcustom">Setting Variables with <code>defcustom</code></a>.)

<p>When you specified a variable using the <code>defvar</code> special form,
you could distinguish a readily settable variable from others by
typing an asterisk, <code>*</code>, in the first column of its documentation
string.  For example:

<pre>(defvar shell-command-default-error-buffer nil
  "*Buffer name for `shell-command' <small>...</small> error output.
<small>...</small> ")
</pre>

<p>This means that you could (and still can) use the <code>edit-options</code>
command to change the value of
<code>shell-command-default-error-buffer</code> temporarily.

<p>However, options set using <code>edit-options</code> are set only for the
duration of your editing session.  The new values are not saved
between sessions.  Each time Emacs starts, it reads the original
value, unless you change the value within your <code>.emacs</code> file,
either by setting it manually or by using <code>customize</code>. 
See <a href="#Emacs%20Initialization">Your <code>.emacs</code> File</a>.

<p>For me, the major use of the <code>edit-options</code> command is to suggest
variables that I might want to set in my <code>.emacs</code> file.  I urge
you to look through the list.  (See <a href="emacs.html#Editing%20Variable%20Values">Edit Options</a>.)

<p><hr>
Node:<a name="copy-region-as-kill">copy-region-as-kill</a>,
Next:<a rel=next href="#cons%20&amp;%20search-fwd%20Review">cons & search-fwd Review</a>,
Previous:<a rel=previous href="#defvar">defvar</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>8.5 <code>copy-region-as-kill</code></h2>

<p>The <code>copy-region-as-kill</code> function copies a region of text from a
buffer and (via either <code>kill-append</code> or <code>kill-new</code>) saves it
in the <code>kill-ring</code>.

<p>If you call <code>copy-region-as-kill</code> immediately after a
<code>kill-region</code> command, Emacs appends the newly copied text to the
previously copied text.  This means that if you yank back the text, you
get it all, from both this and the previous operation.  On the other
hand, if some other command precedes the <code>copy-region-as-kill</code>,
the function copies the text into a separate entry in the kill ring.

<ul>
<li><a href="#Complete%20copy-region-as-kill">Complete copy-region-as-kill</a>:   The complete function definition. 
<li><a href="#copy-region-as-kill%20body">copy-region-as-kill body</a>:     The body of <code>copy-region-as-kill</code>. 
</ul>

<p><hr>
Node:<a name="Complete%20copy-region-as-kill">Complete copy-region-as-kill</a>,
Next:<a rel=next href="#copy-region-as-kill%20body">copy-region-as-kill body</a>,
Previous:<a rel=previous href="#copy-region-as-kill">copy-region-as-kill</a>,
Up:<a rel=up href="#copy-region-as-kill">copy-region-as-kill</a>
<br>

<h3>The complete <code>copy-region-as-kill</code> function definition</h3>

<p>Here is the complete text of the version 21 <code>copy-region-as-kill</code>
function:

<pre>(defun copy-region-as-kill (beg end)
  "Save the region as if killed, but don't kill it.
In Transient Mark mode, deactivate the mark.
If `interprogram-cut-function' is non-nil, also save
the text for a window system cut and paste."
  (interactive "r")
  (if (eq last-command 'kill-region)
      (kill-append (buffer-substring beg end) (&lt; end beg))
    (kill-new (buffer-substring beg end)))
  (if transient-mark-mode
      (setq deactivate-mark t))
  nil)
</pre>

<p>As usual, this function can be divided into its component parts:

<pre>(defun copy-region-as-kill (<var>argument-list</var>)
  "<var>documentation</var><small>...</small>"
  (interactive "r")
  <var>body</var><small>...</small>)
</pre>

<p>The arguments are <code>beg</code> and <code>end</code> and the function is
interactive with <code>"r"</code>, so the two arguments must refer to the
beginning and end of the region.  If you have been reading though this
document from the beginning, understanding these parts of a function is
almost becoming routine.

<p>The documentation is somewhat confusing unless you remember that the
word `kill' has a meaning different from its usual meaning.  The
`Transient Mark' and <code>interprogram-cut-function</code> comments explain
certain side-effects.

<p>After you once set a mark, a buffer always contains a region.  If you
wish, you can use Transient Mark mode to highlight the region
temporarily.  (No one wants to highlight the region all the time, so
Transient Mark mode highlights it only at appropriate times.  Many
people turn off Transient Mark mode, so the region is never
highlighted.)

<p>Also, a windowing system allows you to copy, cut, and paste among
different programs.  In the X windowing system, for example, the
<code>interprogram-cut-function</code> function is <code>x-select-text</code>,
which works with the windowing system's equivalent of the Emacs kill
ring.

<p>The body of the <code>copy-region-as-kill</code> function starts with an
<code>if</code> clause.  What this clause does is distinguish between two
different situations: whether or not this command is executed
immediately after a previous <code>kill-region</code> command.  In the first
case, the new region is appended to the previously copied text. 
Otherwise, it is inserted into the beginning of the kill ring as a
separate piece of text from the previous piece.

<p>The last two lines of the function prevent the region from lighting up
if Transient Mark mode is turned on.

<p>The body of <code>copy-region-as-kill</code> merits discussion in detail.

<p><hr>
Node:<a name="copy-region-as-kill%20body">copy-region-as-kill body</a>,
Previous:<a rel=previous href="#Complete%20copy-region-as-kill">Complete copy-region-as-kill</a>,
Up:<a rel=up href="#copy-region-as-kill">copy-region-as-kill</a>
<br>

<h3>8.5.1 The Body of <code>copy-region-as-kill</code></h3>

<p>The <code>copy-region-as-kill</code> function works in much the same way as
the <code>kill-region</code> function (see <a href="#kill-region"><code>kill-region</code></a>).  Both are written so that two or more kills in
a row combine their text into a single entry.  If you yank back the
text from the kill ring, you get it all in one piece.  Moreover, kills
that kill forward from the current position of the cursor are added to
the end of the previously copied text and commands that copy text
backwards add it to the beginning of the previously copied text.  This
way, the words in the text stay in the proper order.

<p>Like <code>kill-region</code>, the <code>copy-region-as-kill</code> function makes
use of the <code>last-command</code> variable that keeps track of the
previous Emacs command.

<ul>
<li><a href="#last-command%20&amp;%20this-command">last-command &amp; this-command</a>: 
<li><a href="#kill-append%20function">kill-append function</a>: 
<li><a href="#kill-new%20function">kill-new function</a>: 
</ul>

<p><hr>
Node:<a name="last-command%20&amp;%20this-command">last-command & this-command</a>,
Next:<a rel=next href="#kill-append%20function">kill-append function</a>,
Previous:<a rel=previous href="#copy-region-as-kill%20body">copy-region-as-kill body</a>,
Up:<a rel=up href="#copy-region-as-kill%20body">copy-region-as-kill body</a>
<br>

<h4><code>last-command</code> and <code>this-command</code></h4>

<p>Normally, whenever a function is executed, Emacs sets the value of
<code>this-command</code> to the function being executed (which in this case
would be <code>copy-region-as-kill</code>).  At the same time, Emacs sets
the value of <code>last-command</code> to the previous value of
<code>this-command</code>.

<p>In the first part of the body of the <code>copy-region-as-kill</code>
function, an <code>if</code> expression determines whether the value of
<code>last-command</code> is <code>kill-region</code>.  If so, the then-part of
the <code>if</code> expression is evaluated; it uses the <code>kill-append</code>
function to concatenate the text copied at this call to the function
with the text already in the first element (the <small>CAR</small>) of the kill
ring.  On the other hand, if the value of <code>last-command</code> is not
<code>kill-region</code>, then the <code>copy-region-as-kill</code> function
attaches a new element to the kill ring using the <code>kill-new</code>
function.

<p>The <code>if</code> expression reads as follows; it uses <code>eq</code>, which is
a function we have not yet seen:

<pre>  (if (eq last-command 'kill-region)
      ;; then-part
      (kill-append (buffer-substring beg end) (&lt; end beg))
    ;; else-part
    (kill-new (buffer-substring beg end)))
</pre>

<p>The <code>eq</code> function tests whether its first argument is the same Lisp
object as its second argument.  The <code>eq</code> function is similar to the
<code>equal</code> function in that it is used to test for equality, but
differs in that it determines whether two representations are actually
the same object inside the computer, but with different names. 
<code>equal</code> determines whether the structure and contents of two
expressions are the same.

<p>If the previous command was <code>kill-region</code>, then the Emacs Lisp
interpreter calls the <code>kill-append</code> function

<p><hr>
Node:<a name="kill-append%20function">kill-append function</a>,
Next:<a rel=next href="#kill-new%20function">kill-new function</a>,
Previous:<a rel=previous href="#last-command%20&amp;%20this-command">last-command & this-command</a>,
Up:<a rel=up href="#copy-region-as-kill%20body">copy-region-as-kill body</a>
<br>

<h4>The <code>kill-append</code> function</h4>

<p>The <code>kill-append</code> function looks like this:

<pre>(defun kill-append (string before-p)
  "Append STRING to the end of the latest kill in the kill ring.
If BEFORE-P is non-nil, prepend STRING to the kill.
If `interprogram-cut-function' is set, pass the resulting kill to
it."
  (kill-new (if before-p
                (concat string (car kill-ring))
              (concat (car kill-ring) string))
            t))
</pre>

<p>The <code>kill-append</code> function is fairly straightforward.  It uses
the <code>kill-new</code> function, which we will discuss in more detail in
a moment.

<p>First, let us look at the conditional that is one of the two arguments
to <code>kill-new</code>.  It uses <code>concat</code> to concatenate the new text
to the <small>CAR</small> of the kill ring.  Whether it prepends or appends the
text depends on the results of an <code>if</code> expression:

<pre>(if before-p                            ; if-part
    (concat string (car kill-ring))     ; then-part
  (concat (car kill-ring) string))      ; else-part
</pre>

<p>If the region being killed is before the region that was killed in the
last command, then it should be prepended before the material that was
saved in the previous kill; and conversely, if the killed text follows
what was just killed, it should be appended after the previous text. 
The <code>if</code> expression depends on the predicate <code>before-p</code> to
decide whether the newly saved text should be put before or after the
previously saved text.

<p>The symbol <code>before-p</code> is the name of one of the arguments to
<code>kill-append</code>.  When the <code>kill-append</code> function is
evaluated, it is bound to the value returned by evaluating the actual
argument.  In this case, this is the expression <code>(&lt; end beg)</code>. 
This expression does not directly determine whether the killed text in
this command is located before or after the kill text of the last
command; what is does is determine whether the value of the variable
<code>end</code> is less than the value of the variable <code>beg</code>.  If it
is, it means that the user is most likely heading towards the
beginning of the buffer.  Also, the result of evaluating the predicate
expression, <code>(&lt; end beg)</code>, will be true and the text will be
prepended before the previous text.  On the other hand, if the value of
the variable <code>end</code> is greater than the value of the variable
<code>beg</code>, the text will be appended after the previous text.

<p>When the newly saved text will be prepended, then the string with the new
text will be concatenated before the old text:

<pre>(concat string (car kill-ring))
</pre>

<p>But if the text will be appended, it will be concatenated
after the old text:

<pre>(concat (car kill-ring) string))
</pre>

<p>To understand how this works, we first need to review the
<code>concat</code> function.  The <code>concat</code> function links together or
unites two strings of text.  The result is a string.  For example:

<pre>(concat "abc" "def")
     =&gt; "abcdef"

(concat "new "
        (car '("first element" "second element")))
     =&gt; "new first element"

(concat (car
        '("first element" "second element")) " modified")
     =&gt; "first element modified"
</pre>

<p>We can now make sense of <code>kill-append</code>: it modifies the contents
of the kill ring.  The kill ring is a list, each element of which is
saved text.  The <code>kill-append</code> function uses the <code>kill-new</code>
function which in turn uses the <code>setcar</code> function.

<p><hr>
Node:<a name="kill-new%20function">kill-new function</a>,
Previous:<a rel=previous href="#kill-append%20function">kill-append function</a>,
Up:<a rel=up href="#copy-region-as-kill%20body">copy-region-as-kill body</a>
<br>

<h4>The <code>kill-new</code> function</h4>

<p>The <code>kill-new</code> function looks like this:

<pre>(defun kill-new (string &amp;optional replace)
  "Make STRING the latest kill in the kill ring.
Set the kill-ring-yank pointer to point to it.
If `interprogram-cut-function' is non-nil, apply it to STRING.
Optional second argument REPLACE non-nil means that STRING will replace
the front of the kill ring, rather than being added to the list."
  (and (fboundp 'menu-bar-update-yank-menu)
       (menu-bar-update-yank-menu string (and replace (car kill-ring))))
  (if (and replace kill-ring)
      (setcar kill-ring string)
    (setq kill-ring (cons string kill-ring))
    (if (&gt; (length kill-ring) kill-ring-max)
        (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))
  (setq kill-ring-yank-pointer kill-ring)
  (if interprogram-cut-function
      (funcall interprogram-cut-function string (not replace))))
</pre>

<p>As usual, we can look at this function in parts.

<p>The first line of the documentation makes sense:

<pre>Make STRING the latest kill in the kill ring.
</pre>

<p>Let's skip over the rest of the documentation for the moment.

<p>Also, let's skip over the first two lines of code, those involving
<code>menu-bar-update-yank-menu</code>.  We will explain them below.

<p>The critical lines are these:

<pre>  (if (and replace kill-ring)
      ;; then
      (setcar kill-ring string)
    ;; else
    (setq kill-ring (cons string kill-ring))
    (if (&gt; (length kill-ring) kill-ring-max)
        ;; avoid overly long kill ring
        (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil)))
  (setq kill-ring-yank-pointer kill-ring)
  (if interprogram-cut-function
      (funcall interprogram-cut-function string (not replace))))
</pre>

<p>The conditional test is <code>(and&nbsp;replace&nbsp;kill-ring)</code>. 
This will be true when two conditions are met:  the kill ring has
something in it, and the <code>replace</code> variable is true.

<p>The <code>kill-append</code> function sets <code>replace</code> to be true; then,
when the kill ring has at least one item in it, the <code>setcar</code>
expression is executed:

<pre>(setcar kill-ring string)
</pre>

<p>The <code>setcar</code> function actually changes the first element of the
<code>kill-ring</code> list to the value of <code>string</code>.  It replaces the
first element.

<p>On the other hand, if the kill ring is empty, or replace is false, the
else-part of the condition is executed:

<pre>(setq kill-ring (cons string kill-ring))
(if (&gt; (length kill-ring) kill-ring-max)
    (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil))
</pre>

<p>This expression first constructs a new version of the kill ring by
prepending <code>string</code> to the existing kill ring as a new element. 
Then it executes a second <code>if</code> clause.  This second <code>if</code>
clause keeps the kill ring from growing too long.

<p>Let's look at these two expressions in order.

<p>The <code>setq</code> line of the else-part sets the new value of the kill
ring to what results from adding the string being killed to the old kill
ring.

<p>We can see how this works with an example:

<pre>(setq example-list '("here is a clause" "another clause"))
</pre>

<p>After evaluating this expression with <kbd>C-x C-e</kbd>, you can evaluate
<code>example-list</code> and see what it returns:

<pre>example-list
     =&gt; ("here is a clause" "another clause")
</pre>

<p>Now, we can add a new element on to this list by evaluating the
following expression:

<pre>(setq example-list (cons "a third clause" example-list))
</pre>

<p>When we evaluate <code>example-list</code>, we find its value is:

<pre>example-list
     =&gt; ("a third clause" "here is a clause" "another clause")
</pre>

<p>Thus, the third clause was added to the list by <code>cons</code>.

<p>This is exactly similar to what the <code>setq</code> and <code>cons</code> do in
the function.  Here is the line again:

<pre>(setq kill-ring (cons string kill-ring))
</pre>

<p>Now for the second part of the <code>if</code> clause.  This expression
keeps the kill ring from growing too long.  It looks like this:

<pre>(if (&gt; (length kill-ring) kill-ring-max)
    (setcdr (nthcdr (1- kill-ring-max) kill-ring) nil))
</pre>

<p>The code checks whether the length of the kill ring is greater than
the maximum permitted length.  This is the value of
<code>kill-ring-max</code> (which is 60, by default).  If the length of the
kill ring is too long, then this code sets the last element of the
kill ring to <code>nil</code>.  It does this by using two functions,
<code>nthcdr</code> and <code>setcdr</code>.

<p>We looked at <code>setcdr</code> earlier (see <a href="#setcdr"><code>setcdr</code></a>). 
It sets the <small>CDR</small> of a list, just as <code>setcar</code> sets the
<small>CAR</small> of a list.  In this case, however, <code>setcdr</code> will not be
setting the <small>CDR</small> of the whole kill ring; the <code>nthcdr</code>
function is used to cause it to set the <small>CDR</small> of the next to last
element of the kill ring--this means that since the <small>CDR</small> of the
next to last element is the last element of the kill ring, it will set
the last element of the kill ring.

<p>The <code>nthcdr</code> function works by repeatedly taking the <small>CDR</small> of a
list--it takes the <small>CDR</small> of the <small>CDR</small> of the <small>CDR</small>
<small>...</small>  It does this <var>N</var> times and returns the results.

<p>Thus, if we had a four element list that was supposed to be three
elements long, we could set the <small>CDR</small> of the next to last element
to <code>nil</code>, and thereby shorten the list.

<p>You can see this by evaluating the following three expressions in turn. 
First set the value of <code>trees</code> to <code>(maple oak pine birch)</code>,
then set the <small>CDR</small> of its second <small>CDR</small> to <code>nil</code> and then
find the value of <code>trees</code>:

<pre>(setq trees '(maple oak pine birch))
     =&gt; (maple oak pine birch)

(setcdr (nthcdr 2 trees) nil)
     =&gt; nil

trees
     =&gt; (maple oak pine)
</pre>

<p>(The value returned by the <code>setcdr</code> expression is <code>nil</code> since
that is what the <small>CDR</small> is set to.)

<p>To repeat, in <code>kill-new</code>, the <code>nthcdr</code> function takes the
<small>CDR</small> a number of times that is one less than the maximum permitted
size of the kill ring and sets the <small>CDR</small> of that element (which
will be the rest of the elements in the kill ring) to <code>nil</code>. 
This prevents the kill ring from growing too long.

<p>The next to last expression in the <code>kill-new</code> function is

<pre>(setq kill-ring-yank-pointer kill-ring)
</pre>

<p>The <code>kill-ring-yank-pointer</code> is a global variable that is set to be
the <code>kill-ring</code>.

<p>Even though the <code>kill-ring-yank-pointer</code> is called a
<code>pointer</code>, it is a variable just like the kill ring.  However, the
name has been chosen to help humans understand how the variable is used. 
The variable is used in functions such as <code>yank</code> and
<code>yank-pop</code> (see <a href="#Yanking">Yanking Text Back</a>).

<p>Now, to return to the first two lines in the body of the function:

<pre>  (and (fboundp 'menu-bar-update-yank-menu)
       (menu-bar-update-yank-menu string (and replace (car kill-ring))))
</pre>

<p>This is an expression whose first element is the function <code>and</code>.

<p>The <code>and</code> special form evaluates each of its arguments until one of
the arguments returns a value of <code>nil</code>, in which case the
<code>and</code> expression returns <code>nil</code>; however, if none of the
arguments returns a value of <code>nil</code>, the value resulting from
evaluating the last argument is returned.  (Since such a value is not
<code>nil</code>, it is considered true in Emacs Lisp.)  In other words, an
<code>and</code> expression returns a true value only if all its arguments
are true.

<p>In this case, the expression tests first to see whether
<code>menu-bar-update-yank-menu</code> exists as a function, and if so,
calls it.  The <code>fboundp</code> function returns true if the symbol it
is testing has a function definition that `is not void'.  If the
symbol's function definition were void, we would receive an error
message, as we did when we created errors intentionally (see <a href="#Making%20Errors">Generate an Error Message</a>).

<p>Essentially, the <code>and</code> is an <code>if</code> expression that reads like
this:

<pre>if <var>the-menu-bar-function-exists</var>
  then <var>execute-it</var>
</pre>

<p><code>menu-bar-update-yank-menu</code> is one of the functions that make it
possible to use the `Select and Paste' menu in the Edit item of a menu
bar; using a mouse, you can look at the various pieces of text you
have saved and select one piece to paste.

<p>Finally, the last expression in the <code>kill-new</code> function adds the
newly copied string to whatever facility exists for copying and
pasting among different programs running in a windowing system.  In
the X Windowing system, for example, the <code>x-select-text</code> function
takes the string and stores it in memory operated by X.  You can paste
the string in another program, such as an Xterm.

<p>The expression looks like this:

<pre>  (if interprogram-cut-function
      (funcall interprogram-cut-function string (not replace))))
</pre>

<p>If an <code>interprogram-cut-function</code> exists, then Emacs executes
<code>funcall</code>, which in turn calls its first argument as a function
and passes the remaining arguments to it.  (Incidentally, as far as I
can see, this <code>if</code> expression could be replaced by an <code>and</code>
expression similar to the one in the first part of the function.)

<p>We are not going to discuss windowing systems and other programs
further, but merely note that this is a mechanism that enables GNU
Emacs to work easily and well with other programs.

<p>This code for placing text in the kill ring, either concatenated with
an existing element or as a new element, leads us to the code for
bringing back text that has been cut out of the buffer--the yank
commands.  However, before discussing the yank commands, it is better
to learn how lists are implemented in a computer.  This will make
clear such mysteries as the use of the term `pointer'.

<p><hr>
Node:<a name="cons%20&amp;%20search-fwd%20Review">cons & search-fwd Review</a>,
Next:<a rel=next href="#search%20Exercises">search Exercises</a>,
Previous:<a rel=previous href="#copy-region-as-kill">copy-region-as-kill</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>8.6 Review</h2>

<p>Here is a brief summary of some recently introduced functions.

<dl>
<dt><code>car</code>
<dt><code>cdr</code>
<dd><code>car</code> returns the first element of a list; <code>cdr</code> returns the
second and subsequent elements of a list.

<p>For example:

<pre>(car '(1 2 3 4 5 6 7))
     =&gt; 1
(cdr '(1 2 3 4 5 6 7))
     =&gt; (2 3 4 5 6 7)
</pre>

<br><dt><code>cons</code>
<dd><code>cons</code> constructs a list by prepending its first argument to its
second argument.

<p>For example:

<pre>(cons 1 '(2 3 4))
     =&gt; (1 2 3 4)
</pre>

<br><dt><code>nthcdr</code>
<dd>Return the result of taking <small>CDR</small> `n' times on a list. 
The `rest of the rest', as it were.

<p>For example:

<pre>(nthcdr 3 '(1 2 3 4 5 6 7))
     =&gt; (4 5 6 7)
</pre>

<br><dt><code>setcar</code>
<dt><code>setcdr</code>
<dd><code>setcar</code> changes the first element of a list; <code>setcdr</code>
changes the second and subsequent elements of a list.

<p>For example:

<pre>(setq triple '(1 2 3))

(setcar triple '37)

triple
     =&gt; (37 2 3)

(setcdr triple '("foo" "bar"))

triple
     =&gt; (37 "foo" "bar")
</pre>

<br><dt><code>progn</code>
<dd>Evaluate each argument in sequence and then return the value of the
last.

<p>For example:

<pre>(progn 1 2 3 4)
     =&gt; 4
</pre>

<br><dt><code>save-restriction</code>
<dd>Record whatever narrowing is in effect in the current buffer, if any,
and restore that narrowing after evaluating the arguments.

<br><dt><code>search-forward</code>
<dd>Search for a string, and if the string is found, move point.

<p>Takes four arguments:

<ol type=1 start=1>
</p><li>The string to search for.

<li>Optionally, the limit of the search.

<li>Optionally, what to do if the search fails, return <code>nil</code> or an
error message.

<li>Optionally, how many times to repeat the search; if negative, the
search goes backwards.
</ol>

<br><dt><code>kill-region</code>
<dt><code>delete-region</code>
<dt><code>copy-region-as-kill</code>
<dd>
<code>kill-region</code> cuts the text between point and mark from the
buffer and stores that text in the kill ring, so you can get it back
by yanking.

<p><code>delete-and-extract-region</code> removes the text between point and
mark from the buffer and throws it away.  You cannot get it back.

<p><code>copy-region-as-kill</code> copies the text between point and mark into
the kill ring, from which you can get it by yanking.  The function
does not cut or remove the text from the buffer. 
</dl>

<p><hr>
Node:<a name="search%20Exercises">search Exercises</a>,
Previous:<a rel=previous href="#cons%20&amp;%20search-fwd%20Review">cons & search-fwd Review</a>,
Up:<a rel=up href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<br>

<h2>8.7 Searching Exercises</h2>

<ul>
<li>Write an interactive function that searches for a string.  If the
search finds the string, leave point after it and display a message
that says "Found!".  (Do not use <code>search-forward</code> for the name
of this function; if you do, you will overwrite the existing version of
<code>search-forward</code> that comes with Emacs.  Use a name such as
<code>test-search</code> instead.)

<li>Write a function that prints the third element of the kill ring in the
echo area, if any; if the kill ring does not contain a third element,
print an appropriate message. 
</ul>

<p><hr>
Node:<a name="List%20Implementation">List Implementation</a>,
Next:<a rel=next href="#Yanking">Yanking</a>,
Previous:<a rel=previous href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>9 How Lists are Implemented</h1>

<p>In Lisp, atoms are recorded in a straightforward fashion; if the
implementation is not straightforward in practice, it is, nonetheless,
straightforward in theory.  The atom <code>rose</code>, for example, is
recorded as the four contiguous letters <code>r</code>, <code>o</code>, <code>s</code>,
<code>e</code>.  A list, on the other hand, is kept differently.  The mechanism
is equally simple, but it takes a moment to get used to the idea.  A
list is kept using a series of pairs of pointers.  In the series, the
first pointer in each pair points to an atom or to another list, and the
second pointer in each pair points to the next pair, or to the symbol
<code>nil</code>, which marks the end of the list.

<p>A pointer itself is quite simply the electronic address of what is
pointed to.  Hence, a list is kept as a series of electronic addresses.

<ul>
<li><a href="#Lists%20diagrammed">Lists diagrammed</a>: 
<li><a href="#Symbols%20as%20Chest">Symbols as Chest</a>:             Exploring a powerful metaphor. 
<li><a href="#List%20Exercise">List Exercise</a>: 
</ul>

<p><hr>
Node:<a name="Lists%20diagrammed">Lists diagrammed</a>,
Next:<a rel=next href="#Symbols%20as%20Chest">Symbols as Chest</a>,
Previous:<a rel=previous href="#List%20Implementation">List Implementation</a>,
Up:<a rel=up href="#List%20Implementation">List Implementation</a>
<br>

<h2>Lists diagrammed</h2>

<p>For example, the list <code>(rose violet buttercup)</code> has three elements,
<code>rose</code>, <code>violet</code>, and <code>buttercup</code>.  In the computer, the
electronic address of <code>rose</code> is recorded in a segment of computer
memory along with the address that gives the electronic address of where
the atom <code>violet</code> is located; and that address (the one that tells
where <code>violet</code> is located) is kept along with an address that tells
where the address for the atom <code>buttercup</code> is located.

<p>This sounds more complicated than it is and is easier seen in a diagram:

<pre>    ___ ___      ___ ___      ___ ___
   |___|___|--&gt; |___|___|--&gt; |___|___|--&gt; nil
     |            |            |
     |            |            |
      --&gt; rose     --&gt; violet   --&gt; buttercup
</pre>


<br><p>
<br><p>
<p>In the diagram, each box represents a word of computer memory that
holds a Lisp object, usually in the form of a memory address.  The boxes,
i.e. the addresses, are in pairs.  Each arrow points to what the address
is the address of, either an atom or another pair of addresses.  The
first box is the electronic address of <code>rose</code> and the arrow points
to <code>rose</code>; the second box is the address of the next pair of boxes,
the first part of which is the address of <code>violet</code> and the second
part of which is the address of the next pair.  The very last box
points to the symbol <code>nil</code>, which marks the end of the list.

<p>When a variable is set to a list with a function such as <code>setq</code>,
it stores the address of the first box in the variable.  Thus,
evaluation of the expression

<pre>(setq bouquet '(rose violet buttercup))
</pre>

<p>creates a situation like this:

<pre>bouquet
     |
     |     ___ ___      ___ ___      ___ ___
      --&gt; |___|___|--&gt; |___|___|--&gt; |___|___|--&gt; nil
            |            |            |
            |            |            |
             --&gt; rose     --&gt; violet   --&gt; buttercup
</pre>


<br><p>
<br><p>
<p>In this example, the symbol <code>bouquet</code> holds the address of the first
pair of boxes.

<p>This same list can be illustrated in a different sort of box notation
like this:

<pre>bouquet
 |
 |    --------------       ---------------       ----------------
 |   | car   | cdr  |     | car    | cdr  |     | car     | cdr  |
  --&gt;| rose  |   o-------&gt;| violet |   o-------&gt;| butter- |  nil |
     |       |      |     |        |      |     | cup     |      |
      --------------       ---------------       ----------------
</pre>


<br><p>
<br><p>
<p>(Symbols consist of more than pairs of addresses, but the structure of
a symbol is made up of addresses.  Indeed, the symbol <code>bouquet</code>
consists of a group of address-boxes, one of which is the address of
the printed word <code>bouquet</code>, a second of which is the address of a
function definition attached to the symbol, if any, a third of which
is the address of the first pair of address-boxes for the list
<code>(rose violet buttercup)</code>, and so on.  Here we are showing that
the symbol's third address-box points to the first pair of
address-boxes for the list.)

<p>If a symbol is set to the <small>CDR</small> of a list, the list itself is not
changed; the symbol simply has an address further down the list.  (In
the jargon, <small>CAR</small> and <small>CDR</small> are `non-destructive'.)  Thus,
evaluation of the following expression

<pre>(setq flowers (cdr bouquet))
</pre>

<p>produces this:

<br><p>
<pre>bouquet        flowers
  |              |
  |     ___ ___  |     ___ ___      ___ ___
   --&gt; |   |   |  --&gt; |   |   |    |   |   |
       |___|___|----&gt; |___|___|--&gt; |___|___|--&gt; nil
         |              |            |
         |              |            |
          --&gt; rose       --&gt; violet   --&gt; buttercup
</pre>


<br><p>
<br><p>
<br><p>
<p>The value of <code>flowers</code> is <code>(violet buttercup)</code>, which is
to say, the symbol <code>flowers</code> holds the address of the pair of
address-boxes, the first of which holds the address of <code>violet</code>,
and the second of which holds the address of <code>buttercup</code>.

<p>A pair of address-boxes is called a <dfn>cons cell</dfn> or <dfn>dotted
pair</dfn>.  See <a href="elisp.html#List%20Type">List Type</a>, and <a href="elisp.html#Dotted%20Pair%20Notation">Dotted Pair Notation</a>, for more
information about cons cells and dotted pairs.

<p>The function <code>cons</code> adds a new pair of addresses to the front of
a series of addresses like that shown above.  For example, evaluating
the expression

<pre>(setq bouquet (cons 'lily bouquet))
</pre>

<p>produces:

<br><p>
<pre>bouquet                       flowers
  |                             |
  |     ___ ___        ___ ___  |     ___ ___       ___ ___
   --&gt; |   |   |      |   |   |  --&gt; |   |   |     |   |   |
       |___|___|----&gt; |___|___|----&gt; |___|___|----&gt;|___|___|--&gt; nil
         |              |              |             |
         |              |              |             |
          --&gt; lily      --&gt; rose       --&gt; violet    --&gt; buttercup
</pre>


<br><p>
<br><p>
<br><p>
<p>However, this does not change the value of the symbol
<code>flowers</code>, as you can see by evaluating the following,

<pre>(eq (cdr (cdr bouquet)) flowers)
</pre>

<p>which returns <code>t</code> for true.

<p>Until it is reset, <code>flowers</code> still has the value
<code>(violet buttercup)</code>; that is, it has the address of the cons
cell whose first address is of <code>violet</code>.  Also, this does not
alter any of the pre-existing cons cells; they are all still there.

<p>Thus, in Lisp, to get the <small>CDR</small> of a list, you just get the address
of the next cons cell in the series; to get the <small>CAR</small> of a list,
you get the address of the first element of the list; to <code>cons</code> a
new element on a list, you add a new cons cell to the front of the list. 
That is all there is to it!  The underlying structure of Lisp is
brilliantly simple!

<p>And what does the last address in a series of cons cells refer to?  It
is the address of the empty list, of <code>nil</code>.

<p>In summary, when a Lisp variable is set to a value, it is provided with
the address of the list to which the variable refers.

<p><hr>
Node:<a name="Symbols%20as%20Chest">Symbols as Chest</a>,
Next:<a rel=next href="#List%20Exercise">List Exercise</a>,
Previous:<a rel=previous href="#Lists%20diagrammed">Lists diagrammed</a>,
Up:<a rel=up href="#List%20Implementation">List Implementation</a>
<br>

<h2>9.1 Symbols as a Chest of Drawers</h2>

<p>In an earlier section, I suggested that you might imagine a symbol as
being a chest of drawers.  The function definition is put in one
drawer, the value in another, and so on.  What is put in the drawer
holding the value can be changed without affecting the contents of the
drawer holding the function definition, and vice-versa.

<p>Actually, what is put in each drawer is the address of the value or
function definition.  It is as if you found an old chest in the attic,
and in one of its drawers you found a map giving you directions to
where the buried treasure lies.

<p>(In addition to its name, symbol definition, and variable value, a
symbol has a `drawer' for a <dfn>property list</dfn> which can be used to
record other information.  Property lists are not discussed here; see
<a href="elisp.html#Property%20Lists">Property Lists</a>.)

<p>Here is a fanciful representation:

<br><p>
<pre>            Chest of Drawers            Contents of Drawers

            __   o0O0o   __
          /                 \
         ---------------------
        |    directions to    |            [map to]
        |     symbol name     |             bouquet
        |                     |
        +---------------------+
        |    directions to    |
        |  symbol definition  |             [none]
        |                     |
        +---------------------+
        |    directions to    |            [map to]
        |    variable value   |             (rose violet buttercup)
        |                     |
        +---------------------+
        |    directions to    |
        |    property list    |             [not described here]
        |                     |
        +---------------------+
        |/                   \|
</pre>


<br><p>
<br><p>
<br><p>
<p><hr>
Node:<a name="List%20Exercise">List Exercise</a>,
Previous:<a rel=previous href="#Symbols%20as%20Chest">Symbols as Chest</a>,
Up:<a rel=up href="#List%20Implementation">List Implementation</a>
<br>

<h2>9.2 Exercise</h2>

<p>Set <code>flowers</code> to <code>violet</code> and <code>buttercup</code>.  Cons two
more flowers on to this list and set this new list to
<code>more-flowers</code>.  Set the <small>CAR</small> of <code>flowers</code> to a fish. 
What does the <code>more-flowers</code> list now contain?

<p><hr>
Node:<a name="Yanking">Yanking</a>,
Next:<a rel=next href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>,
Previous:<a rel=previous href="#List%20Implementation">List Implementation</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>10 Yanking Text Back</h1>

<p>Whenever you cut text out of a buffer with a `kill' command in GNU Emacs,
you can bring it back with a `yank' command.  The text that is cut out of
the buffer is put in the kill ring and the yank commands insert the
appropriate contents of the kill ring back into a buffer (not necessarily
the original buffer).

<p>A simple <kbd>C-y</kbd> (<code>yank</code>) command inserts the first item from
the kill ring into the current buffer.  If the <kbd>C-y</kbd> command is
followed immediately by <kbd>M-y</kbd>, the first element is replaced by
the second element.  Successive <kbd>M-y</kbd> commands replace the second
element with the third, fourth, or fifth element, and so on.  When the
last element in the kill ring is reached, it is replaced by the first
element and the cycle is repeated.  (Thus the kill ring is called a
`ring' rather than just a `list'.  However, the actual data structure
that holds the text is a list. 
See <a href="#Kill%20Ring">Handling the Kill Ring</a>, for the details of how the
list is handled as a ring.)

<ul>
<li><a href="#Kill%20Ring%20Overview">Kill Ring Overview</a>:           The kill ring is a list. 
<li><a href="#kill-ring-yank-pointer">kill-ring-yank-pointer</a>:       The <code>kill-ring-yank-pointer</code> variable. 
<li><a href="#yank%20nthcdr%20Exercises">yank nthcdr Exercises</a>: 
</ul>

<p><hr>
Node:<a name="Kill%20Ring%20Overview">Kill Ring Overview</a>,
Next:<a rel=next href="#kill-ring-yank-pointer">kill-ring-yank-pointer</a>,
Previous:<a rel=previous href="#Yanking">Yanking</a>,
Up:<a rel=up href="#Yanking">Yanking</a>
<br>

<h2>10.1 Kill Ring Overview</h2>

<p>The kill ring is a list of textual strings.  This is what it looks like:

<pre>("some text" "a different piece of text" "yet more text")
</pre>

<p>If this were the contents of my kill ring and I pressed <kbd>C-y</kbd>, the
string of characters saying <code>some text</code> would be inserted in this
buffer where my cursor is located.

<p>The <code>yank</code> command is also used for duplicating text by copying it. 
The copied text is not cut from the buffer, but a copy of it is put on the
kill ring and is inserted by yanking it back.

<p>Three functions are used for bringing text back from the kill ring:
<code>yank</code>, which is usually bound to <kbd>C-y</kbd>; <code>yank-pop</code>,
which is usually bound to <kbd>M-y</kbd>; and <code>rotate-yank-pointer</code>,
which is used by the two other functions.

<p>These functions refer to the kill ring through a variable called the
<code>kill-ring-yank-pointer</code>.  Indeed, the insertion code for both the
<code>yank</code> and <code>yank-pop</code> functions is:

<pre>(insert (car kill-ring-yank-pointer))
</pre>

<p>To begin to understand how <code>yank</code> and <code>yank-pop</code> work, it is
first necessary to look at the <code>kill-ring-yank-pointer</code> variable
and the <code>rotate-yank-pointer</code> function.

<p><hr>
Node:<a name="kill-ring-yank-pointer">kill-ring-yank-pointer</a>,
Next:<a rel=next href="#yank%20nthcdr%20Exercises">yank nthcdr Exercises</a>,
Previous:<a rel=previous href="#Kill%20Ring%20Overview">Kill Ring Overview</a>,
Up:<a rel=up href="#Yanking">Yanking</a>
<br>

<h2>10.2 The <code>kill-ring-yank-pointer</code> Variable</h2>

<p><code>kill-ring-yank-pointer</code> is a variable, just as <code>kill-ring</code> is
a variable.  It points to something by being bound to the value of what
it points to, like any other Lisp variable.

<p>Thus, if the value of the kill ring is:

<pre>("some text" "a different piece of text" "yet more text")
</pre>

<p>and the <code>kill-ring-yank-pointer</code> points to the second clause, the
value of <code>kill-ring-yank-pointer</code> is:

<pre>("a different piece of text" "yet more text")
</pre>

<p>As explained in the previous chapter (see <a href="#List%20Implementation">List Implementation</a>), the
computer does not keep two different copies of the text being pointed to
by both the <code>kill-ring</code> and the <code>kill-ring-yank-pointer</code>.  The
words "a different piece of text" and "yet more text" are not
duplicated.  Instead, the two Lisp variables point to the same pieces of
text.  Here is a diagram:

<pre>kill-ring     kill-ring-yank-pointer
    |               |
    |      ___ ___  |     ___ ___      ___ ___
     ---&gt; |   |   |  --&gt; |   |   |    |   |   |
          |___|___|----&gt; |___|___|--&gt; |___|___|--&gt; nil
            |              |            |
            |              |            |
            |              |             --&gt; "yet more text"
            |              |
            |               --&gt; "a different piece of text
            |
             --&gt; "some text"
</pre>


<br><p>
<br><p>
<br><p>
<p>Both the variable <code>kill-ring</code> and the variable
<code>kill-ring-yank-pointer</code> are pointers.  But the kill ring itself is
usually described as if it were actually what it is composed of.  The
<code>kill-ring</code> is spoken of as if it were the list rather than that it
points to the list.  Conversely, the <code>kill-ring-yank-pointer</code> is
spoken of as pointing to a list.

<p>These two ways of talking about the same thing sound confusing at first but
make sense on reflection.  The kill ring is generally thought of as the
complete structure of data that holds the information of what has recently
been cut out of the Emacs buffers.  The <code>kill-ring-yank-pointer</code>
on the other hand, serves to indicate--that is, to `point to'--that part
of the kill ring of which the first element (the <small>CAR</small>) will be
inserted.

<p>The <code>rotate-yank-pointer</code> function changes the element in the
kill ring to which the <code>kill-ring-yank-pointer</code> points; when the
pointer is set to point to the next element beyond the end of the kill
ring, it automatically sets it to point to the first element of the
kill ring.  This is how the list is transformed into a ring.  The
<code>rotate-yank-pointer</code> function itself is not difficult, but
contains many details.  It and the much simpler <code>yank</code> and
<code>yank-pop</code> functions are described in an appendix. 
See <a href="#Kill%20Ring">Handling the Kill Ring</a>.

<p><hr>
Node:<a name="yank%20nthcdr%20Exercises">yank nthcdr Exercises</a>,
Previous:<a rel=previous href="#kill-ring-yank-pointer">kill-ring-yank-pointer</a>,
Up:<a rel=up href="#Yanking">Yanking</a>
<br>

<h2>10.3 Exercises with <code>yank</code> and <code>nthcdr</code></h2>

<ul>
<li>Using <kbd>C-h v</kbd> (<code>describe-variable</code>), look at the value of
your kill ring.  Add several items to your kill ring; look at its
value again.  Using <kbd>M-y</kbd> (<code>yank-pop)</code>, move all the way
around the kill ring.  How many items were in your kill ring?  Find
the value of <code>kill-ring-max</code>.  Was your kill ring full, or could
you have kept more blocks of text within it?

<li>Using <code>nthcdr</code> and <code>car</code>, construct a series of expressions
to return the first, second, third, and fourth elements of a list. 
</ul>

<p><hr>
Node:<a name="Loops%20&amp;%20Recursion">Loops & Recursion</a>,
Next:<a rel=next href="#Regexp%20Search">Regexp Search</a>,
Previous:<a rel=previous href="#Yanking">Yanking</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>11 Loops and Recursion</h1>

<p>Emacs Lisp has two primary ways to cause an expression, or a series of
expressions, to be evaluated repeatedly: one uses a <code>while</code>
loop, and the other uses <dfn>recursion</dfn>.

<p>Repetition can be very valuable.  For example, to move forward four
sentences, you need only write a program that will move forward one
sentence and then repeat the process four times.  Since a computer does
not get bored or tired, such repetitive action does not have the
deleterious effects that excessive or the wrong kinds of repetition can
have on humans.

<p>People mostly write Emacs Lisp functions using <code>while</code> loops and
their kin; but you can use recursion, which provides a very powerful
way to think about and then to solve problems<a rel=footnote href="#fn-8"><sup>8</sup></a>.

<ul>
<li><a href="#while">while</a>:                        Causing a stretch of code to repeat. 
<li><a href="#dolist%20dotimes">dolist dotimes</a>: 
<li><a href="#Recursion">Recursion</a>:                    Causing a function to call itself. 
<li><a href="#Looping%20exercise">Looping exercise</a>: 
</ul>

<p><hr>
Node:<a name="while">while</a>,
Next:<a rel=next href="#dolist%20dotimes">dolist dotimes</a>,
Previous:<a rel=previous href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>,
Up:<a rel=up href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>
<br>

<h2>11.1 <code>while</code></h2>

<p>The <code>while</code> special form tests whether the value returned by
evaluating its first argument is true or false.  This is similar to what
the Lisp interpreter does with an <code>if</code>; what the interpreter does
next, however, is different.

<p>In a <code>while</code> expression, if the value returned by evaluating the
first argument is false, the Lisp interpreter skips the rest of the
expression (the <dfn>body</dfn> of the expression) and does not evaluate it. 
However, if the value is true, the Lisp interpreter evaluates the body
of the expression and then again tests whether the first argument to
<code>while</code> is true or false.  If the value returned by evaluating the
first argument is again true, the Lisp interpreter again evaluates the
body of the expression.

<p>The template for a <code>while</code> expression looks like this:

<pre>(while <var>true-or-false-test</var>
  <var>body</var><small>...</small>)
</pre>

<ul>
<li><a href="#Looping%20with%20while">Looping with while</a>:           Repeat so long as test returns true. 
<li><a href="#Loop%20Example">Loop Example</a>:                 A <code>while</code> loop that uses a list. 
<li><a href="#print-elements-of-list">print-elements-of-list</a>:       Uses <code>while</code>, <code>car</code>, <code>cdr</code>. 
<li><a href="#Incrementing%20Loop">Incrementing Loop</a>:            A loop with an incrementing counter. 
<li><a href="#Decrementing%20Loop">Decrementing Loop</a>:            A loop with a decrementing counter. 
</ul>

<p><hr>
Node:<a name="Looping%20with%20while">Looping with while</a>,
Next:<a rel=next href="#Loop%20Example">Loop Example</a>,
Previous:<a rel=previous href="#while">while</a>,
Up:<a rel=up href="#while">while</a>
<br>

<h3>Looping with <code>while</code></h3>

<p>So long as the true-or-false-test of the <code>while</code> expression
returns a true value when it is evaluated, the body is repeatedly
evaluated.  This process is called a loop since the Lisp interpreter
repeats the same thing again and again, like an airplane doing a loop. 
When the result of evaluating the true-or-false-test is false, the
Lisp interpreter does not evaluate the rest of the <code>while</code>
expression and `exits the loop'.

<p>Clearly, if the value returned by evaluating the first argument to
<code>while</code> is always true, the body following will be evaluated
again and again <small>...</small> and again <small>...</small> forever.  Conversely, if the
value returned is never true, the expressions in the body will never
be evaluated.  The craft of writing a <code>while</code> loop consists of
choosing a mechanism such that the true-or-false-test returns true
just the number of times that you want the subsequent expressions to
be evaluated, and then have the test return false.

<p>The value returned by evaluating a <code>while</code> is the value of the
true-or-false-test.  An interesting consequence of this is that a
<code>while</code> loop that evaluates without error will return <code>nil</code>
or false regardless of whether it has looped 1 or 100 times or none at
all.  A <code>while</code> expression that evaluates successfully never
returns a true value!  What this means is that <code>while</code> is always
evaluated for its side effects, which is to say, the consequences of
evaluating the expressions within the body of the <code>while</code> loop. 
This makes sense.  It is not the mere act of looping that is desired,
but the consequences of what happens when the expressions in the loop
are repeatedly evaluated.

<p><hr>
Node:<a name="Loop%20Example">Loop Example</a>,
Next:<a rel=next href="#print-elements-of-list">print-elements-of-list</a>,
Previous:<a rel=previous href="#Looping%20with%20while">Looping with while</a>,
Up:<a rel=up href="#while">while</a>
<br>

<h3>11.1.1 A <code>while</code> Loop and a List</h3>

<p>A common way to control a <code>while</code> loop is to test whether a list
has any elements.  If it does, the loop is repeated; but if it does not,
the repetition is ended.  Since this is an important technique, we will
create a short example to illustrate it.

<p>A simple way to test whether a list has elements is to evaluate the
list: if it has no elements, it is an empty list and will return the
empty list, <code>()</code>, which is a synonym for <code>nil</code> or false.  On
the other hand, a list with elements will return those elements when it
is evaluated.  Since Emacs Lisp considers as true any value that is not
<code>nil</code>, a list that returns elements will test true in a
<code>while</code> loop.

<p>For example, you can set the variable <code>empty-list</code> to <code>nil</code> by
evaluating the following <code>setq</code> expression:

<pre>(setq empty-list ())
</pre>

<p>After evaluating the <code>setq</code> expression, you can evaluate the
variable <code>empty-list</code> in the usual way, by placing the cursor after
the symbol and typing <kbd>C-x C-e</kbd>; <code>nil</code> will appear in your
echo area:

<pre>empty-list
</pre>

<p>On the other hand, if you set a variable to be a list with elements, the
list will appear when you evaluate the variable, as you can see by
evaluating the following two expressions:

<pre>(setq animals '(gazelle giraffe lion tiger))

animals
</pre>

<p>Thus, to create a <code>while</code> loop that tests whether there are any
items in the list <code>animals</code>, the first part of the loop will be
written like this:

<pre>(while animals
       <small>...</small>
</pre>

<p>When the <code>while</code> tests its first argument, the variable
<code>animals</code> is evaluated.  It returns a list.  So long as the list
has elements, the <code>while</code> considers the results of the test to be
true; but when the list is empty, it considers the results of the test
to be false.

<p>To prevent the <code>while</code> loop from running forever, some mechanism
needs to be provided to empty the list eventually.  An oft-used
technique is to have one of the subsequent forms in the <code>while</code>
expression set the value of the list to be the <small>CDR</small> of the list. 
Each time the <code>cdr</code> function is evaluated, the list will be made
shorter, until eventually only the empty list will be left.  At this
point, the test of the <code>while</code> loop will return false, and the
arguments to the <code>while</code> will no longer be evaluated.

<p>For example, the list of animals bound to the variable <code>animals</code>
can be set to be the <small>CDR</small> of the original list with the
following expression:

<pre>(setq animals (cdr animals))
</pre>

<p>If you have evaluated the previous expressions and then evaluate this
expression, you will see <code>(giraffe lion tiger)</code> appear in the echo
area.  If you evaluate the expression again, <code>(lion tiger)</code> will
appear in the echo area.  If you evaluate it again and yet again,
<code>(tiger)</code> appears and then the empty list, shown by <code>nil</code>.

<p>A template for a <code>while</code> loop that uses the <code>cdr</code> function
repeatedly to cause the true-or-false-test eventually to test false
looks like this:

<pre>(while <var>test-whether-list-is-empty</var>
  <var>body</var><small>...</small>
  <var>set-list-to-cdr-of-list</var>)
</pre>

<p>This test and use of <code>cdr</code> can be put together in a function that
goes through a list and prints each element of the list on a line of its
own.

<p><hr>
Node:<a name="print-elements-of-list">print-elements-of-list</a>,
Next:<a rel=next href="#Incrementing%20Loop">Incrementing Loop</a>,
Previous:<a rel=previous href="#Loop%20Example">Loop Example</a>,
Up:<a rel=up href="#while">while</a>
<br>

<h3>11.1.2 An Example: <code>print-elements-of-list</code></h3>

<p>The <code>print-elements-of-list</code> function illustrates a <code>while</code>
loop with a list.

<p>The function requires several lines for its output.  If you are
reading this in Emacs 21 or a later version, you can evaluate the
following expression inside of Info, as usual.

<p>If you are using an earlier version of Emacs, you need to copy the
necessary expressions to your <code>*scratch*</code> buffer and evaluate
them there.  This is because the echo area had only one line in the
earlier versions.

<p>You can copy the expressions by marking the beginning of the region
with <kbd>C-&lt;SPC&gt;</kbd> (<code>set-mark-command</code>), moving the cursor to
the end of the region and then copying the region using <kbd>M-w</kbd>
(<code>copy-region-as-kill</code>).  In the <code>*scratch*</code> buffer, you can
yank the expressions back by typing <kbd>C-y</kbd> (<code>yank</code>).

<p>After you have copied the expressions to the <code>*scratch*</code> buffer,
evaluate each expression in turn.  Be sure to evaluate the last
expression, <code>(print-elements-of-list animals)</code>, by typing
<kbd>C-u C-x C-e</kbd>, that is, by giving an argument to
<code>eval-last-sexp</code>.  This will cause the result of the evaluation
to be printed in the <code>*scratch*</code> buffer instead of being printed
in the echo area.  (Otherwise you will see something like this in your
echo area: <code>^Jgiraffe^J^Jgazelle^J^Jlion^J^Jtiger^Jnil</code>, in which
each <code>^J</code> stands for a `newline'.)

<p>If you are using Emacs 21 or later, you can evaluate these expressions
directly in the Info buffer, and the echo area will grow to show the
results.

<pre>(setq animals '(gazelle giraffe lion tiger))

(defun print-elements-of-list (list)
  "Print each element of LIST on a line of its own."
  (while list
    (print (car list))
    (setq list (cdr list))))

(print-elements-of-list animals)
</pre>

<p>When you evaluate the three expressions in sequence, you will see
this:

<pre>giraffe

gazelle

lion

tiger
nil
</pre>

<p>Each element of the list is printed on a line of its own (that is what
the function <code>print</code> does) and then the value returned by the
function is printed.  Since the last expression in the function is the
<code>while</code> loop, and since <code>while</code> loops always return
<code>nil</code>, a <code>nil</code> is printed after the last element of the list.

<p><hr>
Node:<a name="Incrementing%20Loop">Incrementing Loop</a>,
Next:<a rel=next href="#Decrementing%20Loop">Decrementing Loop</a>,
Previous:<a rel=previous href="#print-elements-of-list">print-elements-of-list</a>,
Up:<a rel=up href="#while">while</a>
<br>

<h3>11.1.3 A Loop with an Incrementing Counter</h3>

<p>A loop is not useful unless it stops when it ought.  Besides
controlling a loop with a list, a common way of stopping a loop is to
write the first argument as a test that returns false when the correct
number of repetitions are complete.  This means that the loop must
have a counter--an expression that counts how many times the loop
repeats itself.

<p>The test can be an expression such as <code>(&lt; count desired-number)</code>
which returns <code>t</code> for true if the value of <code>count</code> is less
than the <code>desired-number</code> of repetitions and <code>nil</code> for false if
the value of <code>count</code> is equal to or is greater than the
<code>desired-number</code>.  The expression that increments the count can be
a simple <code>setq</code> such as <code>(setq count (1+ count))</code>, where
<code>1+</code> is a built-in function in Emacs Lisp that adds 1 to its
argument.  (The expression <code>(1+&nbsp;count)</code> has the same result as
<code>(+&nbsp;count&nbsp;1)</code>, but is easier for a human to read.)

<p>The template for a <code>while</code> loop controlled by an incrementing
counter looks like this:

<pre><var>set-count-to-initial-value</var>
(while (&lt; count desired-number)         ; true-or-false-test
  <var>body</var><small>...</small>
  (setq count (1+ count)))              ; incrementer
</pre>

<p>Note that you need to set the initial value of <code>count</code>; usually it
is set to 1.

<ul>
<li><a href="#Incrementing%20Example">Incrementing Example</a>:         Counting pebbles in a triangle. 
<li><a href="#Inc%20Example%20parts">Inc Example parts</a>:            The parts of the function definition. 
<li><a href="#Inc%20Example%20altogether">Inc Example altogether</a>:       Putting the function definition together. 
</ul>

<p><hr>
Node:<a name="Incrementing%20Example">Incrementing Example</a>,
Next:<a rel=next href="#Inc%20Example%20parts">Inc Example parts</a>,
Previous:<a rel=previous href="#Incrementing%20Loop">Incrementing Loop</a>,
Up:<a rel=up href="#Incrementing%20Loop">Incrementing Loop</a>
<br>

<h4>Example with incrementing counter</h4>

<p>Suppose you are playing on the beach and decide to make a triangle of
pebbles, putting one pebble in the first row, two in the second row,
three in the third row and so on, like this:

<br><p>
<pre>               *
              * *
             * * *
            * * * *
</pre>


<br><p>
<p>(About 2500 years ago, Pythagoras and others developed the beginnings of
number theory by considering questions such as this.)

<p>Suppose you want to know how many pebbles you will need to make a
triangle with 7 rows?

<p>Clearly, what you need to do is add up the numbers from 1 to 7.  There
are two ways to do this; start with the smallest number, one, and add up
the list in sequence, 1, 2, 3, 4 and so on; or start with the largest
number and add the list going down: 7, 6, 5, 4 and so on.  Because both
mechanisms illustrate common ways of writing <code>while</code> loops, we will
create two examples, one counting up and the other counting down.  In
this first example, we will start with 1 and add 2, 3, 4 and so on.

<p>If you are just adding up a short list of numbers, the easiest way to do
it is to add up all the numbers at once.  However, if you do not know
ahead of time how many numbers your list will have, or if you want to be
prepared for a very long list, then you need to design your addition so
that what you do is repeat a simple process many times instead of doing
a more complex process once.

<p>For example, instead of adding up all the pebbles all at once, what you
can do is add the number of pebbles in the first row, 1, to the number
in the second row, 2, and then add the total of those two rows to the
third row, 3.  Then you can add the number in the fourth row, 4, to the
total of the first three rows; and so on.

<p>The critical characteristic of the process is that each repetitive
action is simple.  In this case, at each step we add only two numbers,
the number of pebbles in the row and the total already found.  This
process of adding two numbers is repeated again and again until the last
row has been added to the total of all the preceding rows.  In a more
complex loop the repetitive action might not be so simple, but it will
be simpler than doing everything all at once.

<p><hr>
Node:<a name="Inc%20Example%20parts">Inc Example parts</a>,
Next:<a rel=next href="#Inc%20Example%20altogether">Inc Example altogether</a>,
Previous:<a rel=previous href="#Incrementing%20Example">Incrementing Example</a>,
Up:<a rel=up href="#Incrementing%20Loop">Incrementing Loop</a>
<br>

<h4>The parts of the function definition</h4>

<p>The preceding analysis gives us the bones of our function definition:
first, we will need a variable that we can call <code>total</code> that will
be the total number of pebbles.  This will be the value returned by
the function.

<p>Second, we know that the function will require an argument: this
argument will be the total number of rows in the triangle.  It can be
called <code>number-of-rows</code>.

<p>Finally, we need a variable to use as a counter.  We could call this
variable <code>counter</code>, but a better name is <code>row-number</code>. 
That is because what the counter does is count rows, and a program
should be written to be as understandable as possible.

<p>When the Lisp interpreter first starts evaluating the expressions in the
function, the value of <code>total</code> should be set to zero, since we have
not added anything to it.  Then the function should add the number of
pebbles in the first row to the total, and then add the number of
pebbles in the second to the total, and then add the number of
pebbles in the third row to the total, and so on, until there are no
more rows left to add.

<p>Both <code>total</code> and <code>row-number</code> are used only inside the
function, so they can be declared as local variables with <code>let</code>
and given initial values.  Clearly, the initial value for <code>total</code>
should be 0.  The initial value of <code>row-number</code> should be 1,
since we start with the first row.  This means that the <code>let</code>
statement will look like this:

<pre>  (let ((total 0)
        (row-number 1))
    <var>body</var><small>...</small>)
</pre>

<p>After the internal variables are declared and bound to their initial
values, we can begin the <code>while</code> loop.  The expression that serves
as the test should return a value of <code>t</code> for true so long as the
<code>row-number</code> is less than or equal to the <code>number-of-rows</code>. 
(If the expression tests true only so long as the row number is less
than the number of rows in the triangle, the last row will never be
added to the total; hence the row number has to be either less than or
equal to the number of rows.)

<p>Lisp provides the <code>&lt;=</code> function that returns true if the value of
its first argument is less than or equal to the value of its second
argument and false otherwise.  So the expression that the <code>while</code>
will evaluate as its test should look like this:

<pre>(&lt;= row-number number-of-rows)
</pre>

<p>The total number of pebbles can be found by repeatedly adding the number
of pebbles in a row to the total already found.  Since the number of
pebbles in the row is equal to the row number, the total can be found by
adding the row number to the total.  (Clearly, in a more complex
situation, the number of pebbles in the row might be related to the row
number in a more complicated way; if this were the case, the row number
would be replaced by the appropriate expression.)

<pre>(setq total (+ total row-number))
</pre>

<p>What this does is set the new value of <code>total</code> to be equal to the
sum of adding the number of pebbles in the row to the previous total.

<p>After setting the value of <code>total</code>, the conditions need to be
established for the next repetition of the loop, if there is one.  This
is done by incrementing the value of the <code>row-number</code> variable,
which serves as a counter.  After the <code>row-number</code> variable has
been incremented, the true-or-false-test at the beginning of the
<code>while</code> loop tests whether its value is still less than or equal to
the value of the <code>number-of-rows</code> and if it is, adds the new value
of the <code>row-number</code> variable to the <code>total</code> of the previous
repetition of the loop.

<p>The built-in Emacs Lisp function <code>1+</code> adds 1 to a number, so the
<code>row-number</code> variable can be incremented with this expression:

<pre>(setq row-number (1+ row-number))
</pre>

<p><hr>
Node:<a name="Inc%20Example%20altogether">Inc Example altogether</a>,
Previous:<a rel=previous href="#Inc%20Example%20parts">Inc Example parts</a>,
Up:<a rel=up href="#Incrementing%20Loop">Incrementing Loop</a>
<br>

<h4>Putting the function definition together</h4>

<p>We have created the parts for the function definition; now we need to
put them together.

<p>First, the contents of the <code>while</code> expression:

<pre>(while (&lt;= row-number number-of-rows)   ; true-or-false-test
  (setq total (+ total row-number))
  (setq row-number (1+ row-number)))    ; incrementer
</pre>

<p>Along with the <code>let</code> expression varlist, this very nearly
completes the body of the function definition.  However, it requires
one final element, the need for which is somewhat subtle.

<p>The final touch is to place the variable <code>total</code> on a line by
itself after the <code>while</code> expression.  Otherwise, the value returned
by the whole function is the value of the last expression that is
evaluated in the body of the <code>let</code>, and this is the value
returned by the <code>while</code>, which is always <code>nil</code>.

<p>This may not be evident at first sight.  It almost looks as if the
incrementing expression is the last expression of the whole function. 
But that expression is part of the body of the <code>while</code>; it is the
last element of the list that starts with the symbol <code>while</code>. 
Moreover, the whole of the <code>while</code> loop is a list within the body
of the <code>let</code>.

<p>In outline, the function will look like this:

<pre>(defun <var>name-of-function</var> (<var>argument-list</var>)
  "<var>documentation</var><small>...</small>"
  (let (<var>varlist</var>)
    (while (<var>true-or-false-test</var>)
      <var>body-of-while</var><small>...</small> )
    <small>...</small> )                     ; Need final expression here.
</pre>

<p>The result of evaluating the <code>let</code> is what is going to be returned
by the <code>defun</code> since the <code>let</code> is not embedded within any
containing list, except for the <code>defun</code> as a whole.  However, if
the <code>while</code> is the last element of the <code>let</code> expression, the
function will always return <code>nil</code>.  This is not what we want! 
Instead, what we want is the value of the variable <code>total</code>.  This
is returned by simply placing the symbol as the last element of the list
starting with <code>let</code>.  It gets evaluated after the preceding
elements of the list are evaluated, which means it gets evaluated after
it has been assigned the correct value for the total.

<p>It may be easier to see this by printing the list starting with
<code>let</code> all on one line.  This format makes it evident that the
<var>varlist</var> and <code>while</code> expressions are the second and third
elements of the list starting with <code>let</code>, and the <code>total</code> is
the last element:

<pre>(let (<var>varlist</var>) (while (<var>true-or-false-test</var>) <var>body-of-while</var><small>...</small> ) total)
</pre>

<p>Putting everything together, the <code>triangle</code> function definition
looks like this:

<pre>(defun triangle (number-of-rows)    ; Version with
                                    ;   incrementing counter.
  "Add up the number of pebbles in a triangle.
The first row has one pebble, the second row two pebbles,
the third row three pebbles, and so on.
The argument is NUMBER-OF-ROWS."
  (let ((total 0)
        (row-number 1))
    (while (&lt;= row-number number-of-rows)
      (setq total (+ total row-number))
      (setq row-number (1+ row-number)))
    total))
</pre>

<p>After you have installed <code>triangle</code> by evaluating the function, you
can try it out.  Here are two examples:

<pre>(triangle 4)

(triangle 7)
</pre>

<p>The sum of the first four numbers is 10 and the sum of the first seven
numbers is 28.

<p><hr>
Node:<a name="Decrementing%20Loop">Decrementing Loop</a>,
Previous:<a rel=previous href="#Incrementing%20Loop">Incrementing Loop</a>,
Up:<a rel=up href="#while">while</a>
<br>

<h3>11.1.4 Loop with a Decrementing Counter</h3>

<p>Another common way to write a <code>while</code> loop is to write the test
so that it determines whether a counter is greater than zero.  So long
as the counter is greater than zero, the loop is repeated.  But when
the counter is equal to or less than zero, the loop is stopped.  For
this to work, the counter has to start out greater than zero and then
be made smaller and smaller by a form that is evaluated
repeatedly.

<p>The test will be an expression such as <code>(&gt; counter 0)</code> which
returns <code>t</code> for true if the value of <code>counter</code> is greater
than zero, and <code>nil</code> for false if the value of <code>counter</code> is
equal to or less than zero.  The expression that makes the number
smaller and smaller can be a simple <code>setq</code> such as <code>(setq
counter (1- counter))</code>, where <code>1-</code> is a built-in function in
Emacs Lisp that subtracts 1 from its argument.

<p>The template for a decrementing <code>while</code> loop looks like this:

<pre>(while (&gt; counter 0)                    ; true-or-false-test
  <var>body</var><small>...</small>
  (setq counter (1- counter)))          ; decrementer
</pre>

<ul>
<li><a href="#Decrementing%20Example">Decrementing Example</a>:         More pebbles on the beach. 
<li><a href="#Dec%20Example%20parts">Dec Example parts</a>:            The parts of the function definition. 
<li><a href="#Dec%20Example%20altogether">Dec Example altogether</a>:       Putting the function definition together. 
</ul>

<p><hr>
Node:<a name="Decrementing%20Example">Decrementing Example</a>,
Next:<a rel=next href="#Dec%20Example%20parts">Dec Example parts</a>,
Previous:<a rel=previous href="#Decrementing%20Loop">Decrementing Loop</a>,
Up:<a rel=up href="#Decrementing%20Loop">Decrementing Loop</a>
<br>

<h4>Example with decrementing counter</h4>

<p>To illustrate a loop with a decrementing counter, we will rewrite the
<code>triangle</code> function so the counter decreases to zero.

<p>This is the reverse of the earlier version of the function.  In this
case, to find out how many pebbles are needed to make a triangle with
3 rows, add the number of pebbles in the third row, 3, to the number
in the preceding row, 2, and then add the total of those two rows to
the row that precedes them, which is 1.

<p>Likewise, to find the number of pebbles in a triangle with 7 rows, add
the number of pebbles in the seventh row, 7, to the number in the
preceding row, which is 6, and then add the total of those two rows to
the row that precedes them, which is 5, and so on.  As in the previous
example, each addition only involves adding two numbers, the total of
the rows already added up and the number of pebbles in the row that is
being added to the total.  This process of adding two numbers is
repeated again and again until there are no more pebbles to add.

<p>We know how many pebbles to start with: the number of pebbles in the
last row is equal to the number of rows.  If the triangle has seven
rows, the number of pebbles in the last row is 7.  Likewise, we know how
many pebbles are in the preceding row: it is one less than the number in
the row.

<p><hr>
Node:<a name="Dec%20Example%20parts">Dec Example parts</a>,
Next:<a rel=next href="#Dec%20Example%20altogether">Dec Example altogether</a>,
Previous:<a rel=previous href="#Decrementing%20Example">Decrementing Example</a>,
Up:<a rel=up href="#Decrementing%20Loop">Decrementing Loop</a>
<br>

<h4>The parts of the function definition</h4>

<p>We start with three variables: the total number of rows in the
triangle; the number of pebbles in a row; and the total number of
pebbles, which is what we want to calculate.  These variables can be
named <code>number-of-rows</code>, <code>number-of-pebbles-in-row</code>, and
<code>total</code>, respectively.

<p>Both <code>total</code> and <code>number-of-pebbles-in-row</code> are used only
inside the function and are declared with <code>let</code>.  The initial
value of <code>total</code> should, of course, be zero.  However, the
initial value of <code>number-of-pebbles-in-row</code> should be equal to
the number of rows in the triangle, since the addition will start with
the longest row.

<p>This means that the beginning of the <code>let</code> expression will look
like this:

<pre>(let ((total 0)
      (number-of-pebbles-in-row number-of-rows))
  <var>body</var><small>...</small>)
</pre>

<p>The total number of pebbles can be found by repeatedly adding the number
of pebbles in a row to the total already found, that is, by repeatedly
evaluating the following expression:

<pre>(setq total (+ total number-of-pebbles-in-row))
</pre>

<p>After the <code>number-of-pebbles-in-row</code> is added to the <code>total</code>,
the <code>number-of-pebbles-in-row</code> should be decremented by one, since
the next time the loop repeats, the preceding row will be
added to the total.

<p>The number of pebbles in a preceding row is one less than the number of
pebbles in a row, so the built-in Emacs Lisp function <code>1-</code> can be
used to compute the number of pebbles in the preceding row.  This can be
done with the following expression:

<pre>(setq number-of-pebbles-in-row
      (1- number-of-pebbles-in-row))
</pre>

<p>Finally, we know that the <code>while</code> loop should stop making repeated
additions when there are no pebbles in a row.  So the test for
the <code>while</code> loop is simply:

<pre>(while (&gt; number-of-pebbles-in-row 0)
</pre>

<p><hr>
Node:<a name="Dec%20Example%20altogether">Dec Example altogether</a>,
Previous:<a rel=previous href="#Dec%20Example%20parts">Dec Example parts</a>,
Up:<a rel=up href="#Decrementing%20Loop">Decrementing Loop</a>
<br>

<h4>Putting the function definition together</h4>

<p>We can put these expressions together to create a function definition
that works.  However, on examination, we find that one of the local
variables is unneeded!

<p>The function definition looks like this:

<pre>;;; First subtractive version.
(defun triangle (number-of-rows)
  "Add up the number of pebbles in a triangle."
  (let ((total 0)
        (number-of-pebbles-in-row number-of-rows))
    (while (&gt; number-of-pebbles-in-row 0)
      (setq total (+ total number-of-pebbles-in-row))
      (setq number-of-pebbles-in-row
            (1- number-of-pebbles-in-row)))
    total))
</pre>

<p>As written, this function works.

<p>However, we do not need <code>number-of-pebbles-in-row</code>.

<p>When the <code>triangle</code> function is evaluated, the symbol
<code>number-of-rows</code> will be bound to a number, giving it an initial
value.  That number can be changed in the body of the function as if
it were a local variable, without any fear that such a change will
effect the value of the variable outside of the function.  This is a
very useful characteristic of Lisp; it means that the variable
<code>number-of-rows</code> can be used anywhere in the function where
<code>number-of-pebbles-in-row</code> is used.

<p>Here is a second version of the function written a bit more cleanly:

<pre>(defun triangle (number)                ; Second version.
  "Return sum of numbers 1 through NUMBER inclusive."
  (let ((total 0))
    (while (&gt; number 0)
      (setq total (+ total number))
      (setq number (1- number)))
    total))
</pre>

<p>In brief, a properly written <code>while</code> loop will consist of three parts:

<ol type=1 start=1>
</p><li>A test that will return false after the loop has repeated itself the
correct number of times.

<li>An expression the evaluation of which will return the value desired
after being repeatedly evaluated.

<li>An expression to change the value passed to the true-or-false-test so
that the test returns false after the loop has repeated itself the right
number of times.
</ol>

<p><hr>
Node:<a name="dolist%20dotimes">dolist dotimes</a>,
Next:<a rel=next href="#Recursion">Recursion</a>,
Previous:<a rel=previous href="#while">while</a>,
Up:<a rel=up href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>
<br>

<h2>11.2 Save your time: <code>dolist</code> and <code>dotimes</code></h2>

<p>In addition to <code>while</code>, both <code>dolist</code> and <code>dotimes</code>
provide for looping.  Sometimes these are quicker to write than the
equivalent <code>while</code> loop.  Both are Lisp macros.  (See <a href="elisp.html#Macros">Macros</a>. )

<p><code>dolist</code> works like a <code>while</code> loop that `<small>CDR</small>s down a
list':  <code>dolist</code> automatically shortens the list each time it
loops--takes the <small>CDR</small> of the list--and binds the <small>CAR</small> of
each shorter version of the list to the first of its arguments.

<p><code>dotimes</code> loops a specific number of time: you specify the number.

<ul>
<li><a href="#dolist">dolist</a>: 
<li><a href="#dotimes">dotimes</a>: 
</ul>

<p><hr>
Node:<a name="dolist">dolist</a>,
Next:<a rel=next href="#dotimes">dotimes</a>,
Previous:<a rel=previous href="#dolist%20dotimes">dolist dotimes</a>,
Up:<a rel=up href="#dolist%20dotimes">dolist dotimes</a>
<br>

<h4>The <code>dolist</code> Macro</h4>

<p>Suppose, for example, you want to reverse a list, so that
"first" "second" "third" becomes "third" "second" "first".

<p>In practice, you would use the <code>reverse</code> function, like this:

<pre>(setq animals '(gazelle giraffe lion tiger))

(reverse animals)
</pre>

<p>Here is how you could reverse the list using a <code>while</code> loop:

<pre>(setq animals '(gazelle giraffe lion tiger))

(defun reverse-list-with-while (list)
  "Using while, reverse the order of LIST."
  (let (value)  ; make sure list starts empty
    (while list
      (setq value (cons (car list) value))
      (setq list (cdr list)))
    value))

(reverse-list-with-while animals)
</pre>

<p>And here is how you could use the <code>dolist</code> macro:

<pre>(setq animals '(gazelle giraffe lion tiger))

(defun reverse-list-with-dolist (list)
  "Using dolist, reverse the order of LIST."
  (let (value)  ; make sure list starts empty
    (dolist (element list value)
      (setq value (cons element value)))))

(reverse-list-with-dolist animals)
</pre>

<p>In Info, you can place your cursor after the closing parenthesis of
each expression and type <kbd>C-x C-e</kbd>; in each case, you should see

<pre>(tiger lion giraffe gazelle)
</pre>

<p>in the echo area.

<p>For this example, the existing <code>reverse</code> function is obviously best. 
The <code>while</code> loop is just like our first example (see <a href="#Loop%20Example">A <code>while</code> Loop and a List</a>).  The <code>while</code> first
checks whether the list has elements; if so, it constructs a new list
by adding the first element of the list to the existing list (which in
the first iteration of the loop is <code>nil</code>).  Since the second
element is prepended in front of the first element, and the third
element is prepended in front of the second element, the list is reversed.

<p>In the expression using a <code>while</code> loop,
the <code>(setq&nbsp;list&nbsp;(cdr&nbsp;list))</code>
expression shortens the list, so the <code>while</code> loop eventually
stops.  In addition, it provides the <code>cons</code> expression with a new
first element by creating a new and shorter list at each repetition of
the loop.

<p>The <code>dolist</code> expression does very much the same as the
<code>while</code> expression, except that the <code>dolist</code> macro does some
of the work you have to do when writing a <code>while</code> expression.

<p>Like a <code>while</code> loop, a <code>dolist</code> loops.  What is different is
that it automatically shortens the list each time it loops -- it
`<small>CDR</small>s down the list' on its own -- and it automatically binds
the <small>CAR</small> of each shorter version of the list to the first of its
arguments.

<p>In the example, the <small>CAR</small> of each shorter version of the list is
referred to using the symbol <code>element</code>, the list itself is called
<code>list</code>, and the value returned is called <code>value</code>.  The
remainder of the <code>dolist</code> expression is the body.

<p>The <code>dolist</code> expression binds the <small>CAR</small> of each shorter
version of the list to <code>element</code> and then evaluates the body of
the expression; and repeats the loop.  The result is returned in
<code>value</code>.

<p><hr>
Node:<a name="dotimes">dotimes</a>,
Previous:<a rel=previous href="#dolist">dolist</a>,
Up:<a rel=up href="#dolist%20dotimes">dolist dotimes</a>
<br>

<h4>The <code>dotimes</code> Macro</h4>

<p>The <code>dotimes</code> macro is similar to <code>dolist</code>, except that it
loops a specific number of times.

<p>The first argument to <code>dotimes</code> is assigned the numbers 0, 1, 2
and so forth each time around the loop, and the value of the third
argument is returned.  You need to provide the value of the second
argument, which is how many times the macro loops.

<p>For example, the following binds the numbers from 0 up to, but not
including, the number 3 to the first argument, <var>number</var>, and then
constructs a list of the three numbers.  (The first number is 0, the
second number is 1, and the third number is 2; this makes a total of
three numbers in all, starting with zero as the first number.)

<pre>(let (value)      ; otherwise a value is a void variable
  (dotimes (number 3 value)
    (setq value (cons number value))))

=&gt; (2 1 0)
</pre>

<p><code>dotimes</code> returns <code>value</code>, so the way to use
<code>dotimes</code> is to operate on some expression <var>number</var> number of
times and then return the result, either as a list or an atom.

<p>Here is an example of a <code>defun</code> that uses <code>dotimes</code> to add
up the number of pebbles in a triangle.

<pre>(defun triangle-using-dotimes (number-of-rows)
  "Using dotimes, add up the number of pebbles in a triangle."
(let ((total 0))  ; otherwise a total is a void variable
  (dotimes (number number-of-rows total)
    (setq total (+ total (1+ number))))))

(triangle-using-dotimes 4)
</pre>

<p><hr>
Node:<a name="Recursion">Recursion</a>,
Next:<a rel=next href="#Looping%20exercise">Looping exercise</a>,
Previous:<a rel=previous href="#dolist%20dotimes">dolist dotimes</a>,
Up:<a rel=up href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>
<br>

<h2>11.3 Recursion</h2>

<p>A recursive function contains code that tells the Lisp interpreter to
call a program that runs exactly like itself, but with slightly
different arguments.  The code runs exactly the same because it has
the same name.  However, even though it has the same name, it is not
the same thread of execution.  It is different.  In the jargon, it is
a different `instance'.

<p>Eventually, if the program is written correctly, the `slightly
different arguments' will become sufficiently different from the first
arguments that the final instance will stop.

<ul>
<li><a href="#Building%20Robots">Building Robots</a>:              Same model, different serial number ... 
<li><a href="#Recursive%20Definition%20Parts">Recursive Definition Parts</a>:   Walk until you stop ... 
<li><a href="#Recursion%20with%20list">Recursion with list</a>:          Using a list as the test whether to recurse. 
<li><a href="#Recursive%20triangle%20function">Recursive triangle function</a>: 
<li><a href="#Recursion%20with%20cond">Recursion with cond</a>: 
<li><a href="#Recursive%20Patterns">Recursive Patterns</a>:           Often used templates. 
<li><a href="#No%20Deferment">No Deferment</a>:                 Don't store up work ... 
<li><a href="#No%20deferment%20solution">No deferment solution</a>: 
</ul>

<p><hr>
Node:<a name="Building%20Robots">Building Robots</a>,
Next:<a rel=next href="#Recursive%20Definition%20Parts">Recursive Definition Parts</a>,
Previous:<a rel=previous href="#Recursion">Recursion</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.1 Building Robots: Extending the Metaphor</h3>

<p>It is sometimes helpful to think of a running program as a robot that
does a job.  In doing its job, a recursive function calls on a second
robot to help it.  The second robot is identical to the first in every
way, except that the second robot helps the first and has been
passed different arguments than the first.

<p>In a recursive function, the second robot may call a third; and the
third may call a fourth, and so on.  Each of these is a different
entity; but all are clones.

<p>Since each robot has slightly different instructions--the arguments
will differ from one robot to the next--the last robot should know
when to stop.

<p>Let's expand on the metaphor in which a computer program is a robot.

<p>A function definition provides the blueprints for a robot.  When you
install a function definition, that is, when you evaluate a
<code>defun</code> special form, you install the necessary equipment to
build robots.  It is as if you were in a factory, setting up an
assembly line.  Robots with the same name are built according to the
same blueprints.  So they have, as it were, the same `model number',
but a different `serial number'.

<p>We often say that a recursive function `calls itself'.  What we mean
is that the instructions in a recursive function cause the Lisp
interpreter to run a different function that has the same name and
does the same job as the first, but with different arguments.

<p>It is important that the arguments differ from one instance to the
next; otherwise, the process will never stop.

<p><hr>
Node:<a name="Recursive%20Definition%20Parts">Recursive Definition Parts</a>,
Next:<a rel=next href="#Recursion%20with%20list">Recursion with list</a>,
Previous:<a rel=previous href="#Building%20Robots">Building Robots</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.2 The Parts of a Recursive Definition</h3>

<p>A recursive function typically contains a conditional expression which
has three parts:

<ol type=1 start=1>
</p><li>A true-or-false-test that determines whether the function is called
again, here called the <dfn>do-again-test</dfn>.

<li>The name of the function.  When this name is called, a new instance of
the function--a new robot, as it were--is created and told what to do.

<li>An expression that returns a different value each time the function is
called, here called the <dfn>next-step-expression</dfn>.  Consequently, the
argument (or arguments) passed to the new instance of the function
will be different from that passed to the previous instance.  This
causes the conditional expression, the <dfn>do-again-test</dfn>, to test
false after the correct number of repetitions.
</ol>

<p>Recursive functions can be much simpler than any other kind of
function.  Indeed, when people first start to use them, they often look
so mysteriously simple as to be incomprehensible.  Like riding a
bicycle, reading a recursive function definition takes a certain knack
which is hard at first but then seems simple.

<p>There are several different common recursive patterns.  A very simple
pattern looks like this:

<pre>(defun <var>name-of-recursive-function</var> (<var>argument-list</var>)
  "<var>documentation</var><small>...</small>"
  (if <var>do-again-test</var>
    <var>body</var><small>...</small>
    (<var>name-of-recursive-function</var>
         <var>next-step-expression</var>)))
</pre>

<p>Each time a recursive function is evaluated, a new instance of it is
created and told what to do.  The arguments tell the instance what to do.

<p>An argument is bound to the value of the next-step-expression.  Each
instance runs with a different value of the next-step-expression.

<p>The value in the next-step-expression is used in the do-again-test.

<p>The value returned by the next-step-expression is passed to the new
instance of the function, which evaluates it (or some
transmogrification of it) to determine whether to continue or stop. 
The next-step-expression is designed so that the do-again-test returns
false when the function should no longer be repeated.

<p>The do-again-test is sometimes called the <dfn>stop condition</dfn>,
since it stops the repetitions when it tests false.

<p><hr>
Node:<a name="Recursion%20with%20list">Recursion with list</a>,
Next:<a rel=next href="#Recursive%20triangle%20function">Recursive triangle function</a>,
Previous:<a rel=previous href="#Recursive%20Definition%20Parts">Recursive Definition Parts</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.3 Recursion with a List</h3>

<p>The example of a <code>while</code> loop that printed the elements of a list
of numbers can be written recursively.  Here is the code, including
an expression to set the value of the variable <code>animals</code> to a list.

<p>If you are using Emacs 20 or before, this example must be copied to
the <code>*scratch*</code> buffer and each expression must be evaluated
there.  Use <kbd>C-u C-x C-e</kbd> to evaluate the
<code>(print-elements-recursively animals)</code> expression so that the
results are printed in the buffer; otherwise the Lisp interpreter will
try to squeeze the results into the one line of the echo area.

<p>Also, place your cursor immediately after the last closing parenthesis
of the <code>print-elements-recursively</code> function, before the comment. 
Otherwise, the Lisp interpreter will try to evaluate the comment.

<p>If you are using Emacs 21 or later, you can evaluate this expression
directly in Info.

<pre>(setq animals '(gazelle giraffe lion tiger))

(defun print-elements-recursively (list)
  "Print each element of LIST on a line of its own.
Uses recursion."
  (if list                              ; do-again-test
      (progn
        (print (car list))              ; body
        (print-elements-recursively     ; recursive call
         (cdr list)))))                 ; next-step-expression

(print-elements-recursively animals)
</pre>

<p>The <code>print-elements-recursively</code> function first tests whether
there is any content in the list; if there is, the function prints the
first element of the list, the <small>CAR</small> of the list.  Then the
function `invokes itself', but gives itself as its argument, not the
whole list, but the second and subsequent elements of the list, the
<small>CDR</small> of the list.

<p>Put another way, if the list is not empty, the function invokes
another instance of code that is similar to the initial code, but is a
different thread of execution, with different arguments than the first
instance.

<p>Put in yet another way, if the list is not empty, the first robot
assemblies a second robot and tells it what to do; the second robot is
a different individual from the first, but is the same model.

<p>When the second evaluation occurs, the <code>if</code> expression is
evaluated and if true, prints the first element of the list it
receives as its argument (which is the second element of the original
list).  Then the function `calls itself' with the <small>CDR</small> of the list
it is invoked with, which (the second time around) is the <small>CDR</small> of
the <small>CDR</small> of the original list.

<p>Note that although we say that the function `calls itself', what we
mean is that the Lisp interpreter assembles and instructs a new
instance of the program.  The new instance is a clone of the first,
but is a separate individual.

<p>Each time the function `invokes itself', it invokes itself on a
shorter version of the original list.  It creates a new instance that
works on a shorter list.

<p>Eventually, the function invokes itself on an empty list.  It creates
a new instance whose argument is <code>nil</code>.  The conditional expression
tests the value of <code>list</code>.  Since the value of <code>list</code> is
<code>nil</code>, the <code>if</code> expression tests false so the then-part is
not evaluated.  The function as a whole then returns <code>nil</code>.

<p>When you evaluate <code>(print-elements-recursively animals)</code> in the
<code>*scratch*</code> buffer, you see this result:

<pre>giraffe

gazelle

lion

tiger
nil
</pre>

<p><hr>
Node:<a name="Recursive%20triangle%20function">Recursive triangle function</a>,
Next:<a rel=next href="#Recursion%20with%20cond">Recursion with cond</a>,
Previous:<a rel=previous href="#Recursion%20with%20list">Recursion with list</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.4 Recursion in Place of a Counter</h3>

<p>The <code>triangle</code> function described in a previous section can also
be written recursively.  It looks like this:

<pre>(defun triangle-recursively (number)
  "Return the sum of the numbers 1 through NUMBER inclusive.
Uses recursion."
  (if (= number 1)                    ; do-again-test
      1                               ; then-part
    (+ number                         ; else-part
       (triangle-recursively          ; recursive call
        (1- number)))))               ; next-step-expression

(triangle-recursively 7)
</pre>

<p>You can install this function by evaluating it and then try it by
evaluating <code>(triangle-recursively 7)</code>.  (Remember to put your
cursor immediately after the last parenthesis of the function
definition, before the comment.)  The function evaluates to 28.

<p>To understand how this function works, let's consider what happens in the
various cases when the function is passed 1, 2, 3, or 4 as the value of
its argument.

<ul>
<li><a href="#Recursive%20Example%20arg%20of%201%20or%202">Recursive Example arg of 1 or 2</a>: 
<li><a href="#Recursive%20Example%20arg%20of%203%20or%204">Recursive Example arg of 3 or 4</a>: 
</ul>

<p><hr>
Node:<a name="Recursive%20Example%20arg%20of%201%20or%202">Recursive Example arg of 1 or 2</a>,
Next:<a rel=next href="#Recursive%20Example%20arg%20of%203%20or%204">Recursive Example arg of 3 or 4</a>,
Previous:<a rel=previous href="#Recursive%20triangle%20function">Recursive triangle function</a>,
Up:<a rel=up href="#Recursive%20triangle%20function">Recursive triangle function</a>
<br>

<h4>An argument of 1 or 2</h4>

<p>First, what happens if the value of the argument is 1?

<p>The function has an <code>if</code> expression after the documentation
string.  It tests whether the value of <code>number</code> is equal to 1; if
so, Emacs evaluates the then-part of the <code>if</code> expression, which
returns the number 1 as the value of the function.  (A triangle with
one row has one pebble in it.)

<p>Suppose, however, that the value of the argument is 2.  In this case,
Emacs evaluates the else-part of the <code>if</code> expression.

<p>The else-part consists of an addition, the recursive call to
<code>triangle-recursively</code> and a decrementing action; and it looks like
this:

<pre>(+ number (triangle-recursively (1- number)))
</pre>

<p>When Emacs evaluates this expression, the innermost expression is
evaluated first; then the other parts in sequence.  Here are the steps
in detail:

<dl>
<dt><i>Step 1 &nbsp;&nbsp; Evaluate the innermost expression.</i>
<dd>
The innermost expression is <code>(1- number)</code> so Emacs decrements the
value of <code>number</code> from 2 to 1.

<br><dt><i>Step 2 &nbsp;&nbsp; Evaluate the <code>triangle-recursively</code> function.</i>
<dd>
The Lisp interpreter creates an individual instance of
<code>triangle-recursively</code>.  It does not matter that this function is
contained within itself.  Emacs passes the result Step 1 as the
argument used by this instance of the <code>triangle-recursively</code>
function

<p>In this case, Emacs evaluates <code>triangle-recursively</code> with an
argument of 1.  This means that this evaluation of
<code>triangle-recursively</code> returns 1.

<br><dt><i>Step 3 &nbsp;&nbsp; Evaluate the value of <code>number</code>.</i>
<dd>
The variable <code>number</code> is the second element of the list that
starts with <code>+</code>; its value is 2.

<br><dt><i>Step 4 &nbsp;&nbsp; Evaluate the <code>+</code> expression.</i>
<dd>
The <code>+</code> expression receives two arguments, the first
from the evaluation of <code>number</code> (Step 3) and the second from the
evaluation of <code>triangle-recursively</code> (Step 2).

<p>The result of the addition is the sum of 2 plus 1, and the number 3 is
returned, which is correct.  A triangle with two rows has three
pebbles in it. 
</dl>

<p><hr>
Node:<a name="Recursive%20Example%20arg%20of%203%20or%204">Recursive Example arg of 3 or 4</a>,
Previous:<a rel=previous href="#Recursive%20Example%20arg%20of%201%20or%202">Recursive Example arg of 1 or 2</a>,
Up:<a rel=up href="#Recursive%20triangle%20function">Recursive triangle function</a>
<br>

<h4>An argument of 3 or 4</h4>

<p>Suppose that <code>triangle-recursively</code> is called with an argument of
3.

<dl>
<dt><i>Step 1 &nbsp;&nbsp; Evaluate the do-again-test.</i>
<dd>
The <code>if</code> expression is evaluated first.  This is the do-again
test and returns false, so the else-part of the <code>if</code> expression
is evaluated.  (Note that in this example, the do-again-test causes
the function to call itself when it tests false, not when it tests
true.)

<br><dt><i>Step 2 &nbsp;&nbsp; Evaluate the innermost expression of the else-part.</i>
<dd>
The innermost expression of the else-part is evaluated, which decrements
3 to 2.  This is the next-step-expression.

<br><dt><i>Step 3 &nbsp;&nbsp; Evaluate the <code>triangle-recursively</code> function.</i>
<dd>
The number 2 is passed to the <code>triangle-recursively</code> function.

<p>We know what happens when Emacs evaluates <code>triangle-recursively</code> with
an argument of 2.  After going through the sequence of actions described
earlier, it returns a value of 3.  So that is what will happen here.

<br><dt><i>Step 4 &nbsp;&nbsp; Evaluate the addition.</i>
<dd>
3 will be passed as an argument to the addition and will be added to the
number with which the function was called, which is 3. 
</dl>

<p>The value returned by the function as a whole will be 6.

<p>Now that we know what will happen when <code>triangle-recursively</code> is
called with an argument of 3, it is evident what will happen if it is
called with an argument of 4:

<blockquote>
In the recursive call, the evaluation of

<pre>(triangle-recursively (1- 4))
</pre>

<p>will return the value of evaluating

<pre>(triangle-recursively 3)
</pre>

<p>which is 6 and this value will be added to 4 by the addition in the
third line. 
</blockquote>

<p>The value returned by the function as a whole will be 10.

<p>Each time <code>triangle-recursively</code> is evaluated, it evaluates a
version of itself--a different instance of itself--with a smaller
argument, until the argument is small enough so that it does not
evaluate itself.

<p>Note that this particular design for a recursive function
requires that operations be deferred.

<p>Before <code>(triangle-recursively 7)</code> can calculate its answer, it
must call <code>(triangle-recursively 6)</code>; and before
<code>(triangle-recursively 6)</code> can calculate its answer, it must call
<code>(triangle-recursively 5)</code>; and so on.  That is to say, the
calculation that <code>(triangle-recursively 7)</code> makes must be
deferred until <code>(triangle-recursively 6)</code> makes its calculation;
and <code>(triangle-recursively 6)</code> must defer until
<code>(triangle-recursively 5)</code> completes; and so on.

<p>If each of these instances of <code>triangle-recursively</code> are thought
of as different robots, the first robot must wait for the second to
complete its job, which must wait until the third completes, and so
on.

<p>There is a way around this kind of waiting, which we will discuss in
<a href="#No%20Deferment">Recursion without Deferments</a>.

<p><hr>
Node:<a name="Recursion%20with%20cond">Recursion with cond</a>,
Next:<a rel=next href="#Recursive%20Patterns">Recursive Patterns</a>,
Previous:<a rel=previous href="#Recursive%20triangle%20function">Recursive triangle function</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.5 Recursion Example Using <code>cond</code></h3>

<p>The version of <code>triangle-recursively</code> described earlier is written
with the <code>if</code> special form.  It can also be written using another
special form called <code>cond</code>.  The name of the special form
<code>cond</code> is an abbreviation of the word <code>conditional</code>.

<p>Although the <code>cond</code> special form is not used as often in the
Emacs Lisp sources as <code>if</code>, it is used often enough to justify
explaining it.

<p>The template for a <code>cond</code> expression looks like this:

<pre>(cond
 <var>body</var><small>...</small>)
</pre>

<p>where the <var>body</var> is a series of lists.

<p>Written out more fully, the template looks like this:

<pre>(cond
 (<var>first-true-or-false-test</var> <var>first-consequent</var>)
 (<var>second-true-or-false-test</var> <var>second-consequent</var>)
 (<var>third-true-or-false-test</var> <var>third-consequent</var>)
  <small>...</small>)
</pre>

<p>When the Lisp interpreter evaluates the <code>cond</code> expression, it
evaluates the first element (the <small>CAR</small> or true-or-false-test) of
the first expression in a series of expressions within the body of the
<code>cond</code>.

<p>If the true-or-false-test returns <code>nil</code> the rest of that
expression, the consequent, is skipped and  the true-or-false-test of the
next expression is evaluated.  When an expression is found whose
true-or-false-test returns a value that is not <code>nil</code>, the
consequent of that expression is evaluated.  The consequent can be one
or more expressions.  If the consequent consists of more than one
expression, the expressions are evaluated in sequence and the value of
the last one is returned.  If the expression does not have a consequent,
the value of the true-or-false-test is returned.

<p>If none of the true-or-false-tests test true, the <code>cond</code> expression
returns <code>nil</code>.

<p>Written using <code>cond</code>, the <code>triangle</code> function looks like this:

<pre>(defun triangle-using-cond (number)
  (cond ((&lt;= number 0) 0)
        ((= number 1) 1)
        ((&gt; number 1)
         (+ number (triangle-using-cond (1- number))))))
</pre>

<p>In this example, the <code>cond</code> returns 0 if the number is less than or
equal to 0, it returns 1 if the number is 1 and it evaluates <code>(+
number (triangle-using-cond (1- number)))</code> if the number is greater than
1.

<p><hr>
Node:<a name="Recursive%20Patterns">Recursive Patterns</a>,
Next:<a rel=next href="#No%20Deferment">No Deferment</a>,
Previous:<a rel=previous href="#Recursion%20with%20cond">Recursion with cond</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.6 Recursive Patterns</h3>

<p>Here are three common recursive patterns.  Each involves a list. 
Recursion does not need to involve lists, but Lisp is designed for lists
and this provides a sense of its primal capabilities.

<ul>
<li><a href="#Every">Every</a>: 
<li><a href="#Accumulate">Accumulate</a>: 
<li><a href="#Keep">Keep</a>: 
</ul>

<p><hr>
Node:<a name="Every">Every</a>,
Next:<a rel=next href="#Accumulate">Accumulate</a>,
Previous:<a rel=previous href="#Recursive%20Patterns">Recursive Patterns</a>,
Up:<a rel=up href="#Recursive%20Patterns">Recursive Patterns</a>
<br>

<h4>Recursive Pattern: <em>every</em></h4>

<p>In the <code>every</code> recursive pattern, an action is performed on every
element of a list.

<p>The basic pattern is:

<ul>
<li>If a list be empty, return <code>nil</code>. 
<li>Else, act on the beginning of the list (the <small>CAR</small> of the list)
<ul>
    <li>    through a recursive call by the function on the rest (the
    <small>CDR</small>) of the list,
    <li>    and, optionally, combine the acted-on element, using <code>cons</code>,
    with the results of acting on the rest. 
    </ul>
</ul>

<p>Here is example:

<pre>(defun square-each (numbers-list)
  "Square each of a NUMBERS LIST, recursively."
  (if (not numbers-list)                ; do-again-test
      nil
    (cons
     (* (car numbers-list) (car numbers-list))
     (square-each (cdr numbers-list))))) ; next-step-expression

(square-each '(1 2 3))
    =&gt; (1 4 9)
</pre>

<p>If <code>numbers-list</code> is empty, do nothing.  But if it has content,
construct a list combining the square of the first number in the list
with the result of the recursive call.

<p>(The example follows the pattern exactly: <code>nil</code> is returned if
the numbers' list is empty.  In practice, you would write the
conditional so it carries out the action when the numbers' list is not
empty.)

<p>The <code>print-elements-recursively</code> function (see <a href="#Recursion%20with%20list">Recursion with a List</a>) is another example of an <code>every</code>
pattern, except in this case, rather than bring the results together
using <code>cons</code>, we print each element of output.

<p>The <code>print-elements-recursively</code> function looks like this:

<pre>(setq animals '(gazelle giraffe lion tiger))

(defun print-elements-recursively (list)
  "Print each element of LIST on a line of its own.
Uses recursion."
  (if list                              ; do-again-test
      (progn
        (print (car list))              ; body
        (print-elements-recursively     ; recursive call
         (cdr list)))))                 ; next-step-expression

(print-elements-recursively animals)
</pre>

<p>The pattern for <code>print-elements-recursively</code> is:

<ul>
<li>If the list be empty, do nothing. 
<li>But if the list has at least one element,
<ul>
    <li>    act on the beginning of the list (the <small>CAR</small> of the list),
    <li>    and make a recursive call on the rest (the <small>CDR</small>) of the list. 
    </ul>
</ul>

<p><hr>
Node:<a name="Accumulate">Accumulate</a>,
Next:<a rel=next href="#Keep">Keep</a>,
Previous:<a rel=previous href="#Every">Every</a>,
Up:<a rel=up href="#Recursive%20Patterns">Recursive Patterns</a>
<br>

<h4>Recursive Pattern: <em>accumulate</em></h4>

<p>Another recursive pattern is called the <code>accumulate</code> pattern.  In
the <code>accumulate</code> recursive pattern, an action is performed on
every element of a list and the result of that action is accumulated
with the results of performing the action on the other elements.

<p>This is very like the `every' pattern using <code>cons</code>, except that
<code>cons</code> is not used, but some other combiner.

<p>The pattern is:

<ul>
<li>If a list be empty, return zero or some other constant. 
<li>Else, act on the beginning of the list (the <small>CAR</small> of the list),
<ul>
    <li>    and combine that acted-on element, using <code>+</code> or
    some other combining function, with
    <li>    a recursive call by the function on the rest (the <small>CDR</small>) of the list. 
    </ul>
</ul>

<p>Here is an example:

<pre>(defun add-elements (numbers-list)
  "Add the elements of NUMBERS-LIST together."
  (if (not numbers-list)
      0
    (+ (car numbers-list) (add-elements (cdr numbers-list)))))

(add-elements '(1 2 3 4))
    =&gt; 10
</pre>

<p>See <a href="#Files%20List">Making a List of Files</a>, for an example of the
accumulate pattern.

<p><hr>
Node:<a name="Keep">Keep</a>,
Previous:<a rel=previous href="#Accumulate">Accumulate</a>,
Up:<a rel=up href="#Recursive%20Patterns">Recursive Patterns</a>
<br>

<h4>Recursive Pattern: <em>keep</em></h4>

<p>A third recursive pattern is called the <code>keep</code> pattern. 
In the <code>keep</code> recursive pattern, each element of a list is tested;
the element is acted on and the results are kept only if the element
meets a criterion.

<p>Again, this is very like the `every' pattern, except the element is
skipped unless it meets a criterion.

<p>The pattern has three parts:

<ul>
<li>If a list be empty, return <code>nil</code>. 
<li>Else, if the beginning of the list (the <small>CAR</small> of the list) passes
        a test
<ul>
    <li>    act on that element and combine it, using <code>cons</code> with
    <li>    a recursive call by the function on the rest (the <small>CDR</small>) of the list. 
    </ul>
<li>Otherwise, if the beginning of the list (the <small>CAR</small> of the list) fails
the test
<ul>
    <li>    skip on that element,
    <li>    and, recursively call the function on the rest (the <small>CDR</small>) of the list. 
    </ul>
</ul>

<p>Here is an example that uses <code>cond</code>:

<pre>(defun keep-three-letter-words (word-list)
  "Keep three letter words in WORD-LIST."
  (cond
   ;; First do-again-test: stop-condition
   ((not word-list) nil)

   ;; Second do-again-test: when to act
   ((eq 3 (length (symbol-name (car word-list))))
    ;; combine acted-on element with recursive call on shorter list
    (cons (car word-list) (keep-three-letter-words (cdr word-list))))

   ;; Third do-again-test: when to skip element;
   ;;   recursively call shorter list with next-step expression
   (t  (keep-three-letter-words (cdr word-list)))))

(keep-three-letter-words '(one two three four five six))
    =&gt; (one two six)
</pre>

<p>It goes without saying that you need not use <code>nil</code> as the test for
when to stop; and you can, of course, combine these patterns.

<p><hr>
Node:<a name="No%20Deferment">No Deferment</a>,
Next:<a rel=next href="#No%20deferment%20solution">No deferment solution</a>,
Previous:<a rel=previous href="#Recursive%20Patterns">Recursive Patterns</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.7 Recursion without Deferments</h3>

<p>Let's consider again what happens with the <code>triangle-recursively</code>
function.  We will find that the intermediate calculations are
deferred until all can be done.

<p>Here is the function definition:

<pre>(defun triangle-recursively (number)
  "Return the sum of the numbers 1 through NUMBER inclusive.
Uses recursion."
  (if (= number 1)                    ; do-again-test
      1                               ; then-part
    (+ number                         ; else-part
       (triangle-recursively          ; recursive call
        (1- number)))))               ; next-step-expression
</pre>

<p>What happens when we call this function with a argument of 7?

<p>The first instance of the <code>triangle-recursively</code> function adds
the number 7 to the value returned by a second instance of
<code>triangle-recursively</code>, an instance that has been passed an
argument of 6.  That is to say, the first calculation is:

<pre>(+ 7 (triangle-recursively 6)
</pre>

<p>The first instance of <code>triangle-recursively</code>--you may want to
think of it as a little robot--cannot complete its job.  It must hand
off the calculation for <code>(triangle-recursively 6)</code> to a second
instance of the program, to a second robot.  This second individual is
completely different from the first one; it is, in the jargon, a
`different instantiation'.  Or, put another way, it is a different
robot.  It is the same model as the first; it calculates triangle
numbers recursively; but it has a different serial number.

<p>And what does <code>(triangle-recursively 6)</code> return?  It returns the
number 6 added to the value returned by evaluating
<code>triangle-recursively</code> with an argument of 5.  Using the robot
metaphor, it asks yet another robot to help it.

<p>Now the total is:

<pre>(+ 7 6 (triangle-recursively 5)
</pre>

<p>And what happens next?

<pre>(+ 7 6 5 (triangle-recursively 4)
</pre>

<p>Each time <code>triangle-recursively</code> is called, except for the last
time, it creates another instance of the program--another robot--and
asks it to make a calculation.

<p>Eventually, the full addition is set up and performed:

<pre>(+ 7 6 5 4 3 2 1)
</pre>

<p>This design for the function defers the calculation of the first step
until the second can be done, and defers that until the third can be
done, and so on.  Each deferment means the computer must remember what
is being waited on.  This is not a problem when there are only a few
steps, as in this example.  But it can be a problem when there are
more steps.

<p><hr>
Node:<a name="No%20deferment%20solution">No deferment solution</a>,
Previous:<a rel=previous href="#No%20Deferment">No Deferment</a>,
Up:<a rel=up href="#Recursion">Recursion</a>
<br>

<h3>11.3.8 No Deferment Solution</h3>

<p>The solution to the problem of deferred operations is to write in a
manner that does not defer operations<a rel=footnote href="#fn-9"><sup>9</sup></a>.  This requires
writing to a different pattern, often one that involves writing two
function definitions, an `initialization' function and a `helper'
function.

<p>The `initialization' function sets up the job; the `helper' function
does the work.

<p>Here are the two function definitions for adding up numbers.  They are
so simple, I find them hard to understand.

<pre>(defun triangle-initialization (number)
  "Return the sum of the numbers 1 through NUMBER inclusive.
This is the `initialization' component of a two function
duo that uses recursion."
  (triangle-recursive-helper 0 0 number))
</pre>

<pre>(defun triangle-recursive-helper (sum counter number)
  "Return SUM, using COUNTER, through NUMBER inclusive.
This is the `helper' component of a two function duo
that uses recursion."
  (if (&gt; counter number)
      sum
    (triangle-recursive-helper (+ sum counter)  ; sum
                               (1+ counter)     ; counter
                               number)))        ; number
</pre>

<p>Install both function definitions by evaluating them, then call
<code>triangle-initialization</code> with 2 rows:

<pre>(triangle-initialization 2)
    =&gt; 3
</pre>

<p>The `initialization' function calls the first instance of the `helper'
function with three arguments: zero, zero, and a number which is the
number of rows in the triangle.

<p>The first two arguments passed to the `helper' function are
initialization values.  These values are changed when
<code>triangle-recursive-helper</code> invokes new instances.<a rel=footnote href="#fn-10"><sup>10</sup></a>

<p>Let's see what happens when we have a triangle that has one row.  (This
triangle will have one pebble in it!)

<p><code>triangle-initialization</code> will call its helper with
the arguments <code>0&nbsp;0&nbsp;1</code>.  That function will run the conditional
test whether <code>(&gt; counter number)</code>:

<pre>(&gt; 0 1)
</pre>

<p>and find that the result is false, so it will invoke
the then-part of the <code>if</code> clause:

<pre>    (triangle-recursive-helper
     (+ sum counter)  ; sum plus counter =&gt; sum
     (1+ counter)     ; increment counter =&gt; counter
     number)          ; number stays the same
</pre>

<p>which will first compute:

<pre>(triangle-recursive-helper (+ 0 0)  ; sum
                           (1+ 0)   ; counter
                           1)       ; number
<br>which is:<br>

(triangle-recursive-helper 0 1 1)
</pre>

<p>Again, <code>(&gt; counter number)</code> will be false, so again, the Lisp
interpreter will evaluate <code>triangle-recursive-helper</code>, creating a
new instance with new arguments.

<p>This new instance will be;

<pre>    (triangle-recursive-helper
     (+ sum counter)  ; sum plus counter =&gt; sum
     (1+ counter)     ; increment counter =&gt; counter
     number)          ; number stays the same

<br>which is:<br>

(triangle-recursive-helper 1 2 1)
</pre>

<p>In this case, the <code>(&gt; counter number)</code> test will be true!  So the
instance will return the value of the sum, which will be 1, as
expected.

<p>Now, let's pass <code>triangle-initialization</code> an argument
of 2, to find out how many pebbles there are in a triangle with two rows.

<p>That function calls <code>(triangle-recursive-helper 0 0 2)</code>.

<p>In stages, the instances called will be:

<pre>                          sum counter number
(triangle-recursive-helper 0    1       2)

(triangle-recursive-helper 1    2       2)

(triangle-recursive-helper 3    3       2)
</pre>

<p>When the last instance is called, the <code>(&gt; counter number)</code> test
will be true, so the instance will return the value of <code>sum</code>,
which will be 3.

<p>This kind of pattern helps when you are writing functions that can use
many resources in a computer.

<p><hr>
Node:<a name="Looping%20exercise">Looping exercise</a>,
Previous:<a rel=previous href="#Recursion">Recursion</a>,
Up:<a rel=up href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>
<br>

<h2>11.4 Looping Exercise</h2>

<ul>
<li>Write a function similar to <code>triangle</code> in which each row has a
value which is the square of the row number.  Use a <code>while</code> loop.

<li>Write a function similar to <code>triangle</code> that multiplies instead of
adds the values.

<li>Rewrite these two functions recursively.  Rewrite these functions
using <code>cond</code>.

<li>Write a function for Texinfo mode that creates an index entry at the
beginning of a paragraph for every <code>@dfn</code> within the paragraph. 
(In a Texinfo file, <code>@dfn</code> marks a definition.  For more
information, see
<a href="texinfo.html#Indicating">Indicating</a>.) 
</ul>

<p><hr>
Node:<a name="Regexp%20Search">Regexp Search</a>,
Next:<a rel=next href="#Counting%20Words">Counting Words</a>,
Previous:<a rel=previous href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>12 Regular Expression Searches</h1>

<p>Regular expression searches are used extensively in GNU Emacs.  The
two functions, <code>forward-sentence</code> and <code>forward-paragraph</code>,
illustrate these searches well.  They use regular expressions to find
where to move point.  The phrase `regular expression' is often written
as `regexp'.

<p>Regular expression searches are described in <a href="emacs.html#Regular%20Expression%20Search">Regexp Search</a>, as well as in
<a href="elisp.html#Regular%20Expressions">Regular Expressions</a>.  In writing this chapter, I am presuming that you have at
least a mild acquaintance with them.  The major point to remember is
that regular expressions permit you to search for patterns as well as
for literal strings of characters.  For example, the code in
<code>forward-sentence</code> searches for the pattern of possible
characters that could mark the end of a sentence, and moves point to
that spot.

<p>Before looking at the code for the <code>forward-sentence</code> function, it
is worth considering what the pattern that marks the end of a sentence
must be.  The pattern is discussed in the next section; following that
is a description of the regular expression search function,
<code>re-search-forward</code>.  The <code>forward-sentence</code> function
is described in the section following.  Finally, the
<code>forward-paragraph</code> function is described in the last section of
this chapter.  <code>forward-paragraph</code> is a complex function that
introduces several new features.

<ul>
<li><a href="#sentence-end">sentence-end</a>:                 The regular expression for <code>sentence-end</code>. 
<li><a href="#re-search-forward">re-search-forward</a>:            Very similar to <code>search-forward</code>. 
<li><a href="#forward-sentence">forward-sentence</a>:             A straightforward example of regexp search. 
<li><a href="#forward-paragraph">forward-paragraph</a>:            A somewhat complex example. 
<li><a href="#etags">etags</a>:                        How to create your own <code>TAGS</code> table. 
<li><a href="#Regexp%20Review">Regexp Review</a>: 
<li><a href="#re-search%20Exercises">re-search Exercises</a>: 
</ul>

<p><hr>
Node:<a name="sentence-end">sentence-end</a>,
Next:<a rel=next href="#re-search-forward">re-search-forward</a>,
Previous:<a rel=previous href="#Regexp%20Search">Regexp Search</a>,
Up:<a rel=up href="#Regexp%20Search">Regexp Search</a>
<br>

<h2>12.1 The Regular Expression for <code>sentence-end</code></h2>

<p>The symbol <code>sentence-end</code> is bound to the pattern that marks the
end of a sentence.  What should this regular expression be?

<p>Clearly, a sentence may be ended by a period, a question mark, or an
exclamation mark.  Indeed, only clauses that end with one of those three
characters should be considered the end of a sentence.  This means that
the pattern should include the character set:

<pre>[.?!]
</pre>

<p>However, we do not want <code>forward-sentence</code> merely to jump to a
period, a question mark, or an exclamation mark, because such a character
might be used in the middle of a sentence.  A period, for example, is
used after abbreviations.  So other information is needed.

<p>According to convention, you type two spaces after every sentence, but
only one space after a period, a question mark, or an exclamation mark in
the body of a sentence.  So a period, a question mark, or an exclamation
mark followed by two spaces is a good indicator of an end of sentence. 
However, in a file, the two spaces may instead be a tab or the end of a
line.  This means that the regular expression should include these three
items as alternatives.

<p>This group of alternatives will look like this:

<pre>\\($\\| \\|  \\)
       ^   ^^
      TAB  SPC
</pre>

<p>Here, <code>$</code> indicates the end of the line, and I have pointed out
where the tab and two spaces are inserted in the expression.  Both are
inserted by putting the actual characters into the expression.

<p>Two backslashes, <code>\\</code>, are required before the parentheses and
vertical bars: the first backslash quotes the following backslash in
Emacs; and the second indicates that the following character, the
parenthesis or the vertical bar, is special.

<p>Also, a sentence may be followed by one or more carriage returns, like
this:

<pre>[
]*
</pre>

<p>Like tabs and spaces, a carriage return is inserted into a regular
expression by inserting it literally.  The asterisk indicates that the
&lt;RET&gt; is repeated zero or more times.

<p>But a sentence end does not consist only of a period, a question mark or
an exclamation mark followed by appropriate space: a closing quotation
mark or a closing brace of some kind may precede the space.  Indeed more
than one such mark or brace may precede the space.  These require a
expression that looks like this:

<pre>[]\"')}]*
</pre>

<p>In this expression, the first <code>]</code> is the first character in the
expression; the second character is <code>"</code>, which is preceded by a
<code>\</code> to tell Emacs the <code>"</code> is <em>not</em> special.  The last
three characters are <code>'</code>, <code>)</code>, and <code>}</code>.

<p>All this suggests what the regular expression pattern for matching the
end of a sentence should be; and, indeed, if we evaluate
<code>sentence-end</code> we find that it returns the following value:

<pre>sentence-end
     =&gt; "[.?!][]\"')}]*\\($\\|     \\|  \\)[
]*"
</pre>

<p><hr>
Node:<a name="re-search-forward">re-search-forward</a>,
Next:<a rel=next href="#forward-sentence">forward-sentence</a>,
Previous:<a rel=previous href="#sentence-end">sentence-end</a>,
Up:<a rel=up href="#Regexp%20Search">Regexp Search</a>
<br>

<h2>12.2 The <code>re-search-forward</code> Function</h2>

<p>The <code>re-search-forward</code> function is very like the
<code>search-forward</code> function.  (See <a href="#search-forward">The <code>search-forward</code> Function</a>.)

<p><code>re-search-forward</code> searches for a regular expression.  If the
search is successful, it leaves point immediately after the last
character in the target.  If the search is backwards, it leaves point
just before the first character in the target.  You may tell
<code>re-search-forward</code> to return <code>t</code> for true.  (Moving point
is therefore a `side effect'.)

<p>Like <code>search-forward</code>, the <code>re-search-forward</code> function takes
four arguments:

<ol type=1 start=1>
</p><li>The first argument is the regular expression that the function searches
for.  The regular expression will be a string between quotations marks.

<li>The optional second argument limits how far the function will search; it is a
bound, which is specified as a position in the buffer.

<li>The optional third argument specifies how the function responds to
failure: <code>nil</code> as the third argument causes the function to
signal an error (and print a message) when the search fails; any other
value causes it to return <code>nil</code> if the search fails and <code>t</code>
if the search succeeds.

<li>The optional fourth argument is the repeat count.  A negative repeat
count causes <code>re-search-forward</code> to search backwards.
</ol>

<p>The template for <code>re-search-forward</code> looks like this:

<pre>(re-search-forward "<var>regular-expression</var>"
                <var>limit-of-search</var>
                <var>what-to-do-if-search-fails</var>
                <var>repeat-count</var>)
</pre>

<p>The second, third, and fourth arguments are optional.  However, if you
want to pass a value to either or both of the last two arguments, you
must also pass a value to all the preceding arguments.  Otherwise, the
Lisp interpreter will mistake which argument you are passing the value
to.

<p>In the <code>forward-sentence</code> function, the regular expression will be
the value of the variable <code>sentence-end</code>, namely:

<pre>"[.?!][]\"')}]*\\($\\|  \\|  \\)[
]*"
</pre>

<p>The limit of the search will be the end of the paragraph (since a
sentence cannot go beyond a paragraph).  If the search fails, the
function will return <code>nil</code>; and the repeat count will be provided
by the argument to the <code>forward-sentence</code> function.

<p><hr>
Node:<a name="forward-sentence">forward-sentence</a>,
Next:<a rel=next href="#forward-paragraph">forward-paragraph</a>,
Previous:<a rel=previous href="#re-search-forward">re-search-forward</a>,
Up:<a rel=up href="#Regexp%20Search">Regexp Search</a>
<br>

<h2>12.3 <code>forward-sentence</code></h2>

<p>The command to move the cursor forward a sentence is a straightforward
illustration of how to use regular expression searches in Emacs Lisp. 
Indeed, the function looks longer and more complicated than it is; this
is because the function is designed to go backwards as well as forwards;
and, optionally, over more than one sentence.  The function is usually
bound to the key command <kbd>M-e</kbd>.

<ul>
<li><a href="#Complete%20forward-sentence">Complete forward-sentence</a>: 
<li><a href="#fwd-sentence%20while%20loops">fwd-sentence while loops</a>:     Two <code>while</code> loops. 
<li><a href="#fwd-sentence%20re-search">fwd-sentence re-search</a>:       A regular expression search. 
</ul>

<p><hr>
Node:<a name="Complete%20forward-sentence">Complete forward-sentence</a>,
Next:<a rel=next href="#fwd-sentence%20while%20loops">fwd-sentence while loops</a>,
Previous:<a rel=previous href="#forward-sentence">forward-sentence</a>,
Up:<a rel=up href="#forward-sentence">forward-sentence</a>
<br>

<h3>Complete <code>forward-sentence</code> function definition</h3>

<p>Here is the code for <code>forward-sentence</code>:

<pre>(defun forward-sentence (&amp;optional arg)
  "Move forward to next sentence-end.  With argument, repeat.
With negative argument, move backward repeatedly to sentence-beginning.
Sentence ends are identified by the value of sentence-end
treated as a regular expression.  Also, every paragraph boundary
terminates sentences as well."
  (interactive "p")
  (or arg (setq arg 1))
  (while (&lt; arg 0)
    (let ((par-beg
           (save-excursion (start-of-paragraph-text) (point))))
      (if (re-search-backward
           (concat sentence-end "[^ \t\n]") par-beg t)
          (goto-char (1- (match-end 0)))
        (goto-char par-beg)))
    (setq arg (1+ arg)))
  (while (&gt; arg 0)
    (let ((par-end
           (save-excursion (end-of-paragraph-text) (point))))
      (if (re-search-forward sentence-end par-end t)
          (skip-chars-backward " \t\n")
        (goto-char par-end)))
    (setq arg (1- arg))))
</pre>

<p>The function looks long at first sight and it is best to look at its
skeleton first, and then its muscle.  The way to see the skeleton is to
look at the expressions that start in the left-most columns:

<pre>(defun forward-sentence (&amp;optional arg)
  "<var>documentation</var><small>...</small>"
  (interactive "p")
  (or arg (setq arg 1))
  (while (&lt; arg 0)
    <var>body-of-while-loop</var>
  (while (&gt; arg 0)
    <var>body-of-while-loop</var>
</pre>

<p>This looks much simpler!  The function definition consists of
documentation, an <code>interactive</code> expression, an <code>or</code>
expression, and <code>while</code> loops.

<p>Let's look at each of these parts in turn.

<p>We note that the documentation is thorough and understandable.

<p>The function has an <code>interactive "p"</code> declaration.  This means
that the processed prefix argument, if any, is passed to the
function as its argument.  (This will be a number.)  If the function
is not passed an argument (it is optional) then the argument
<code>arg</code> will be bound to 1.  When <code>forward-sentence</code> is called
non-interactively without an argument, <code>arg</code> is bound to
<code>nil</code>.

<p>The <code>or</code> expression handles the prefix argument.  What it does is
either leave the value of <code>arg</code> as it is, but only if <code>arg</code>
is bound to a value; or it sets the value of <code>arg</code> to 1, in the
case when <code>arg</code> is bound to <code>nil</code>.

<p><hr>
Node:<a name="fwd-sentence%20while%20loops">fwd-sentence while loops</a>,
Next:<a rel=next href="#fwd-sentence%20re-search">fwd-sentence re-search</a>,
Previous:<a rel=previous href="#Complete%20forward-sentence">Complete forward-sentence</a>,
Up:<a rel=up href="#forward-sentence">forward-sentence</a>
<br>

<h3>The <code>while</code> loops</h3>

<p>Two <code>while</code> loops follow the <code>or</code> expression.  The first
<code>while</code> has a true-or-false-test that tests true if the prefix
argument for <code>forward-sentence</code> is a negative number.  This is for
going backwards.  The body of this loop is similar to the body of the
second <code>while</code> clause, but it is not exactly the same.  We will
skip this <code>while</code> loop and concentrate on the second <code>while</code>
loop.

<p>The second <code>while</code> loop is for moving point forward.  Its skeleton
looks like this:

<pre>(while (&gt; arg 0)            ; true-or-false-test
  (let <var>varlist</var>
    (if (<var>true-or-false-test</var>)
        <var>then-part</var>
      <var>else-part</var>
  (setq arg (1- arg))))     ; <code>while</code> loop decrementer
</pre>

<p>The <code>while</code> loop is of the decrementing kind. 
(See <a href="#Decrementing%20Loop">A Loop with a Decrementing Counter</a>.)  It
has a true-or-false-test that tests true so long as the counter (in
this case, the variable <code>arg</code>) is greater than zero; and it has a
decrementer that subtracts 1 from the value of the counter every time
the loop repeats.

<p>If no prefix argument is given to <code>forward-sentence</code>, which is
the most common way the command is used, this <code>while</code> loop will
run once, since the value of <code>arg</code> will be 1.

<p>The body of the <code>while</code> loop consists of a <code>let</code> expression,
which creates and binds a local variable, and has, as its body, an
<code>if</code> expression.

<p>The body of the <code>while</code> loop looks like this:

<pre>(let ((par-end
       (save-excursion (end-of-paragraph-text) (point))))
  (if (re-search-forward sentence-end par-end t)
      (skip-chars-backward " \t\n")
    (goto-char par-end)))
</pre>

<p>The <code>let</code> expression creates and binds the local variable
<code>par-end</code>.  As we shall see, this local variable is designed to
provide a bound or limit to the regular expression search.  If the
search fails to find a proper sentence ending in the paragraph, it will
stop on reaching the end of the paragraph.

<p>But first, let us examine how <code>par-end</code> is bound to the value of
the end of the paragraph.  What happens is that the <code>let</code> sets the
value of <code>par-end</code> to the value returned when the Lisp interpreter
evaluates the expression

<pre>(save-excursion (end-of-paragraph-text) (point))
</pre>

<p>In this expression, <code>(end-of-paragraph-text)</code> moves point to the
end of the paragraph, <code>(point)</code> returns the value of point, and then
<code>save-excursion</code> restores point to its original position.  Thus,
the <code>let</code> binds <code>par-end</code> to the value returned by the
<code>save-excursion</code> expression, which is the position of the end of
the paragraph.  (The <code>(end-of-paragraph-text)</code> function uses
<code>forward-paragraph</code>, which we will discuss shortly.)

<p>Emacs next evaluates the body of the <code>let</code>, which is an <code>if</code>
expression that looks like this:

<pre>(if (re-search-forward sentence-end par-end t) ; if-part
    (skip-chars-backward " \t\n")              ; then-part
  (goto-char par-end)))                        ; else-part
</pre>

<p>The <code>if</code> tests whether its first argument is true and if so,
evaluates its then-part; otherwise, the Emacs Lisp interpreter
evaluates the else-part.  The true-or-false-test of the <code>if</code>
expression is the regular expression search.

<p>It may seem odd to have what looks like the `real work' of
the <code>forward-sentence</code> function buried here, but this is a common
way this kind of operation is carried out in Lisp.

<p><hr>
Node:<a name="fwd-sentence%20re-search">fwd-sentence re-search</a>,
Previous:<a rel=previous href="#fwd-sentence%20while%20loops">fwd-sentence while loops</a>,
Up:<a rel=up href="#forward-sentence">forward-sentence</a>
<br>

<h3>The regular expression search</h3>

<p>The <code>re-search-forward</code> function searches for the end of the
sentence, that is, for the pattern defined by the <code>sentence-end</code>
regular expression.  If the pattern is found--if the end of the sentence is
found--then the <code>re-search-forward</code> function does two things:

<ol type=1 start=1>
</p><li>The <code>re-search-forward</code> function carries out a side effect, which
is to move point to the end of the occurrence found.

<li>The <code>re-search-forward</code> function returns a value of true.  This is
the value received by the <code>if</code>, and means that the search was
successful.
</ol>

<p>The side effect, the movement of point, is completed before the
<code>if</code> function is handed the value returned by the successful
conclusion of the search.

<p>When the <code>if</code> function receives the value of true from a successful
call to <code>re-search-forward</code>, the <code>if</code> evaluates the then-part,
which is the expression <code>(skip-chars-backward " \t\n")</code>.  This
expression moves backwards over any blank spaces, tabs or carriage
returns until a printed character is found and then leaves point after
the character.  Since point has already been moved to the end of the
pattern that marks the end of the sentence, this action leaves point
right after the closing printed character of the sentence, which is
usually a period.

<p>On the other hand, if the <code>re-search-forward</code> function fails to
find a pattern marking the end of the sentence, the function returns
false.  The false then causes the <code>if</code> to evaluate its third
argument, which is <code>(goto-char par-end)</code>:  it moves point to the
end of the paragraph.

<p>Regular expression searches are exceptionally useful and the pattern
illustrated by <code>re-search-forward</code>, in which the search is the
test of an <code>if</code> expression, is handy.  You will see or write code
incorporating this pattern often.

<p><hr>
Node:<a name="forward-paragraph">forward-paragraph</a>,
Next:<a rel=next href="#etags">etags</a>,
Previous:<a rel=previous href="#forward-sentence">forward-sentence</a>,
Up:<a rel=up href="#Regexp%20Search">Regexp Search</a>
<br>

<h2>12.4 <code>forward-paragraph</code>: a Goldmine of Functions</h2>

<p>The <code>forward-paragraph</code> function moves point forward to the end
of the paragraph.  It is usually bound to <kbd>M-}</kbd> and makes use of a
number of functions that are important in themselves, including
<code>let*</code>, <code>match-beginning</code>, and <code>looking-at</code>.

<p>The function definition for <code>forward-paragraph</code> is considerably
longer than the function definition for <code>forward-sentence</code>
because it works with a paragraph, each line of which may begin with a
fill prefix.

<p>A fill prefix consists of a string of characters that are repeated at
the beginning of each line.  For example, in Lisp code, it is a
convention to start each line of a paragraph-long comment with
<code>;;; </code>.  In Text mode, four blank spaces make up another common
fill prefix, creating an indented paragraph.  (See <a href="emacs.html#Fill%20Prefix">Fill Prefix</a>, for more information about fill
prefixes.)

<p>The existence of a fill prefix means that in addition to being able to
find the end of a paragraph whose lines begin on the left-most
column, the <code>forward-paragraph</code> function must be able to find the
end of a paragraph when all or many of the lines in the buffer begin
with the fill prefix.

<p>Moreover, it is sometimes practical to ignore a fill prefix that
exists, especially when blank lines separate paragraphs. 
This is an added complication.

<ul>
<li><a href="#forward-paragraph%20in%20brief">forward-paragraph in brief</a>:   Key parts of the function definition. 
<li><a href="#fwd-para%20let">fwd-para let</a>:                 The <code>let*</code> expression. 
<li><a href="#fwd-para%20while">fwd-para while</a>:               The forward motion <code>while</code> loop. 
<li><a href="#fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>:   Movement between paragraphs. 
<li><a href="#fwd-para%20within%20paragraph">fwd-para within paragraph</a>:    Movement within paragraphs. 
<li><a href="#fwd-para%20no%20fill%20prefix">fwd-para no fill prefix</a>:      When there is no fill prefix. 
<li><a href="#fwd-para%20with%20fill%20prefix">fwd-para with fill prefix</a>:    When there is a fill prefix. 
<li><a href="#fwd-para%20summary">fwd-para summary</a>:             Summary of <code>forward-paragraph</code> code. 
</ul>

<p><hr>
Node:<a name="forward-paragraph%20in%20brief">forward-paragraph in brief</a>,
Next:<a rel=next href="#fwd-para%20let">fwd-para let</a>,
Previous:<a rel=previous href="#forward-paragraph">forward-paragraph</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>Shortened <code>forward-paragraph</code> function definition</h3>

<p>Rather than print all of the <code>forward-paragraph</code> function, we
will only print parts of it.  Read without preparation, the function
can be daunting!

<p>In outline, the function looks like this:

<pre>(defun forward-paragraph (&amp;optional arg)
  "<var>documentation</var><small>...</small>"
  (interactive "p")
  (or arg (setq arg 1))
  (let*
      <var>varlist</var>
    (while (&lt; arg 0)        ; backward-moving-code
      <small>...</small>
      (setq arg (1+ arg)))
    (while (&gt; arg 0)        ; forward-moving-code
      <small>...</small>
      (setq arg (1- arg)))))
</pre>

<p>The first parts of the function are routine: the function's argument
list consists of one optional argument.  Documentation follows.

<p>The lower case <code>p</code> in the <code>interactive</code> declaration means
that the processed prefix argument, if any, is passed to the function. 
This will be a number, and is the repeat count of how many paragraphs
point will move.  The <code>or</code> expression in the next line handles
the common case when no argument is passed to the function, which occurs
if the function is called from other code rather than interactively. 
This case was described earlier.  (See <a href="#forward-sentence">The <code>forward-sentence</code> function</a>.)  Now we reach the end of the
familiar part of this function.

<p><hr>
Node:<a name="fwd-para%20let">fwd-para let</a>,
Next:<a rel=next href="#fwd-para%20while">fwd-para while</a>,
Previous:<a rel=previous href="#forward-paragraph%20in%20brief">forward-paragraph in brief</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>The <code>let*</code> expression</h3>

<p>The next line of the <code>forward-paragraph</code> function begins a
<code>let*</code> expression.  This is a different kind of expression than
we have seen so far.  The symbol is <code>let*</code> not <code>let</code>.

<p>The <code>let*</code> special form is like <code>let</code> except that Emacs sets
each variable in sequence, one after another, and variables in the
latter part of the varlist can make use of the values to which Emacs
set variables in the earlier part of the varlist.

<p>In the <code>let*</code> expression in this function, Emacs binds two
variables: <code>fill-prefix-regexp</code> and <code>paragraph-separate</code>. 
The value to which <code>paragraph-separate</code> is bound depends on the
value of <code>fill-prefix-regexp</code>.

<p>Let's look at each in turn.  The symbol <code>fill-prefix-regexp</code> is
set to the value returned by evaluating the following list:

<pre>(and fill-prefix
     (not (equal fill-prefix ""))
     (not paragraph-ignore-fill-prefix)
     (regexp-quote fill-prefix))
</pre>

<p>This is an expression whose first element is the <code>and</code> special form.

<p>As we learned earlier (see <a href="#kill-new%20function">The <code>kill-new</code> function</a>), the <code>and</code> special form evaluates each of its
arguments until one of the arguments returns a value of <code>nil</code>, in
which case the <code>and</code> expression returns <code>nil</code>; however, if
none of the arguments returns a value of <code>nil</code>, the value
resulting from evaluating the last argument is returned.  (Since such
a value is not <code>nil</code>, it is considered true in Lisp.)  In other
words, an <code>and</code> expression returns a true value only if all its
arguments are true.

<p>In this case, the variable <code>fill-prefix-regexp</code> is bound to a
non-<code>nil</code> value only if the following four expressions produce a
true (i.e., a non-<code>nil</code>) value when they are evaluated; otherwise,
<code>fill-prefix-regexp</code> is bound to <code>nil</code>.

<dl>
<dt><code>fill-prefix</code>
<dd>When this variable is evaluated, the value of the fill prefix, if any,
is returned.  If there is no fill prefix, this variable returns
<code>nil</code>.

<br><dt><code>(not (equal fill-prefix "")</code>
<dd>This expression checks whether an existing fill prefix is an empty
string, that is, a string with no characters in it.  An empty string is
not a useful fill prefix.

<br><dt><code>(not paragraph-ignore-fill-prefix)</code>
<dd>This expression returns <code>nil</code> if the variable
<code>paragraph-ignore-fill-prefix</code> has been turned on by being set to a
true value such as <code>t</code>.

<br><dt><code>(regexp-quote fill-prefix)</code>
<dd>This is the last argument to the <code>and</code> special form.  If all the
arguments to the <code>and</code> are true, the value resulting from
evaluating this expression will be returned by the <code>and</code> expression
and bound to the variable <code>fill-prefix-regexp</code>,
</dl>

<p>The result of evaluating this <code>and</code> expression successfully is that
<code>fill-prefix-regexp</code> will be bound to the value of
<code>fill-prefix</code> as modified by the <code>regexp-quote</code> function. 
What <code>regexp-quote</code> does is read a string and return a regular
expression that will exactly match the string and match nothing else. 
This means that <code>fill-prefix-regexp</code> will be set to a value that
will exactly match the fill prefix if the fill prefix exists. 
Otherwise, the variable will be set to <code>nil</code>.

<p>The second local variable in the <code>let*</code> expression is
<code>paragraph-separate</code>.  It is bound to the value returned by
evaluating the expression:

<pre>(if fill-prefix-regexp
    (concat paragraph-separate
            "\\|^" fill-prefix-regexp "[ \t]*$")
  paragraph-separate)))
</pre>

<p>This expression shows why <code>let*</code> rather than <code>let</code> was used. 
The true-or-false-test for the <code>if</code> depends on whether the variable
<code>fill-prefix-regexp</code> evaluates to <code>nil</code> or some other value.

<p>If <code>fill-prefix-regexp</code> does not have a value, Emacs evaluates
the else-part of the <code>if</code> expression and binds
<code>paragraph-separate</code> to its local value. 
(<code>paragraph-separate</code> is a regular expression that matches what
separates paragraphs.)

<p>But if <code>fill-prefix-regexp</code> does have a value, Emacs evaluates
the then-part of the <code>if</code> expression and binds
<code>paragraph-separate</code> to a regular expression that includes the
<code>fill-prefix-regexp</code> as part of the pattern.

<p>Specifically, <code>paragraph-separate</code> is set to the original value
of the paragraph separate regular expression concatenated with an
alternative expression that consists of the <code>fill-prefix-regexp</code>
followed by a blank line.  The <code>^</code> indicates that the
<code>fill-prefix-regexp</code> must begin a line, and the optional
whitespace to the end of the line is defined by <code>"[&nbsp;\t]*$"</code>.) 
The <code>\\|</code> defines this portion of the regexp as an alternative to
<code>paragraph-separate</code>.

<p>Now we get into the body of the <code>let*</code>.  The first part of the body
of the <code>let*</code> deals with the case when the function is given a
negative argument and is therefore moving backwards.  We will skip this
section.

<p><hr>
Node:<a name="fwd-para%20while">fwd-para while</a>,
Next:<a rel=next href="#fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>,
Previous:<a rel=previous href="#fwd-para%20let">fwd-para let</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>The forward motion <code>while</code> loop</h3>

<p>The second part of the body of the <code>let*</code> deals with forward
motion.  It is a <code>while</code> loop that repeats itself so long as the
value of <code>arg</code> is greater than zero.  In the most common use of
the function, the value of the argument is 1, so the body of the
<code>while</code> loop is evaluated exactly once, and the cursor moves
forward one paragraph.

<p>This part handles three situations: when point is between paragraphs,
when point is within a paragraph and there is a fill prefix, and
when point is within a paragraph and there is no fill prefix.

<p>The <code>while</code> loop looks like this:

<pre>(while (&gt; arg 0)
  (beginning-of-line)

  ;; between paragraphs
  (while (prog1 (and (not (eobp))
                     (looking-at paragraph-separate))
           (forward-line 1)))

  ;; within paragraphs, with a fill prefix
  (if fill-prefix-regexp
      ;; There is a fill prefix; it overrides paragraph-start.
      (while (and (not (eobp))
                  (not (looking-at paragraph-separate))
                  (looking-at fill-prefix-regexp))
        (forward-line 1))

    ;; within paragraphs, no fill prefix
    (if (re-search-forward paragraph-start nil t)
        (goto-char (match-beginning 0))
      (goto-char (point-max))))

  (setq arg (1- arg)))
</pre>

<p>We can see immediately that this is a decrementing counter <code>while</code>
loop, using the expression <code>(setq arg (1- arg))</code> as the decrementer.

<p>The body of the loop consists of three expressions:

<pre>;; between paragraphs
(beginning-of-line)
(while
    <var>body-of-while</var>)

;; within paragraphs, with fill prefix
(if <var>true-or-false-test</var>
    <var>then-part</var>

;; within paragraphs, no fill prefix
  <var>else-part</var>
</pre>

<p>When the Emacs Lisp interpreter evaluates the body of the
<code>while</code> loop, the first thing it does is evaluate the
<code>(beginning-of-line)</code> expression and move point to the beginning
of the line.  Then there is an inner <code>while</code> loop.  This
<code>while</code> loop is designed to move the cursor out of the blank
space between paragraphs, if it should happen to be there.  Finally,
there is an <code>if</code> expression that actually moves point to the end
of the paragraph.

<p><hr>
Node:<a name="fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>,
Next:<a rel=next href="#fwd-para%20within%20paragraph">fwd-para within paragraph</a>,
Previous:<a rel=previous href="#fwd-para%20while">fwd-para while</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>Between paragraphs</h3>

<p>First, let us look at the inner <code>while</code> loop.  This loop handles
the case when point is between paragraphs; it uses three functions
that are new to us: <code>prog1</code>, <code>eobp</code> and <code>looking-at</code>.

<ul>
<li><code>prog1</code> is similar to the <code>progn</code> special form,
except that <code>prog1</code> evaluates its arguments in sequence and then
returns the value of its first argument as the value of the whole
expression.  (<code>progn</code> returns the value of its last argument as the
value of the expression.) The second and subsequent arguments to
<code>prog1</code> are evaluated only for their side effects.

<li><code>eobp</code> is an abbreviation of <code>End Of Buffer P</code> and is a
function that returns true if point is at the end of the buffer.

<li><code>looking-at</code> is a function that returns true if the text following
point matches the regular expression passed <code>looking-at</code> as its
argument. 
</ul>

<p>The <code>while</code> loop we are studying looks like this:

<pre>(while (prog1 (and (not (eobp))
                   (looking-at paragraph-separate))
              (forward-line 1)))
</pre>

<p>This is a <code>while</code> loop with no body!  The true-or-false-test of the
loop is the expression:

<pre>(prog1 (and (not (eobp))
            (looking-at paragraph-separate))
       (forward-line 1))
</pre>

<p>The first argument to the <code>prog1</code> is the <code>and</code> expression.  It
has within in it a test of whether point is at the end of the buffer and
also a test of whether the pattern following point matches the regular
expression for separating paragraphs.

<p>If the cursor is not at the end of the buffer and if the characters
following the cursor mark the separation between two paragraphs, then
the <code>and</code> expression is true.  After evaluating the <code>and</code>
expression, the Lisp interpreter evaluates the second argument to
<code>prog1</code>, which is <code>forward-line</code>.  This moves point forward
one line.  The value returned by the <code>prog1</code> however, is the
value of its first argument, so the <code>while</code> loop continues so
long as point is not at the end of the buffer and is between
paragraphs.  When, finally, point is moved to a paragraph, the
<code>and</code> expression tests false.  Note however, that the
<code>forward-line</code> command is carried out anyhow.  This means that
when point is moved from between paragraphs to a paragraph, it is left
at the beginning of the second line of the paragraph.

<p><hr>
Node:<a name="fwd-para%20within%20paragraph">fwd-para within paragraph</a>,
Next:<a rel=next href="#fwd-para%20no%20fill%20prefix">fwd-para no fill prefix</a>,
Previous:<a rel=previous href="#fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>Within paragraphs</h3>

<p>The next expression in the outer <code>while</code> loop is an <code>if</code>
expression.  The Lisp interpreter evaluates the then-part of the
<code>if</code> when the <code>fill-prefix-regexp</code> variable has a value other
than <code>nil</code>, and it evaluates the else-part when the value of
<code>if fill-prefix-regexp</code> is <code>nil</code>, that is, when there is no
fill prefix.

<p><hr>
Node:<a name="fwd-para%20no%20fill%20prefix">fwd-para no fill prefix</a>,
Next:<a rel=next href="#fwd-para%20with%20fill%20prefix">fwd-para with fill prefix</a>,
Previous:<a rel=previous href="#fwd-para%20within%20paragraph">fwd-para within paragraph</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>No fill prefix</h3>

<p>It is simplest to look at the code for the case when there is no fill
prefix first.  This code consists of yet another inner <code>if</code>
expression, and reads as follows:

<pre>(if (re-search-forward paragraph-start nil t)
    (goto-char (match-beginning 0))
  (goto-char (point-max)))
</pre>

<p>This expression actually does the work that most people think of as
the primary purpose of the <code>forward-paragraph</code> command: it causes
a regular expression search to occur that searches forward to the
start of the next paragraph and if it is found, moves point there; but
if the start of another paragraph if not found, it moves point to the
end of the accessible region of the buffer.

<p>The only unfamiliar part of this is the use of <code>match-beginning</code>. 
This is another function that is new to us.  The
<code>match-beginning</code> function returns a number specifying the
location of the start of the text that was matched by the last regular
expression search.

<p>The <code>match-beginning</code> function is used here because of a
characteristic of a forward search: a successful forward search,
regardless of whether it is a plain search or a regular expression
search, will move point to the end of the text that is found.  In this
case, a successful search will move point to the end of the pattern for
<code>paragraph-start</code>, which will be the beginning of the next
paragraph rather than the end of the current one.

<p>However, we want to put point at the end of the current paragraph, not at
the beginning of the next one.  The two positions may be different,
because there may be several blank lines between paragraphs.

<p>When given an argument of 0, <code>match-beginning</code> returns the position
that is the start of the text that the most recent regular
expression search matched.  In this case, the most recent regular
expression search is the one looking for <code>paragraph-start</code>, so
<code>match-beginning</code> returns the beginning position of the pattern,
rather than the end of the pattern.  The beginning position is the end
of the paragraph.

<p>(Incidentally, when passed a positive number as an argument, the
<code>match-beginning</code> function will place point at that parenthesized
expression in the last regular expression.  It is a useful function.)

<p><hr>
Node:<a name="fwd-para%20with%20fill%20prefix">fwd-para with fill prefix</a>,
Next:<a rel=next href="#fwd-para%20summary">fwd-para summary</a>,
Previous:<a rel=previous href="#fwd-para%20no%20fill%20prefix">fwd-para no fill prefix</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>With a fill prefix</h3>

<p>The inner <code>if</code> expression just discussed is the else-part of an enclosing
<code>if</code> expression which tests whether there is a fill prefix.  If
there is a fill prefix, the then-part of this <code>if</code> is evaluated. 
It looks like this:

<pre>(while (and (not (eobp))
            (not (looking-at paragraph-separate))
            (looking-at fill-prefix-regexp))
  (forward-line 1))
</pre>

<p>What this expression does is move point forward line by line so long
as three conditions are true:

<ol type=1 start=1>
</p><li>Point is not at the end of the buffer.

<li>The text following point does not separate paragraphs.

<li>The pattern following point is the fill prefix regular expression.
</ol>

<p>The last condition may be puzzling, until you remember that point was
moved to the beginning of the line early in the <code>forward-paragraph</code>
function.  This means that if the text has a fill prefix, the
<code>looking-at</code> function will see it.

<p><hr>
Node:<a name="fwd-para%20summary">fwd-para summary</a>,
Previous:<a rel=previous href="#fwd-para%20with%20fill%20prefix">fwd-para with fill prefix</a>,
Up:<a rel=up href="#forward-paragraph">forward-paragraph</a>
<br>

<h3>Summary</h3>

<p>In summary, when moving forward, the <code>forward-paragraph</code> function
does the following:

<ul>
<li>Move point to the beginning of the line.

<li>Skip over lines between paragraphs.

<li>Check whether there is a fill prefix, and if there is:

<ul>

<li>Go forward line by line so long as the line is not a paragraph
separating line. 
</ul>

<li>But if there is no fill prefix,

<ul>

<li>Search for the next paragraph start pattern.

<li>Go to the beginning of the paragraph start pattern, which will be the
end of the previous paragraph.

<li>Or else go to the end of the accessible portion of the buffer. 
</ul>
</ul>

<p>For review, here is the code we have just been discussing, formatted
for clarity:

<pre>(interactive "p")
(or arg (setq arg 1))
(let* (
       (fill-prefix-regexp
        (and fill-prefix (not (equal fill-prefix ""))
             (not paragraph-ignore-fill-prefix)
             (regexp-quote fill-prefix)))

       (paragraph-separate
        (if fill-prefix-regexp
            (concat paragraph-separate
                    "\\|^"
                    fill-prefix-regexp
                    "[ \t]*$")
          paragraph-separate)))

  <var>omitted-backward-moving-code</var> <small>...</small>

  (while (&gt; arg 0)                ; forward-moving-code
    (beginning-of-line)

    (while (prog1 (and (not (eobp))
                       (looking-at paragraph-separate))
             (forward-line 1)))

    (if fill-prefix-regexp
        (while (and (not (eobp))  ; then-part
                    (not (looking-at paragraph-separate))
                    (looking-at fill-prefix-regexp))
          (forward-line 1))
                                  ; else-part: the inner-if
      (if (re-search-forward paragraph-start nil t)
          (goto-char (match-beginning 0))
        (goto-char (point-max))))

    (setq arg (1- arg)))))        ; decrementer
</pre>

<p>The full definition for the <code>forward-paragraph</code> function not only
includes this code for going forwards, but also code for going backwards.

<p>If you are reading this inside of GNU Emacs and you want to see the
whole function, you can type <kbd>C-h f</kbd> (<code>describe-function</code>)
and the name of the function.  This gives you the function
documentation and the name of the library containing the function's
source.  Place point over the name of the library and press the RET
key; you will be taken directly to the source.  (Be sure to install
your sources!  Without them, you are like a person who tries to drive
a car with his eyes shut!)

<p>Or - a good habit to get into - you can type <kbd>M-.</kbd>
(<code>find-tag</code>) and the name of the function when prompted for it. 
This will take you directly to the source.  If the <code>find-tag</code>
function first asks you for the name of a <code>TAGS</code> table, give it
the name of the <code>TAGS</code> file such as
<code>/usr/local/share/emacs/21.0.100/lisp/TAGS</code>.  (The exact path to your
<code>TAGS</code> file depends on how your copy of Emacs was installed.)

<p>You can also create your own <code>TAGS</code> file for directories that
lack one. 
See <a href="#etags">Create Your Own <code>TAGS</code> File</a>.

<p><hr>
Node:<a name="etags">etags</a>,
Next:<a rel=next href="#Regexp%20Review">Regexp Review</a>,
Previous:<a rel=previous href="#forward-paragraph">forward-paragraph</a>,
Up:<a rel=up href="#Regexp%20Search">Regexp Search</a>
<br>

<h2>12.5 Create Your Own <code>TAGS</code> File</h2>

<p>The <kbd>M-.</kbd> (<code>find-tag</code>) command takes you directly to the
source for a function, variable, node, or other source.  The function
depends on tags tables to tell it where to go.

<p>You often need to build and install tags tables yourself.  They are
not built automatically.  A tags table is called a <code>TAGS</code> file;
the name is in upper case letters.

<p>You can create a <code>TAGS</code> file by calling the <code>etags</code> program
that comes as a part of the Emacs distribution.  Usually, <code>etags</code>
is compiled and installed when Emacs is built.  (<code>etags</code> is not
an Emacs Lisp function or a part of Emacs; it is a C program.)

<p>To create a <code>TAGS</code> file, first switch to the directory in which
you want to create the file.  In Emacs you can do this with the
<kbd>M-x cd</kbd> command, or by visiting a file in the directory, or by
listing the directory with <kbd>C-x d</kbd> (<code>dired</code>).  Then run the
compile command, with <code>etags&nbsp;*.el</code> as the command to execute

<pre>M-x compile RET etags *.el RET
</pre>

<p>to create a <code>TAGS</code> file.

<p>For example, if you have a large number of files in your
<code>~/emacs</code> directory, as I do--I have 137 <code>.el</code> files in it,
of which I load 12--you can create a <code>TAGS</code> file for the Emacs
Lisp files in that directory.

<p>The <code>etags</code> program takes all the
usual shell `wildcards'.  For example, if you have two directories for
which you want a single <code>TAGS file</code>, type
<code>etags&nbsp;*.el&nbsp;../elisp/*.el</code>,
where <code>../elisp/</code> is the second directory:

<pre>M-x compile RET etags *.el ../elisp/*.el RET
</pre>

<p>Type

<pre>M-x compile RET etags --help RET
</pre>

<p>to see a list of the options accepted by <code>etags</code> as well as a
list of supported languages.

<p>The <code>etags</code> program handles more than 20 languages, including
Emacs Lisp, Common Lisp, Scheme, C, C++, Ada, Fortran, Java, LaTeX,
Pascal, Perl, Python, Texinfo, makefiles, and most assemblers.  The
program has no switches for specifying the language; it recognizes the
language in an input file according to its file name and contents.

<p><code>etags</code> is very helpful when you are writing code yourself and
want to refer back to functions you have already written.  Just run
<code>etags</code> again at intervals as you write new functions, so they
become part of the <code>TAGS</code> file.

<p>If you think an appropriate <code>TAGS</code> file already exists for what
you want, but do not know where it is, you can use the <code>locate</code>
program to attempt to find it.

<p>Type <kbd>M-x&nbsp;locate&nbsp;RET&nbsp;TAGS&nbsp;RET</kbd> and Emacs will list for you the
full path names of all your <code>TAGS</code> files.  On my system, this
command lists 34 <code>TAGS</code> files.  On the other hand, a `plain
vanilla' system I recently installed did not contain any <code>TAGS</code>
files.

<p>If the tags table you want has been created, you can use the <code>M-x
visit-tags-table</code> command to specify it.  Otherwise, you will need to
create the tag table yourself and then use <code>M-x
visit-tags-table</code>.

<h4>Building Tags in the Emacs sources</h4>

<p>The GNU Emacs sources come with a <code>Makefile</code> that contains a
sophisticated <code>etags</code> command that creates, collects, and merges
tags tables from all over the Emacs sources and puts the information
into one <code>TAGS</code> file in the <code>src/</code> directory below the top
level of your Emacs source directory.

<p>To build this <code>TAGS</code> file, go to the top level of your Emacs
source directory and run the compile command <code>make tags</code>:

<pre>M-x compile RET make tags RET
</pre>

<p>(The <code>make tags</code> command works well with the GNU Emacs sources,
as well as with some other source packages.)

<p>For more information, see <a href="emacs.html#Tag%20Tables">Tags</a>.

<p><hr>
Node:<a name="Regexp%20Review">Regexp Review</a>,
Next:<a rel=next href="#re-search%20Exercises">re-search Exercises</a>,
Previous:<a rel=previous href="#etags">etags</a>,
Up:<a rel=up href="#Regexp%20Search">Regexp Search</a>
<br>

<h2>12.6 Review</h2>

<p>Here is a brief summary of some recently introduced functions.

<dl>
<dt><code>while</code>
<dd>Repeatedly evaluate the body of the expression so long as the first
element of the body tests true.  Then return <code>nil</code>.  (The
expression is evaluated only for its side effects.)

<p>For example:

<pre>(let ((foo 2))
  (while (&gt; foo 0)
    (insert (format "foo is %d.\n" foo))
    (setq foo (1- foo))))

     =&gt;      foo is 2.
             foo is 1.
             nil
</pre>

<p>(The <code>insert</code> function inserts its arguments at point; the
<code>format</code> function returns a string formatted from its arguments
the way <code>message</code> formats its arguments; <code>\n</code> produces a new
line.)

<br><dt><code>re-search-forward</code>
<dd>Search for a pattern, and if the pattern is found, move point to rest
just after it.

<p>Takes four arguments, like <code>search-forward</code>:

<ol type=1 start=1>
</p><li>A regular expression that specifies the pattern to search for.

<li>Optionally, the limit of the search.

<li>Optionally, what to do if the search fails, return <code>nil</code> or an
error message.

<li>Optionally, how many times to repeat the search; if negative, the
search goes backwards.
</ol>

<br><dt><code>let*</code>
<dd>Bind some variables locally to particular values,
and then evaluate the remaining arguments, returning the value of the
last one.  While binding the local variables, use the local values of
variables bound earlier, if any.

<p>For example:

<pre>(let* ((foo 7)
      (bar (* 3 foo)))
  (message "`bar' is %d." bar))
     =&gt; `bar' is 21.
</pre>

<br><dt><code>match-beginning</code>
<dd>Return the position of the start of the text found by the last regular
expression search.

<br><dt><code>looking-at</code>
<dd>Return <code>t</code> for true if the text after point matches the argument,
which should be a regular expression.

<br><dt><code>eobp</code>
<dd>Return <code>t</code> for true if point is at the end of the accessible part
of a buffer.  The end of the accessible part is the end of the buffer
if the buffer is not narrowed; it is the end of the narrowed part if
the buffer is narrowed.

<br><dt><code>prog1</code>
<dd>Evaluate each argument in sequence and then return the value of the
<em>first</em>.

<p>For example:

<pre>(prog1 1 2 3 4)
     =&gt; 1
</pre>
</dl>

<p><hr>
Node:<a name="re-search%20Exercises">re-search Exercises</a>,
Previous:<a rel=previous href="#Regexp%20Review">Regexp Review</a>,
Up:<a rel=up href="#Regexp%20Search">Regexp Search</a>
<br>

<h2>12.7 Exercises with <code>re-search-forward</code></h2>

<ul>
<li>Write a function to search for a regular expression that matches two
or more blank lines in sequence.

<li>Write a function to search for duplicated words, such as `the the'. 
See <a href="emacs.html#Syntax%20of%20Regular%20Expressions">Regexps</a>, for information on how to write a regexp (a regular
expression) to match a string that is composed of two identical
halves.  You can devise several regexps; some are better than others. 
The function I use is described in an appendix, along with several
regexps.  See <a href="#the-the"><code>the-the</code> Duplicated Words Function</a>. 
</ul>

<p><hr>
Node:<a name="Counting%20Words">Counting Words</a>,
Next:<a rel=next href="#Words%20in%20a%20defun">Words in a defun</a>,
Previous:<a rel=previous href="#Regexp%20Search">Regexp Search</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>13 Counting: Repetition and Regexps</h1>

<p>Repetition and regular expression searches are powerful tools that you
often use when you write code in Emacs Lisp.  This chapter illustrates
the use of regular expression searches through the construction of
word count commands using <code>while</code> loops and recursion.

<ul>
<li><a href="#Why%20Count%20Words">Why Count Words</a>: 
<li><a href="#count-words-region">count-words-region</a>:           Use a regexp, but find a problem. 
<li><a href="#recursive-count-words">recursive-count-words</a>:        Start with case of no words in region. 
<li><a href="#Counting%20Exercise">Counting Exercise</a>: 
</ul>

<p><hr>
Node:<a name="Why%20Count%20Words">Why Count Words</a>,
Next:<a rel=next href="#count-words-region">count-words-region</a>,
Previous:<a rel=previous href="#Counting%20Words">Counting Words</a>,
Up:<a rel=up href="#Counting%20Words">Counting Words</a>
<br>

<h2>Counting words</h2>

<p>The standard Emacs distribution contains a function for counting the
number of lines within a region.  However, there is no corresponding
function for counting words.

<p>Certain types of writing ask you to count words.  Thus, if you write
an essay, you may be limited to 800 words; if you write a novel, you
may discipline yourself to write 1000 words a day.  It seems odd to me
that Emacs lacks a word count command.  Perhaps people use Emacs
mostly for code or types of documentation that do not require word
counts; or perhaps they restrict themselves to the operating system
word count command, <code>wc</code>.  Alternatively, people may follow
the publishers' convention and compute a word count by dividing the
number of characters in a document by five.  In any event, here are
commands to count words.

<p><hr>
Node:<a name="count-words-region">count-words-region</a>,
Next:<a rel=next href="#recursive-count-words">recursive-count-words</a>,
Previous:<a rel=previous href="#Why%20Count%20Words">Why Count Words</a>,
Up:<a rel=up href="#Counting%20Words">Counting Words</a>
<br>

<h2>13.1 The <code>count-words-region</code> Function</h2>

<p>A word count command could count words in a line, paragraph, region,
or buffer.  What should the command cover?  You could design the
command to count the number of words in a complete buffer.  However,
the Emacs tradition encourages flexibility--you may want to count
words in just a section, rather than all of a buffer.  So it makes
more sense to design the command to count the number of words in a
region.  Once you have a <code>count-words-region</code> command, you can,
if you wish, count words in a whole buffer by marking it with <kbd>C-x
h</kbd> (<code>mark-whole-buffer</code>).

<p>Clearly, counting words is a repetitive act: starting from the
beginning of the region, you count the first word, then the second
word, then the third word, and so on, until you reach the end of the
region.  This means that word counting is ideally suited to recursion
or to a <code>while</code> loop.

<ul>
<li><a href="#Design%20count-words-region">Design count-words-region</a>:    The definition using a <code>while</code> loop. 
<li><a href="#Whitespace%20Bug">Whitespace Bug</a>:               The Whitespace Bug in <code>count-words-region</code>. 
</ul>

<p><hr>
Node:<a name="Design%20count-words-region">Design count-words-region</a>,
Next:<a rel=next href="#Whitespace%20Bug">Whitespace Bug</a>,
Previous:<a rel=previous href="#count-words-region">count-words-region</a>,
Up:<a rel=up href="#count-words-region">count-words-region</a>
<br>

<h3>Designing <code>count-words-region</code></h3>

<p>First, we will implement the word count command with a <code>while</code>
loop, then with recursion.  The command will, of course, be
interactive.

<p>The template for an interactive function definition is, as always:

<pre>(defun <var>name-of-function</var> (<var>argument-list</var>)
  "<var>documentation</var><small>...</small>"
  (<var>interactive-expression</var><small>...</small>)
  <var>body</var><small>...</small>)
</pre>

<p>What we need to do is fill in the slots.

<p>The name of the function should be self-explanatory and similar to the
existing <code>count-lines-region</code> name.  This makes the name easier
to remember.  <code>count-words-region</code> is a good choice.

<p>The function counts words within a region.  This means that the
argument list must contain symbols that are bound to the two
positions, the beginning and end of the region.  These two positions
can be called <code>beginning</code> and <code>end</code> respectively.  The first
line of the documentation should be a single sentence, since that is
all that is printed as documentation by a command such as
<code>apropos</code>.  The interactive expression will be of the form
<code>(interactive "r")</code>, since that will cause Emacs to pass the
beginning and end of the region to the function's argument list.  All
this is routine.

<p>The body of the function needs to be written to do three tasks:
first, to set up conditions under which the <code>while</code> loop can
count words, second, to run the <code>while</code> loop, and third, to send
a message to the user.

<p>When a user calls <code>count-words-region</code>, point may be at the
beginning or the end of the region.  However, the counting process
must start at the beginning of the region.  This means we will want
to put point there if it is not already there.  Executing
<code>(goto-char beginning)</code> ensures this.  Of course, we will want to
return point to its expected position when the function finishes its
work.  For this reason, the body must be enclosed in a
<code>save-excursion</code> expression.

<p>The central part of the body of the function consists of a
<code>while</code> loop in which one expression jumps point forward word by
word, and another expression counts those jumps.  The true-or-false-test
of the <code>while</code> loop should test true so long as point should jump
forward, and false when point is at the end of the region.

<p>We could use <code>(forward-word 1)</code> as the expression for moving point
forward word by word, but it is easier to see what Emacs identifies as a
`word' if we use a regular expression search.

<p>A regular expression search that finds the pattern for which it is
searching leaves point after the last character matched.  This means
that a succession of successful word searches will move point forward
word by word.

<p>As a practical matter, we want the regular expression search to jump
over whitespace and punctuation between words as well as over the
words themselves.  A regexp that refuses to jump over interword
whitespace would never jump more than one word!  This means that
the regexp should include the whitespace and punctuation that follows
a word, if any, as well as the word itself.  (A word may end a buffer
and not have any following whitespace or punctuation, so that part of
the regexp must be optional.)

<p>Thus, what we want for the regexp is a pattern defining one or more
word constituent characters followed, optionally, by one or more
characters that are not word constituents.  The regular expression for
this is:

<pre>\w+\W*
</pre>

<p>The buffer's syntax table determines which characters are and are not
word constituents.  (See <a href="#Syntax">What Constitutes a Word or Symbol?</a>, for more about syntax.  Also, see <a href="emacs.html#Syntax">Syntax</a>, and <a href="elisp.html#Syntax%20Tables">Syntax Tables</a>.)

<p>The search expression looks like this:

<pre>(re-search-forward "\\w+\\W*")
</pre>

<p>(Note that paired backslashes precede the <code>w</code> and <code>W</code>.  A
single backslash has special meaning to the Emacs Lisp interpreter.  It
indicates that the following character is interpreted differently than
usual.  For example, the two characters, <code>\n</code>, stand for
<code>newline</code>, rather than for a backslash followed by <code>n</code>.  Two
backslashes in a row stand for an ordinary, `unspecial' backslash.)

<p>We need a counter to count how many words there are; this variable
must first be set to 0 and then incremented each time Emacs goes
around the <code>while</code> loop.  The incrementing expression is simply:

<pre>(setq count (1+ count))
</pre>

<p>Finally, we want to tell the user how many words there are in the
region.  The <code>message</code> function is intended for presenting this
kind of information to the user.  The message has to be phrased so
that it reads properly regardless of how many words there are in the
region: we don't want to say that "there are 1 words in the region". 
The conflict between singular and plural is ungrammatical.  We can
solve this problem by using a conditional expression that evaluates
different messages depending on the number of words in the region. 
There are three possibilities: no words in the region, one word in the
region, and more than one word.  This means that the <code>cond</code>
special form is appropriate.

<p>All this leads to the following function definition:

<pre>;;; First version; has bugs!
(defun count-words-region (beginning end)
  "Print number of words in the region.
Words are defined as at least one word-constituent
character followed by at least one character that
is not a word-constituent.  The buffer's syntax
table determines which characters these are."
  (interactive "r")
  (message "Counting words in region ... ")

;;; 1. Set up appropriate conditions.
  (save-excursion
    (goto-char beginning)
    (let ((count 0))

;;; 2. Run the while loop.
      (while (&lt; (point) end)
        (re-search-forward "\\w+\\W*")
        (setq count (1+ count)))

;;; 3. Send a message to the user.
      (cond ((zerop count)
             (message
              "The region does NOT have any words."))
            ((= 1 count)
             (message
              "The region has 1 word."))
            (t
             (message
              "The region has %d words." count))))))
</pre>

<p>As written, the function works, but not in all circumstances.

<p><hr>
Node:<a name="Whitespace%20Bug">Whitespace Bug</a>,
Previous:<a rel=previous href="#Design%20count-words-region">Design count-words-region</a>,
Up:<a rel=up href="#count-words-region">count-words-region</a>
<br>

<h3>13.1.1 The Whitespace Bug in <code>count-words-region</code></h3>

<p>The <code>count-words-region</code> command described in the preceding
section has two bugs, or rather, one bug with two manifestations. 
First, if you mark a region containing only whitespace in the middle
of some text, the <code>count-words-region</code> command tells you that the
region contains one word!  Second, if you mark a region containing
only whitespace at the end of the buffer or the accessible portion of
a narrowed buffer, the command displays an error message that looks
like this:

<pre>Search failed: "\\w+\\W*"
</pre>

<p>If you are reading this in Info in GNU Emacs, you can test for these
bugs yourself.

<p>First, evaluate the function in the usual manner to install it.

<p>If you wish, you can also install this keybinding by evaluating it:

<pre>(global-set-key "\C-c=" 'count-words-region)
</pre>

<p>To conduct the first test, set mark and point to the beginning and end
of the following line and then type <kbd>C-c =</kbd> (or <kbd>M-x
count-words-region</kbd> if you have not bound <kbd>C-c =</kbd>):

<pre>    one   two  three
</pre>

<p>Emacs will tell you, correctly, that the region has three words.

<p>Repeat the test, but place mark at the beginning of the line and place
point just <em>before</em> the word <code>one</code>.  Again type the command
<kbd>C-c =</kbd> (or <kbd>M-x count-words-region</kbd>).  Emacs should tell you
that the region has no words, since it is composed only of the
whitespace at the beginning of the line.  But instead Emacs tells you
that the region has one word!

<p>For the third test, copy the sample line to the end of the
<code>*scratch*</code> buffer and then type several spaces at the end of the
line.  Place mark right after the word <code>three</code> and point at the
end of line.  (The end of the line will be the end of the buffer.) 
Type <kbd>C-c =</kbd> (or <kbd>M-x count-words-region</kbd>) as you did before. 
Again, Emacs should tell you that the region has no words, since it is
composed only of the whitespace at the end of the line.  Instead,
Emacs displays an error message saying <code>Search failed</code>.

<p>The two bugs stem from the same problem.

<p>Consider the first manifestation of the bug, in which the command
tells you that the whitespace at the beginning of the line contains
one word.  What happens is this: The <code>M-x count-words-region</code>
command moves point to the beginning of the region.  The <code>while</code>
tests whether the value of point is smaller than the value of
<code>end</code>, which it is.  Consequently, the regular expression search
looks for and finds the first word.  It leaves point after the word. 
<code>count</code> is set to one.  The <code>while</code> loop repeats; but this
time the value of point is larger than the value of <code>end</code>, the
loop is exited; and the function displays a message saying the number
of words in the region is one.  In brief, the regular expression
search looks for and finds the word even though it is outside
the marked region.

<p>In the second manifestation of the bug, the region is whitespace at
the end of the buffer.  Emacs says <code>Search failed</code>.  What happens
is that the true-or-false-test in the <code>while</code> loop tests true, so
the search expression is executed.  But since there are no more words
in the buffer, the search fails.

<p>In both manifestations of the bug, the search extends or attempts to
extend outside of the region.

<p>The solution is to limit the search to the region--this is a fairly
simple action, but as you may have come to expect, it is not quite as
simple as you might think.

<p>As we have seen, the <code>re-search-forward</code> function takes a search
pattern as its first argument.  But in addition to this first,
mandatory argument, it accepts three optional arguments.  The optional
second argument bounds the search.  The optional third argument, if
<code>t</code>, causes the function to return <code>nil</code> rather than signal
an error if the search fails.  The optional fourth argument is a
repeat count.  (In Emacs, you can see a function's documentation by
typing <kbd>C-h f</kbd>, the name of the function, and then &lt;RET&gt;.)

<p>In the <code>count-words-region</code> definition, the value of the end of
the region is held by the variable <code>end</code> which is passed as an
argument to the function.  Thus, we can add <code>end</code> as an argument
to the regular expression search expression:

<pre>(re-search-forward "\\w+\\W*" end)
</pre>

<p>However, if you make only this change to the <code>count-words-region</code>
definition and then test the new version of the definition on a
stretch of whitespace, you will receive an error message saying
<code>Search failed</code>.

<p>What happens is this: the search is limited to the region, and fails
as you expect because there are no word-constituent characters in the
region.  Since it fails, we receive an error message.  But we do not
want to receive an error message in this case; we want to receive the
message that "The region does NOT have any words."

<p>The solution to this problem is to provide <code>re-search-forward</code>
with a third argument of <code>t</code>, which causes the function to return
<code>nil</code> rather than signal an error if the search fails.

<p>However, if you make this change and try it, you will see the message
"Counting words in region ... " and <small>...</small> you will keep on seeing
that message <small>...</small>, until you type <kbd>C-g</kbd> (<code>keyboard-quit</code>).

<p>Here is what happens: the search is limited to the region, as before,
and it fails because there are no word-constituent characters in the
region, as expected.  Consequently, the <code>re-search-forward</code>
expression returns <code>nil</code>.  It does nothing else.  In particular,
it does not move point, which it does as a side effect if it finds the
search target.  After the <code>re-search-forward</code> expression returns
<code>nil</code>, the next expression in the <code>while</code> loop is evaluated. 
This expression increments the count.  Then the loop repeats.  The
true-or-false-test tests true because the value of point is still less
than the value of end, since the <code>re-search-forward</code> expression
did not move point. <small>...</small> and the cycle repeats <small>...</small>

<p>The <code>count-words-region</code> definition requires yet another
modification, to cause the true-or-false-test of the <code>while</code> loop
to test false if the search fails.  Put another way, there are two
conditions that must be satisfied in the true-or-false-test before the
word count variable is incremented: point must still be within the
region and the search expression must have found a word to count.

<p>Since both the first condition and the second condition must be true
together, the two expressions, the region test and the search
expression, can be joined with an <code>and</code> special form and embedded in
the <code>while</code> loop as the true-or-false-test, like this:

<pre>(and (&lt; (point) end) (re-search-forward "\\w+\\W*" end t))
</pre>

<p>The <code>re-search-forward</code> expression returns <code>t</code> if the search
succeeds and as a side effect moves point.  Consequently, as words are
found, point is moved through the region.  When the search
expression fails to find another word, or when point reaches the end
of the region, the true-or-false-test tests false, the <code>while</code>
loop exists, and the <code>count-words-region</code> function displays one
or other of its messages.

<p>After incorporating these final changes, the <code>count-words-region</code>
works without bugs (or at least, without bugs that I have found!). 
Here is what it looks like:

<pre>;;; Final version: <code>while</code>
(defun count-words-region (beginning end)
  "Print number of words in the region."
  (interactive "r")
  (message "Counting words in region ... ")

;;; 1. Set up appropriate conditions.
  (save-excursion
    (let ((count 0))
      (goto-char beginning)

;;; 2. Run the while loop.
      (while (and (&lt; (point) end)
                  (re-search-forward "\\w+\\W*" end t))
        (setq count (1+ count)))

;;; 3. Send a message to the user.
      (cond ((zerop count)
             (message
              "The region does NOT have any words."))
            ((= 1 count)
             (message
              "The region has 1 word."))
            (t
             (message
              "The region has %d words." count))))))
</pre>

<p><hr>
Node:<a name="recursive-count-words">recursive-count-words</a>,
Next:<a rel=next href="#Counting%20Exercise">Counting Exercise</a>,
Previous:<a rel=previous href="#count-words-region">count-words-region</a>,
Up:<a rel=up href="#Counting%20Words">Counting Words</a>
<br>

<h2>13.2 Count Words Recursively</h2>

<p>You can write the function for counting words recursively as well as
with a <code>while</code> loop.  Let's see how this is done.

<p>First, we need to recognize that the <code>count-words-region</code>
function has three jobs: it sets up the appropriate conditions for
counting to occur; it counts the words in the region; and it sends a
message to the user telling how many words there are.

<p>If we write a single recursive function to do everything, we will
receive a message for every recursive call.  If the region contains 13
words, we will receive thirteen messages, one right after the other. 
We don't want this!  Instead, we must write two functions to do the
job, one of which (the recursive function) will be used inside of the
other.  One function will set up the conditions and display the
message; the other will return the word count.

<p>Let us start with the function that causes the message to be displayed. 
We can continue to call this <code>count-words-region</code>.

<p>This is the function that the user will call.  It will be interactive. 
Indeed, it will be similar to our previous versions of this
function, except that it will call <code>recursive-count-words</code> to
determine how many words are in the region.

<p>We can readily construct a template for this function, based on our
previous versions:

<pre>;; Recursive version; uses regular expression search
(defun count-words-region (beginning end)
  "<var>documentation</var><small>...</small>"
  (<var>interactive-expression</var><small>...</small>)

;;; 1. Set up appropriate conditions.
  (<var>explanatory message</var>)
  (<var>set-up functions</var><small>...</small>

;;; 2. Count the words.
    <var>recursive call</var>

;;; 3. Send a message to the user.
    <var>message providing word count</var>))
</pre>

<p>The definition looks straightforward, except that somehow the count
returned by the recursive call must be passed to the message
displaying the word count.  A little thought suggests that this can be
done by making use of a <code>let</code> expression: we can bind a variable
in the varlist of a <code>let</code> expression to the number of words in
the region, as returned by the recursive call; and then the
<code>cond</code> expression, using binding, can display the value to the
user.

<p>Often, one thinks of the binding within a <code>let</code> expression as
somehow secondary to the `primary' work of a function.  But in this
case, what you might consider the `primary' job of the function,
counting words, is done within the <code>let</code> expression.

<p>Using <code>let</code>, the function definition looks like this:

<pre>(defun count-words-region (beginning end)
  "Print number of words in the region."
  (interactive "r")

;;; 1. Set up appropriate conditions.
  (message "Counting words in region ... ")
  (save-excursion
    (goto-char beginning)

;;; 2. Count the words.
    (let ((count (recursive-count-words end)))

;;; 3. Send a message to the user.
      (cond ((zerop count)
             (message
              "The region does NOT have any words."))
            ((= 1 count)
             (message
              "The region has 1 word."))
            (t
             (message
              "The region has %d words." count))))))
</pre>

<p>Next, we need to write the recursive counting function.

<p>A recursive function has at least three parts: the `do-again-test', the
`next-step-expression', and the recursive call.

<p>The do-again-test determines whether the function will or will not be
called again.  Since we are counting words in a region and can use a
function that moves point forward for every word, the do-again-test
can check whether point is still within the region.  The do-again-test
should find the value of point and determine whether point is before,
at, or after the value of the end of the region.  We can use the
<code>point</code> function to locate point.  Clearly, we must pass the
value of the end of the region to the recursive counting function as an
argument.

<p>In addition, the do-again-test should also test whether the search finds a
word.  If it does not, the function should not call itself again.

<p>The next-step-expression changes a value so that when the recursive
function is supposed to stop calling itself, it stops.  More
precisely, the next-step-expression changes a value so that at the
right time, the do-again-test stops the recursive function from
calling itself again.  In this case, the next-step-expression can be
the expression that moves point forward, word by word.

<p>The third part of a recursive function is the recursive call.

<p>Somewhere, also, we also need a part that does the `work' of the
function, a part that does the counting.  A vital part!

<p>But already, we have an outline of the recursive counting function:

<pre>(defun recursive-count-words (region-end)
  "<var>documentation</var><small>...</small>"
   <var>do-again-test</var>
   <var>next-step-expression</var>
   <var>recursive call</var>)
</pre>

<p>Now we need to fill in the slots.  Let's start with the simplest cases
first:  if point is at or beyond the end of the region, there cannot
be any words in the region, so the function should return zero. 
Likewise, if the search fails, there are no words to count, so the
function should return zero.

<p>On the other hand, if point is within the region and the search
succeeds, the function should call itself again.

<p>Thus, the do-again-test should look like this:

<pre>(and (&lt; (point) region-end)
     (re-search-forward "\\w+\\W*" region-end t))
</pre>

<p>Note that the search expression is part of the do-again-test--the
function returns <code>t</code> if its search succeeds and <code>nil</code> if it
fails.  (See <a href="#Whitespace%20Bug">The Whitespace Bug in <code>count-words-region</code></a>, for an explanation of how
<code>re-search-forward</code> works.)

<p>The do-again-test is the true-or-false test of an <code>if</code> clause. 
Clearly, if the do-again-test succeeds, the then-part of the <code>if</code>
clause should call the function again; but if it fails, the else-part
should return zero since either point is outside the region or the
search failed because there were no words to find.

<p>But before considering the recursive call, we need to consider the
next-step-expression.  What is it?  Interestingly, it is the search
part of the do-again-test.

<p>In addition to returning <code>t</code> or <code>nil</code> for the
do-again-test, <code>re-search-forward</code> moves point forward as a side
effect of a successful search.  This is the action that changes the
value of point so that the recursive function stops calling itself
when point completes its movement through the region.  Consequently,
the <code>re-search-forward</code> expression is the next-step-expression.

<p>In outline, then, the body of the <code>recursive-count-words</code>
function looks like this:

<pre>(if <var>do-again-test-and-next-step-combined</var>
    ;; then
    <var>recursive-call-returning-count</var>
  ;; else
  <var>return-zero</var>)
</pre>

<p>How to incorporate the mechanism that counts?

<p>If you are not used to writing recursive functions, a question like
this can be troublesome.  But it can and should be approached
systematically.

<p>We know that the counting mechanism should be associated in some way
with the recursive call.  Indeed, since the next-step-expression moves
point forward by one word, and since a recursive call is made for
each word, the counting mechanism must be an expression that adds one
to the value returned by a call to <code>recursive-count-words</code>.

<p>Consider several cases:

<ul>
<li>If there are two words in the region, the function should return
a value resulting from adding one to the value returned when it counts
the first word, plus the number returned when it counts the remaining
words in the region, which in this case is one.

<li>If there is one word in the region, the function should return
a value resulting from adding one to the value returned when it counts
that word, plus the number returned when it counts the remaining
words in the region, which in this case is zero.

<li>If there are no words in the region, the function should return zero. 
</ul>

<p>From the sketch we can see that the else-part of the <code>if</code> returns
zero for the case of no words.  This means that the then-part of the
<code>if</code> must return a value resulting from adding one to the value
returned from a count of the remaining words.

<p>The expression will look like this, where <code>1+</code> is a function that
adds one to its argument.

<pre>(1+ (recursive-count-words region-end))
</pre>

<p>The whole <code>recursive-count-words</code> function will then look like
this:

<pre>(defun recursive-count-words (region-end)
  "<var>documentation</var><small>...</small>"

;;; 1. do-again-test
  (if (and (&lt; (point) region-end)
           (re-search-forward "\\w+\\W*" region-end t))

;;; 2. then-part: the recursive call
      (1+ (recursive-count-words region-end))

;;; 3. else-part
    0))
</pre>

<p>Let's examine how this works:

<p>If there are no words in the region, the else part of the <code>if</code>
expression is evaluated and consequently the function returns zero.

<p>If there is one word in the region, the value of point is less than
the value of <code>region-end</code> and the search succeeds.  In this case,
the true-or-false-test of the <code>if</code> expression tests true, and the
then-part of the <code>if</code> expression is evaluated.  The counting
expression is evaluated.  This expression returns a value (which will
be the value returned by the whole function) that is the sum of one
added to the value returned by a recursive call.

<p>Meanwhile, the next-step-expression has caused point to jump over the
first (and in this case only) word in the region.  This means that
when <code>(recursive-count-words region-end)</code> is evaluated a second
time, as a result of the recursive call, the value of point will be
equal to or greater than the value of region end.  So this time,
<code>recursive-count-words</code> will return zero.  The zero will be added
to one, and the original evaluation of <code>recursive-count-words</code>
will return one plus zero, which is one, which is the correct amount.

<p>Clearly, if there are two words in the region, the first call to
<code>recursive-count-words</code> returns one added to the value returned
by calling <code>recursive-count-words</code> on a region containing the
remaining word--that is, it adds one to one, producing two, which is
the correct amount.

<p>Similarly, if there are three words in the region, the first call to
<code>recursive-count-words</code> returns one added to the value returned
by calling <code>recursive-count-words</code> on a region containing the
remaining two words--and so on and so on.

<p>With full documentation the two functions look like this:

<p>The recursive function:

<pre>(defun recursive-count-words (region-end)
  "Number of words between point and REGION-END."

;;; 1. do-again-test
  (if (and (&lt; (point) region-end)
           (re-search-forward "\\w+\\W*" region-end t))

;;; 2. then-part: the recursive call
      (1+ (recursive-count-words region-end))

;;; 3. else-part
    0))
</pre>

<p>The wrapper:

<pre>;;; Recursive version
(defun count-words-region (beginning end)
  "Print number of words in the region.

Words are defined as at least one word-constituent
character followed by at least one character that is
not a word-constituent.  The buffer's syntax table
determines which characters these are."
  (interactive "r")
  (message "Counting words in region ... ")
  (save-excursion
    (goto-char beginning)
    (let ((count (recursive-count-words end)))
      (cond ((zerop count)
             (message
              "The region does NOT have any words."))
            ((= 1 count)
             (message "The region has 1 word."))
            (t
             (message
              "The region has %d words." count))))))
</pre>

<p><hr>
Node:<a name="Counting%20Exercise">Counting Exercise</a>,
Previous:<a rel=previous href="#recursive-count-words">recursive-count-words</a>,
Up:<a rel=up href="#Counting%20Words">Counting Words</a>
<br>

<h2>13.3 Exercise: Counting Punctuation</h2>

<p>Using a <code>while</code> loop, write a function to count the number of
punctuation marks in a region--period, comma, semicolon, colon,
exclamation mark, and question mark.  Do the same using recursion.

<p><hr>
Node:<a name="Words%20in%20a%20defun">Words in a defun</a>,
Next:<a rel=next href="#Readying%20a%20Graph">Readying a Graph</a>,
Previous:<a rel=previous href="#Counting%20Words">Counting Words</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>14 Counting Words in a <code>defun</code></h1>

<p>Our next project is to count the number of words in a function
definition.  Clearly, this can be done using some variant of
<code>count-word-region</code>.  See <a href="#Counting%20Words">Counting Words: Repetition and Regexps</a>.  If we are just going to count the words in
one definition, it is easy enough to mark the definition with the
<kbd>C-M-h</kbd> (<code>mark-defun</code>) command, and then call
<code>count-word-region</code>.

<p>However, I am more ambitious: I want to count the words and symbols in
every definition in the Emacs sources and then print a graph that
shows how many functions there are of each length: how many contain 40
to 49 words or symbols, how many contain 50 to 59 words or symbols,
and so on.  I have often been curious how long a typical function is,
and this will tell.

<ul>
<li><a href="#Divide%20and%20Conquer">Divide and Conquer</a>: 
<li><a href="#Words%20and%20Symbols">Words and Symbols</a>:            What to count? 
<li><a href="#Syntax">Syntax</a>:                       What constitutes a word or symbol? 
<li><a href="#count-words-in-defun">count-words-in-defun</a>:         Very like <code>count-words</code>. 
<li><a href="#Several%20defuns">Several defuns</a>:               Counting several defuns in a file. 
<li><a href="#Find%20a%20File">Find a File</a>:                  Do you want to look at a file? 
<li><a href="#lengths-list-file">lengths-list-file</a>:            A list of the lengths of many definitions. 
<li><a href="#Several%20files">Several files</a>:                Counting in definitions in different files. 
<li><a href="#Several%20files%20recursively">Several files recursively</a>:    Recursively counting in different files. 
<li><a href="#Prepare%20the%20data">Prepare the data</a>:             Prepare the data for display in a graph. 
</ul>

<p><hr>
Node:<a name="Divide%20and%20Conquer">Divide and Conquer</a>,
Next:<a rel=next href="#Words%20and%20Symbols">Words and Symbols</a>,
Previous:<a rel=previous href="#Words%20in%20a%20defun">Words in a defun</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>Divide and Conquer</h2>

<p>Described in one phrase, the histogram project is daunting; but
divided into numerous small steps, each of which we can take one at a
time, the project becomes less fearsome.  Let us consider what the
steps must be:

<ul>
<li>First, write a function to count the words in one definition.  This
includes the problem of handling symbols as well as words.

<li>Second, write a function to list the numbers of words in each function
in a file.  This function can use the <code>count-words-in-defun</code>
function.

<li>Third, write a function to list the numbers of words in each function
in each of several files.  This entails automatically finding the
various files, switching to them, and counting the words in the
definitions within them.

<li>Fourth, write a function to convert the list of numbers that we
created in step three to a form that will be suitable for printing as
a graph.

<li>Fifth, write a function to print the results as a graph. 
</ul>

<p>This is quite a project!  But if we take each step slowly, it will not
be difficult.

<p><hr>
Node:<a name="Words%20and%20Symbols">Words and Symbols</a>,
Next:<a rel=next href="#Syntax">Syntax</a>,
Previous:<a rel=previous href="#Divide%20and%20Conquer">Divide and Conquer</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.1 What to Count?</h2>

<p>When we first start thinking about how to count the words in a
function definition, the first question is (or ought to be) what are
we going to count?  When we speak of `words' with respect to a Lisp
function definition, we are actually speaking, in large part, of
`symbols'.  For example, the following <code>multiply-by-seven</code>
function contains the five symbols <code>defun</code>,
<code>multiply-by-seven</code>, <code>number</code>, <code>*</code>, and <code>7</code>.  In
addition, in the documentation string, it contains the four words
<code>Multiply</code>, <code>NUMBER</code>, <code>by</code>, and <code>seven</code>.  The
symbol <code>number</code> is repeated, so the definition contains a total
of ten words and symbols.

<pre>(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))
</pre>

<p>However, if we mark the <code>multiply-by-seven</code> definition with
<kbd>C-M-h</kbd> (<code>mark-defun</code>), and then call
<code>count-words-region</code> on it, we will find that
<code>count-words-region</code> claims the definition has eleven words, not
ten!  Something is wrong!

<p>The problem is twofold: <code>count-words-region</code> does not count the
<code>*</code> as a word, and it counts the single symbol,
<code>multiply-by-seven</code>, as containing three words.  The hyphens are
treated as if they were interword spaces rather than intraword
connectors: <code>multiply-by-seven</code> is counted as if it were written
<code>multiply by seven</code>.

<p>The cause of this confusion is the regular expression search within
the <code>count-words-region</code> definition that moves point forward word
by word.  In the canonical version of <code>count-words-region</code>, the
regexp is:

<pre>"\\w+\\W*"
</pre>

<p>This regular expression is a pattern defining one or more word
constituent characters possibly followed by one or more characters
that are not word constituents.  What is meant by `word constituent
characters' brings us to the issue of syntax, which is worth a section
of its own.

<p><hr>
Node:<a name="Syntax">Syntax</a>,
Next:<a rel=next href="#count-words-in-defun">count-words-in-defun</a>,
Previous:<a rel=previous href="#Words%20and%20Symbols">Words and Symbols</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.2 What Constitutes a Word or Symbol?</h2>

<p>Emacs treats different characters as belonging to different
<dfn>syntax categories</dfn>.  For example, the regular expression,
<code>\\w+</code>, is a pattern specifying one or more <em>word
constituent</em> characters.  Word constituent characters are members of
one syntax category.  Other syntax categories include the class of
punctuation characters, such as the period and the comma, and the
class of whitespace characters, such as the blank space and the tab
character.  (For more information, see <a href="emacs.html#Syntax">Syntax</a>, and <a href="elisp.html#Syntax%20Tables">Syntax Tables</a>.)

<p>Syntax tables specify which characters belong to which categories. 
Usually, a hyphen is not specified as a `word constituent character'. 
Instead, it is specified as being in the `class of characters that are
part of symbol names but not words.'  This means that the
<code>count-words-region</code> function treats it in the same way it treats
an interword white space, which is why <code>count-words-region</code>
counts <code>multiply-by-seven</code> as three words.

<p>There are two ways to cause Emacs to count <code>multiply-by-seven</code> as
one symbol: modify the syntax table or modify the regular expression.

<p>We could redefine a hyphen as a word constituent character by
modifying the syntax table that Emacs keeps for each mode.  This
action would serve our purpose, except that a hyphen is merely the
most common character within symbols that is not typically a word
constituent character; there are others, too.

<p>Alternatively, we can redefine the regular expression used in the
<code>count-words</code> definition so as to include symbols.  This
procedure has the merit of clarity, but the task is a little tricky.

<p>The first part is simple enough: the pattern must match "at least one
character that is a word or symbol constituent".  Thus:

<pre>"\\(\\w\\|\\s_\\)+"
</pre>

<p>The <code>\\(</code> is the first part of the grouping construct that
includes the <code>\\w</code> and the <code>\\s_</code> as alternatives, separated
by the <code>\\|</code>.  The <code>\\w</code> matches any word-constituent
character and the <code>\\s_</code> matches any character that is part of a
symbol name but not a word-constituent character.  The <code>+</code>
following the group indicates that the word or symbol constituent
characters must be matched at least once.

<p>However, the second part of the regexp is more difficult to design. 
What we want is to follow the first part with "optionally one or more
characters that are not constituents of a word or symbol".  At first,
I thought I could define this with the following:

<pre>"\\(\\W\\|\\S_\\)*"
</pre>

<p>The upper case <code>W</code> and <code>S</code> match characters that are
<em>not</em> word or symbol constituents.  Unfortunately, this
expression matches any character that is either not a word constituent
or not a symbol constituent.  This matches any character!

<p>I then noticed that every word or symbol in my test region was
followed by white space (blank space, tab, or newline).  So I tried
placing a pattern to match one or more blank spaces after the pattern
for one or more word or symbol constituents.  This failed, too.  Words
and symbols are often separated by whitespace, but in actual code
parentheses may follow symbols and punctuation may follow words.  So
finally, I designed a pattern in which the word or symbol constituents
are followed optionally by characters that are not white space and
then followed optionally by white space.

<p>Here is the full regular expression:

<pre>"\\(\\w\\|\\s_\\)+[^ \t\n]*[ \t\n]*"
</pre>

<p><hr>
Node:<a name="count-words-in-defun">count-words-in-defun</a>,
Next:<a rel=next href="#Several%20defuns">Several defuns</a>,
Previous:<a rel=previous href="#Syntax">Syntax</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.3 The <code>count-words-in-defun</code> Function</h2>

<p>We have seen that there are several ways to write a
<code>count-word-region</code> function.  To write a
<code>count-words-in-defun</code>, we need merely adapt one of these
versions.

<p>The version that uses a <code>while</code> loop is easy to understand, so I
am going to adapt that.  Because <code>count-words-in-defun</code> will be
part of a more complex program, it need not be interactive and it need
not display a message but just return the count.  These considerations
simplify the definition a little.

<p>On the other hand, <code>count-words-in-defun</code> will be used within a
buffer that contains function definitions.  Consequently, it is
reasonable to ask that the function determine whether it is called
when point is within a function definition, and if it is, to return
the count for that definition.  This adds complexity to the
definition, but saves us from needing to pass arguments to the
function.

<p>These considerations lead us to prepare the following template:

<pre>(defun count-words-in-defun ()
  "<var>documentation</var><small>...</small>"
  (<var>set up</var><small>...</small>
     (<var>while loop</var><small>...</small>)
   <var>return count</var>)
</pre>

<p>As usual, our job is to fill in the slots.

<p>First, the set up.

<p>We are presuming that this function will be called within a buffer
containing function definitions.  Point will either be within a
function definition or not.  For <code>count-words-in-defun</code> to work,
point must move to the beginning of the definition, a counter must
start at zero, and the counting loop must stop when point reaches the
end of the definition.

<p>The <code>beginning-of-defun</code> function searches backwards for an
opening delimiter such as a <code>(</code> at the beginning of a line, and
moves point to that position, or else to the limit of the search.  In
practice, this means that <code>beginning-of-defun</code> moves point to the
beginning of an enclosing or preceding function definition, or else to
the beginning of the buffer.  We can use <code>beginning-of-defun</code> to
place point where we wish to start.

<p>The <code>while</code> loop requires a counter to keep track of the words or
symbols being counted.  A <code>let</code> expression can be used to create
a local variable for this purpose, and bind it to an initial value of zero.

<p>The <code>end-of-defun</code> function works like <code>beginning-of-defun</code>
except that it moves point to the end of the definition. 
<code>end-of-defun</code> can be used as part of an expression that
determines the position of the end of the definition.

<p>The set up for <code>count-words-in-defun</code> takes shape rapidly: first
we move point to the beginning of the definition, then we create a
local variable to hold the count, and finally, we record the position
of the end of the definition so the <code>while</code> loop will know when to stop
looping.

<p>The code looks like this:

<pre>(beginning-of-defun)
(let ((count 0)
      (end (save-excursion (end-of-defun) (point))))
</pre>

<p>The code is simple.  The only slight complication is likely to concern
<code>end</code>: it is bound to the position of the end of the definition
by a <code>save-excursion</code> expression that returns the value of point
after <code>end-of-defun</code> temporarily moves it to the end of the
definition.

<p>The second part of the <code>count-words-in-defun</code>, after the set up,
is the <code>while</code> loop.

<p>The loop must contain an expression that jumps point forward word by
word and symbol by symbol, and another expression that counts the
jumps.  The true-or-false-test for the <code>while</code> loop should test
true so long as point should jump forward, and false when point is at
the end of the definition.  We have already redefined the regular
expression for this (see <a href="#Syntax">Syntax</a>), so the loop is straightforward:

<pre>(while (and (&lt; (point) end)
            (re-search-forward
             "\\(\\w\\|\\s_\\)+[^ \t\n]*[ \t\n]*" end t)
  (setq count (1+ count)))
</pre>

<p>The third part of the function definition returns the count of words
and symbols.  This part is the last expression within the body of the
<code>let</code> expression, and can be, very simply, the local variable
<code>count</code>, which when evaluated returns the count.

<p>Put together, the <code>count-words-in-defun</code> definition looks like this:

<pre>(defun count-words-in-defun ()
  "Return the number of words and symbols in a defun."
  (beginning-of-defun)
  (let ((count 0)
        (end (save-excursion (end-of-defun) (point))))
    (while
        (and (&lt; (point) end)
             (re-search-forward
              "\\(\\w\\|\\s_\\)+[^ \t\n]*[ \t\n]*"
              end t))
      (setq count (1+ count)))
    count))
</pre>

<p>How to test this?  The function is not interactive, but it is easy to
put a wrapper around the function to make it interactive; we can use
almost the same code as for the recursive version of
<code>count-words-region</code>:

<pre>;;; Interactive version.
(defun count-words-defun ()
  "Number of words and symbols in a function definition."
  (interactive)
  (message
   "Counting words and symbols in function definition ... ")
  (let ((count (count-words-in-defun)))
    (cond
     ((zerop count)
      (message
       "The definition does NOT have any words or symbols."))
     ((= 1 count)
      (message
       "The definition has 1 word or symbol."))
     (t
      (message
       "The definition has %d words or symbols." count)))))
</pre>

<p>Let's re-use <kbd>C-c =</kbd> as a convenient keybinding:

<pre>(global-set-key "\C-c=" 'count-words-defun)
</pre>

<p>Now we can try out <code>count-words-defun</code>: install both
<code>count-words-in-defun</code> and <code>count-words-defun</code>, and set the
keybinding, and then place the cursor within the following definition:

<pre>(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))
     =&gt; 10
</pre>

<p>Success!  The definition has 10 words and symbols.

<p>The next problem is to count the numbers of words and symbols in
several definitions within a single file.

<p><hr>
Node:<a name="Several%20defuns">Several defuns</a>,
Next:<a rel=next href="#Find%20a%20File">Find a File</a>,
Previous:<a rel=previous href="#count-words-in-defun">count-words-in-defun</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.4 Count Several <code>defuns</code> Within a File</h2>

<p>A file such as <code>simple.el</code> may have 80 or more function
definitions within it.  Our long term goal is to collect statistics on
many files, but as a first step, our immediate goal is to collect
statistics on one file.

<p>The information will be a series of numbers, each number being the
length of a function definition.  We can store the numbers in a list.

<p>We know that we will want to incorporate the information regarding one
file with information about many other files; this means that the
function for counting definition lengths within one file need only
return the list of lengths.  It need not and should not display any
messages.

<p>The word count commands contain one expression to jump point forward
word by word and another expression to count the jumps.  The function
to return the lengths of definitions can be designed to work the same
way, with one expression to jump point forward definition by
definition and another expression to construct the lengths' list.

<p>This statement of the problem makes it elementary to write the
function definition.  Clearly, we will start the count at the
beginning of the file, so the first command will be <code>(goto-char
(point-min))</code>.  Next, we start the <code>while</code> loop; and the
true-or-false test of the loop can be a regular expression search for
the next function definition--so long as the search succeeds, point
is moved forward and then the body of the loop is evaluated.  The body
needs an expression that constructs the lengths' list.  <code>cons</code>,
the list construction command, can be used to create the list.  That
is almost all there is to it.

<p>Here is what this fragment of code looks like:

<pre>(goto-char (point-min))
(while (re-search-forward "^(defun" nil t)
  (setq lengths-list
        (cons (count-words-in-defun) lengths-list)))
</pre>

<p>What we have left out is the mechanism for finding the file that
contains the function definitions.

<p>In previous examples, we either used this, the Info file, or we
switched back and forth to some other buffer, such as the
<code>*scratch*</code> buffer.

<p>Finding a file is a new process that we have not yet discussed.

<p><hr>
Node:<a name="Find%20a%20File">Find a File</a>,
Next:<a rel=next href="#lengths-list-file">lengths-list-file</a>,
Previous:<a rel=previous href="#Several%20defuns">Several defuns</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.5 Find a File</h2>

<p>To find a file in Emacs, you use the <kbd>C-x C-f</kbd> (<code>find-file</code>)
command.  This command is almost, but not quite right for the lengths
problem.

<p>Let's look at the source for <code>find-file</code> (you can use the
<code>find-tag</code> command or <kbd>C-h f</kbd> (<code>describe-function</code>) to
find the source of a function):

<pre>(defun find-file (filename)
  "Edit file FILENAME.
Switch to a buffer visiting file FILENAME,
creating one if none already exists."
  (interactive "FFind file: ")
  (switch-to-buffer (find-file-noselect filename)))
</pre>

<p>The definition possesses short but complete documentation and an
interactive specification that prompts you for a file name when you
use the command interactively.  The body of the definition contains
two functions, <code>find-file-noselect</code> and <code>switch-to-buffer</code>.

<p>According to its documentation as shown by <kbd>C-h f</kbd> (the
<code>describe-function</code> command), the <code>find-file-noselect</code>
function reads the named file into a buffer and returns the buffer. 
However, the buffer is not selected.  Emacs does not switch its
attention (or yours if you are using <code>find-file-noselect</code>) to the
named buffer.  That is what <code>switch-to-buffer</code> does: it switches
the buffer to which Emacs attention is directed; and it switches the
buffer displayed in the window to the new buffer.  We have discussed
buffer switching elsewhere.  (See <a href="#Switching%20Buffers">Switching Buffers</a>.)

<p>In this histogram project, we do not need to display each file on the
screen as the program determines the length of each definition within
it.  Instead of employing <code>switch-to-buffer</code>, we can work with
<code>set-buffer</code>, which redirects the attention of the computer
program to a different buffer but does not redisplay it on the screen. 
So instead of calling on <code>find-file</code> to do the job, we must write
our own expression.

<p>The task is easy: use  <code>find-file-noselect</code> and <code>set-buffer</code>.

<p><hr>
Node:<a name="lengths-list-file">lengths-list-file</a>,
Next:<a rel=next href="#Several%20files">Several files</a>,
Previous:<a rel=previous href="#Find%20a%20File">Find a File</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.6 <code>lengths-list-file</code> in Detail</h2>

<p>The core of the <code>lengths-list-file</code> function is a <code>while</code>
loop containing a function to move point forward `defun by defun' and
a function to count the number of words and symbols in each defun. 
This core must be surrounded by functions that do various other tasks,
including finding the file, and ensuring that point starts out at the
beginning of the file.  The function definition looks like this:

<pre>(defun lengths-list-file (filename)
  "Return list of definitions' lengths within FILE.
The returned list is a list of numbers.
Each number is the number of words or
symbols in one function definition."
  (message "Working on `%s' ... " filename)
  (save-excursion
    (let ((buffer (find-file-noselect filename))
          (lengths-list))
      (set-buffer buffer)
      (setq buffer-read-only t)
      (widen)
      (goto-char (point-min))
      (while (re-search-forward "^(defun" nil t)
        (setq lengths-list
              (cons (count-words-in-defun) lengths-list)))
      (kill-buffer buffer)
      lengths-list)))
</pre>

<p>The function is passed one argument, the name of the file on which it
will work.  It has four lines of documentation, but no interactive
specification.  Since people worry that a computer is broken if they
don't see anything going on, the first line of the body is a
message.

<p>The next line contains a <code>save-excursion</code> that returns Emacs'
attention to the current buffer when the function completes.  This is
useful in case you embed this function in another function that
presumes point is restored to the original buffer.

<p>In the varlist of the <code>let</code> expression, Emacs finds the file and
binds the local variable <code>buffer</code> to the buffer containing the
file.  At the same time, Emacs creates <code>lengths-list</code> as a local
variable.

<p>Next, Emacs switches its attention to the buffer.

<p>In the following line, Emacs makes the buffer read-only.  Ideally,
this line is not necessary.  None of the functions for counting words
and symbols in a function definition should change the buffer. 
Besides, the buffer is not going to be saved, even if it were changed. 
This line is entirely the consequence of great, perhaps excessive,
caution.  The reason for the caution is that this function and those
it calls work on the sources for Emacs and it is very inconvenient if
they are inadvertently modified.  It goes without saying that I did
not realize a need for this line until an experiment went awry and
started to modify my Emacs source files <small>...</small>

<p>Next comes a call to widen the buffer if it is narrowed.  This
function is usually not needed--Emacs creates a fresh buffer if none
already exists; but if a buffer visiting the file already exists Emacs
returns that one.  In this case, the buffer may be narrowed and must
be widened.  If we wanted to be fully `user-friendly', we would
arrange to save the restriction and the location of point, but we
won't.

<p>The <code>(goto-char (point-min))</code> expression moves point to the
beginning of the buffer.

<p>Then comes a <code>while</code> loop in which the `work' of the function is
carried out.  In the loop, Emacs determines the length of each
definition and constructs a lengths' list containing the information.

<p>Emacs kills the buffer after working through it.  This is to save
space inside of Emacs.  My version of Emacs 19 contained over 300
source files of interest; Emacs 21 contains over 800 source files. 
Another function will apply <code>lengths-list-file</code> to each of the
files.

<p>Finally, the last expression within the <code>let</code> expression is the
<code>lengths-list</code> variable; its value is returned as the value of
the whole function.

<p>You can try this function by installing it in the usual fashion.  Then
place your cursor after the following expression and type <kbd>C-x
C-e</kbd> (<code>eval-last-sexp</code>).

<pre>(lengths-list-file
 "/usr/local/share/emacs/21.0.100/lisp/emacs-lisp/debug.el")
</pre>

<p>(You may need to change the pathname of the file; the one here worked
with GNU Emacs version 21.0.100.  To change the expression, copy it to
the <code>*scratch*</code> buffer and edit it.

<p>(Also, to see the full length of the list, rather than a truncated
version, you may have to evaluate the following:

<pre>(custom-set-variables '(eval-expression-print-length nil))
</pre>

<p>(See <a href="#defcustom">Setting Variables with <code>defcustom</code></a>. 
Then evaluate the <code>lengths-list-file</code> expression.)

<p>The lengths' list for <code>debug.el</code> takes less than a second to
produce and looks like this:

<pre>(77 95 85 87 131 89 50 25 44 44 68 35 64 45 17 34 167 457)
</pre>

<p>(Using my old machine, the version 19 lengths' list for <code>debug.el</code>
took seven seconds to produce and looked like this:

<pre>(75 41 80 62 20 45 44 68 45 12 34 235)
</pre>

<p>(The newer version of  <code>debug.el</code> contains more defuns than the
earlier one; and my new machine is much faster than the old one.)

<p>Note that the length of the last definition in the file is first in
the list.

<p><hr>
Node:<a name="Several%20files">Several files</a>,
Next:<a rel=next href="#Several%20files%20recursively">Several files recursively</a>,
Previous:<a rel=previous href="#lengths-list-file">lengths-list-file</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.7 Count Words in <code>defuns</code> in Different Files</h2>

<p>In the previous section, we created a function that returns a list of
the lengths of each definition in a file.  Now, we want to define a
function to return a master list of the lengths of the definitions in
a list of files.

<p>Working on each of a list of files is a repetitious act, so we can use
either a <code>while</code> loop or recursion.

<ul>
<li><a href="#lengths-list-many-files">lengths-list-many-files</a>:      Return a list of the lengths of defuns. 
<li><a href="#append">append</a>:                       Attach one list to another. 
</ul>

<p><hr>
Node:<a name="lengths-list-many-files">lengths-list-many-files</a>,
Next:<a rel=next href="#append">append</a>,
Previous:<a rel=previous href="#Several%20files">Several files</a>,
Up:<a rel=up href="#Several%20files">Several files</a>
<br>

<h3>Determine the lengths of <code>defuns</code></h3>

<p>The design using a <code>while</code> loop is routine.  The argument passed
the function is a list of files.  As we saw earlier (see <a href="#Loop%20Example">Loop Example</a>), you can write a <code>while</code> loop so that the body of the
loop is evaluated if such a list contains elements, but to exit the
loop if the list is empty.  For this design to work, the body of the
loop must contain an expression that shortens the list each time the
body is evaluated, so that eventually the list is empty.  The usual
technique is to set the value of the list to the value of the <small>CDR</small>
of the list each time the body is evaluated.

<p>The template looks like this:

<pre>(while <var>test-whether-list-is-empty</var>
  <var>body</var><small>...</small>
  <var>set-list-to-cdr-of-list</var>)
</pre>

<p>Also, we remember that a <code>while</code> loop returns <code>nil</code> (the
result of evaluating the true-or-false-test), not the result of any
evaluation within its body.  (The evaluations within the body of the
loop are done for their side effects.)  However, the expression that
sets the lengths' list is part of the body--and that is the value
that we want returned by the function as a whole.  To do this, we
enclose the <code>while</code> loop within a <code>let</code> expression, and
arrange that the last element of the <code>let</code> expression contains
the value of the lengths' list.  (See <a href="#Incrementing%20Example">Loop Example with an Incrementing Counter</a>.)

<p>These considerations lead us directly to the function itself:

<pre>;;; Use <code>while</code> loop.
(defun lengths-list-many-files (list-of-files)
  "Return list of lengths of defuns in LIST-OF-FILES."
  (let (lengths-list)

;;; true-or-false-test
    (while list-of-files
      (setq lengths-list
            (append
             lengths-list

;;; Generate a lengths' list.
             (lengths-list-file
              (expand-file-name (car list-of-files)))))

;;; Make files' list shorter.
      (setq list-of-files (cdr list-of-files)))

;;; Return final value of lengths' list.
    lengths-list))
</pre>

<p><code>expand-file-name</code> is a built-in function that converts a file
name to the absolute, long, path name form of the directory in which
the function is called.

<p>Thus, if <code>expand-file-name</code> is called on <code>debug.el</code> when
Emacs is visiting the
<code>/usr/local/share/emacs/21.0.100/lisp/emacs-lisp/</code> directory,

<pre>debug.el
</pre>

<p>becomes

<pre>/usr/local/share/emacs/21.0.100/lisp/emacs-lisp/debug.el
</pre>

<p>The only other new element of this function definition is the as yet
unstudied function <code>append</code>, which merits a short section for
itself.

<p><hr>
Node:<a name="append">append</a>,
Previous:<a rel=previous href="#lengths-list-many-files">lengths-list-many-files</a>,
Up:<a rel=up href="#Several%20files">Several files</a>
<br>

<h3>14.7.1 The <code>append</code> Function</h3>

<p>The <code>append</code> function attaches one list to another.  Thus,

<pre>(append '(1 2 3 4) '(5 6 7 8))
</pre>

<p>produces the list

<pre>(1 2 3 4 5 6 7 8)
</pre>

<p>This is exactly how we want to attach two lengths' lists produced by
<code>lengths-list-file</code> to each other.  The results contrast with
<code>cons</code>,

<pre>(cons '(1 2 3 4) '(5 6 7 8))
</pre>

<p>which constructs a new list in which the first argument to <code>cons</code>
becomes the first element of the new list:

<pre>((1 2 3 4) 5 6 7 8)
</pre>

<p><hr>
Node:<a name="Several%20files%20recursively">Several files recursively</a>,
Next:<a rel=next href="#Prepare%20the%20data">Prepare the data</a>,
Previous:<a rel=previous href="#Several%20files">Several files</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.8 Recursively Count Words in Different Files</h2>

<p>Besides a <code>while</code> loop, you can work on each of a list of files
with recursion.  A recursive version of <code>lengths-list-many-files</code>
is short and simple.

<p>The recursive function has the usual parts: the `do-again-test', the
`next-step-expression', and the recursive call.  The `do-again-test'
determines whether the function should call itself again, which it
will do if the <code>list-of-files</code> contains any remaining elements;
the `next-step-expression' resets the <code>list-of-files</code> to the
<small>CDR</small> of itself, so eventually the list will be empty; and the
recursive call calls itself on the shorter list.  The complete
function is shorter than this description!

<pre>(defun recursive-lengths-list-many-files (list-of-files)
  "Return list of lengths of each defun in LIST-OF-FILES."
  (if list-of-files                     ; do-again-test
      (append
       (lengths-list-file
        (expand-file-name (car list-of-files)))
       (recursive-lengths-list-many-files
        (cdr list-of-files)))))
</pre>

<p>In a sentence, the function returns the lengths' list for the first of
the <code>list-of-files</code> appended to the result of calling itself on
the rest of the <code>list-of-files</code>.

<p>Here is a test of <code>recursive-lengths-list-many-files</code>, along with
the results of running <code>lengths-list-file</code> on each of the files
individually.

<p>Install <code>recursive-lengths-list-many-files</code> and
<code>lengths-list-file</code>, if necessary, and then evaluate the
following expressions.  You may need to change the files' pathnames;
those here work when this Info file and the Emacs sources are located
in their customary places.  To change the expressions, copy them to
the <code>*scratch*</code> buffer, edit them, and then evaluate them.

<p>The results are shown after the <code>=&gt;</code>.  (These results are
for files from Emacs Version 21.0.100; files from other versions of
Emacs may produce different results.)

<pre>(cd "/usr/local/share/emacs/21.0.100/")

(lengths-list-file "./lisp/macros.el")
     =&gt; (273 263 456 90)

(lengths-list-file "./lisp/mail/mailalias.el")
     =&gt; (38 32 26 77 174 180 321 198 324)

(lengths-list-file "./lisp/makesum.el")
     =&gt; (85 181)

(recursive-lengths-list-many-files
 '("./lisp/macros.el"
   "./lisp/mail/mailalias.el"
   "./lisp/makesum.el"))
       =&gt; (273 263 456 90 38 32 26 77 174 180 321 198 324 85 181)
</pre>

<p>The <code>recursive-lengths-list-many-files</code> function produces the
output we want.

<p>The next step is to prepare the data in the list for display in a graph.

<p><hr>
Node:<a name="Prepare%20the%20data">Prepare the data</a>,
Previous:<a rel=previous href="#Several%20files%20recursively">Several files recursively</a>,
Up:<a rel=up href="#Words%20in%20a%20defun">Words in a defun</a>
<br>

<h2>14.9 Prepare the Data for Display in a Graph</h2>

<p>The <code>recursive-lengths-list-many-files</code> function returns a list
of numbers.  Each number records the length of a function definition. 
What we need to do now is transform this data into a list of numbers
suitable for generating a graph.  The new list will tell how many
functions definitions contain less than 10 words and
symbols, how many contain between 10 and 19 words and symbols, how
many contain between 20 and 29 words and symbols, and so on.

<p>In brief, we need to go through the lengths' list produced by the
<code>recursive-lengths-list-many-files</code> function and count the number
of defuns within each range of lengths, and produce a list of those
numbers.

<p>Based on what we have done before, we can readily foresee that it
should not be too hard to write a function that `<small>CDR</small>s' down the
lengths' list, looks at each element, determines which length range it
is in, and increments a counter for that range.

<p>However, before beginning to write such a function, we should consider
the advantages of sorting the lengths' list first, so the numbers are
ordered from smallest to largest.  First, sorting will make it easier
to count the numbers in each range, since two adjacent numbers will
either be in the same length range or in adjacent ranges.  Second, by
inspecting a sorted list, we can discover the highest and lowest
number, and thereby determine the largest and smallest length range
that we will need.

<ul>
<li><a href="#Sorting">Sorting</a>:                      Sorting lists. 
<li><a href="#Files%20List">Files List</a>:                   Making a list of files. 
<li><a href="#Counting%20function%20definitions">Counting function definitions</a>: 
</ul>

<p><hr>
Node:<a name="Sorting">Sorting</a>,
Next:<a rel=next href="#Files%20List">Files List</a>,
Previous:<a rel=previous href="#Prepare%20the%20data">Prepare the data</a>,
Up:<a rel=up href="#Prepare%20the%20data">Prepare the data</a>
<br>

<h3>14.9.1 Sorting Lists</h3>

<p>Emacs contains a function to sort lists, called (as you might guess)
<code>sort</code>.  The <code>sort</code> function takes two arguments, the list
to be sorted, and a predicate that determines whether the first of
two list elements is "less" than the second.

<p>As we saw earlier (see <a href="#Wrong%20Type%20of%20Argument">Using the Wrong Type Object as an Argument</a>), a predicate is a function that
determines whether some property is true or false.  The <code>sort</code>
function will reorder a list according to whatever property the
predicate uses; this means that <code>sort</code> can be used to sort
non-numeric lists by non-numeric criteria--it can, for example,
alphabetize a list.

<p>The <code>&lt;</code> function is used when sorting a numeric list.  For example,

<pre>(sort '(4 8 21 17 33 7 21 7) '&lt;)
</pre>

<p>produces this:

<pre>(4 7 7 8 17 21 21 33)
</pre>

<p>(Note that in this example, both the arguments are quoted so that the
symbols are not evaluated before being passed to <code>sort</code> as
arguments.)

<p>Sorting the list returned by the
<code>recursive-lengths-list-many-files</code> function is straightforward;
it uses the <code>&lt;</code> function:

<pre>(sort
 (recursive-lengths-list-many-files
  '("../lisp/macros.el"
    "../lisp/mailalias.el"
    "../lisp/makesum.el"))
 '&lt;
</pre>

<p>which produces:

<pre>(85 86 116 122 154 176 179 265)
</pre>

<p>(Note that in this example, the first argument to <code>sort</code> is not
quoted, since the expression must be evaluated so as to produce the
list that is passed to <code>sort</code>.)

<p><hr>
Node:<a name="Files%20List">Files List</a>,
Next:<a rel=next href="#Counting%20function%20definitions">Counting function definitions</a>,
Previous:<a rel=previous href="#Sorting">Sorting</a>,
Up:<a rel=up href="#Prepare%20the%20data">Prepare the data</a>
<br>

<h3>14.9.2 Making a List of Files</h3>

<p>The <code>recursive-lengths-list-many-files</code> function requires a list
of files as its argument.  For our test examples, we constructed such
a list by hand; but the Emacs Lisp source directory is too large for
us to do for that.  Instead, we will write a function to do the job
for us.  In this function, we will use both a <code>while</code> loop and a
recursive call.

<p>We did not have to write a function like this for older versions of
GNU Emacs, since they placed all the <code>.el</code> files in one
directory.  Instead, we were able to use the <code>directory-files</code>
function, which lists the names of files that match a specified
pattern within a single directory.

<p>However, recent versions of Emacs place Emacs Lisp files in
sub-directories of the top level <code>lisp</code> directory.  This
re-arrangement eases navigation.  For example, all the mail related
files are in a <code>lisp</code> sub-directory called <code>mail</code>.  But at
the same time, this arrangement forces us to create a file listing
function that descends into the sub-directories.

<p>We can create this function, called <code>files-in-below-directory</code>,
using familiar functions such as <code>car</code>, <code>nthcdr</code>, and
<code>substring</code> in conjunction with an existing function called
<code>directory-files-and-attributes</code>.  This latter function not only
lists all the filenames in a directory, including the names
of sub-directories, but also their attributes.

<p>To restate our goal: to create a function that will enable us
to feed filenames to <code>recursive-lengths-list-many-files</code>
as a list that looks like this (but with more elements):

<pre>("../lisp/macros.el"
 "../lisp/mail/rmail.el"
 "../lisp/makesum.el")
</pre>

<p>The <code>directory-files-and-attributes</code> function returns a list of
lists.  Each of the lists within the main list consists of 13
elements.  The first element is a string that contains the name of the
file - which, in GNU/Linux, may be a `directory file', that is to
say, a file with the special attributes of a directory.  The second
element of the list is <code>t</code> for a directory, a string
for symbolic link (the string is the name linked to), or <code>nil</code>.

<p>For example, the first <code>.el</code> file in the <code>lisp/</code> directory
is <code>abbrev.el</code>.  Its name is
<code>/usr/local/share/emacs/21.0.100/lisp/abbrev.el</code> and it is not a
directory or a symbolic link.

<p>This is how <code>directory-files-and-attributes</code> lists that file and
its attributes:

<pre>("/usr/local/share/emacs/21.0.100/lisp/abbrev.el"
nil
1
1000
100
(15019 32380)
(14883 48041)
(15214 49336)
11583
"-rw-rw-r--"
t
341385
776)
</pre>

<p>On the other hand, <code>mail/</code> is a directory within the <code>lisp/</code>
directory.  The beginning of its listing looks like this:

<pre>("/usr/local/share/emacs/21.0.100/lisp/mail"
t
<small>...</small>
)
</pre>

<p>(Look at the documentation of <code>file-attributes</code> to learn about
the different attributes.  Bear in mind that the
<code>file-attributes</code> function does not list the filename, so its
first element is <code>directory-files-and-attributes</code>'s second
element.)

<p>We will want our new function, <code>files-in-below-directory</code>, to
list the <code>.el</code> files in the directory it is told to check, and in
any directories below that directory.

<p>This gives us a hint on how to construct
<code>files-in-below-directory</code>:  within a directory, the function
should add <code>.el</code> filenames to a list; and if, within a directory,
the function comes upon a sub-directory, it should go into that
sub-directory and repeat its actions.

<p>However, we should note that every directory contains a name that
refers to itself, called <code>.</code>, ("dot") and a name that refers to
its parent directory, called <code>..</code> ("double dot").  (In
<code>/</code>, the root directory, <code>..</code> refers to itself, since
<code>/</code> has no parent.)  Clearly, we do not want our
<code>files-in-below-directory</code> function to enter those directories,
since they always lead us, directly or indirectly, to the current
directory.

<p>Consequently, our <code>files-in-below-directory</code> function must do
several tasks:

<ul>
<li>Check to see whether it is looking at a filename that ends in
<code>.el</code>; and if so, add its name to a list.

<li>Check to see whether it is looking at a filename that is the name of a
directory; and if so,

<ul>
<li>Check to see whether it is looking at <code>.</code>  or <code>..</code>; and if
so skip it.

<li>Or else, go into that directory and repeat the process. 
</ul>
</ul>

<p>Let's write a function definition to do these tasks.  We will use a
<code>while</code> loop to move from one filename to another within a
directory, checking what needs to be done; and we will use a recursive
call to repeat the actions on each sub-directory.  The recursive
pattern is `accumulate'
(see <a href="#Accumulate">Recursive Pattern: <em>accumulate</em></a>),
using <code>append</code> as the combiner.

<p>Here is the function:

<pre>(defun files-in-below-directory (directory)
  "List the .el files in DIRECTORY and in its sub-directories."
  ;; Although the function will be used non-interactively,
  ;; it will be easier to test if we make it interactive.
  ;; The directory will have a name such as
  ;;  "/usr/local/share/emacs/21.0.100/lisp/"
  (interactive "DDirectory name: ")
  (let (el-files-list
        (current-directory-list
         (directory-files-and-attributes directory t)))
    ;; while we are in the current directory
    (while current-directory-list
      (cond
       ;; check to see whether filename ends in `.el'
       ;; and if so, append its name to a list.
       ((equal ".el" (substring (car (car current-directory-list)) -3))
        (setq el-files-list
              (cons (car (car current-directory-list)) el-files-list)))
       ;; check whether filename is that of a directory
       ((eq t (car (cdr (car current-directory-list))))
        ;; decide whether to skip or recurse
        (if
            (equal (or "." "..")
                   (substring (car (car current-directory-list)) -1))
            ;; then do nothing if filename is that of
            ;;   current directory or parent
            ()
          ;; else descend into the directory and repeat the process
          (setq el-files-list
                (append
                 (files-in-below-directory
                  (car (car current-directory-list)))
                 el-files-list)))))
      ;; move to the next filename in the list; this also
      ;; shortens the list so the while loop eventually comes to an end
      (setq current-directory-list (cdr current-directory-list)))
    ;; return the filenames
    el-files-list))
</pre>

<p>The <code>files-in-below-directory</code> <code>directory-files</code> function
takes one argument, the name of a directory.

<p>Thus, on my system,

<pre>(length
 (files-in-below-directory "/usr/local/share/emacs/21.0.100/lisp/"))
</pre>

<p>tells me that my version 21.0.100 Lisp sources directory contains 754
<code>.el</code> files.

<p><code>files-in-below-directory</code> returns a list in reverse alphabetical
order.  An expression to sort the list in alphabetical order looks
like this:

<pre>(sort
 (files-in-below-directory "/usr/local/share/emacs/21.0.100/lisp/")
 'string-lessp)
</pre>

<p><hr>
Node:<a name="Counting%20function%20definitions">Counting function definitions</a>,
Previous:<a rel=previous href="#Files%20List">Files List</a>,
Up:<a rel=up href="#Prepare%20the%20data">Prepare the data</a>
<br>

<h3>14.9.3 Counting function definitions</h3>

<p>Our immediate goal is to generate a list that tells us how many
function definitions contain fewer than 10 words and symbols, how many
contain between 10 and 19 words and symbols, how many contain between
20 and 29 words and symbols, and so on.

<p>With a sorted list of numbers, this is easy: count how many elements
of the list are smaller than 10, then, after moving past the numbers
just counted, count how many are smaller than 20, then, after moving
past the numbers just counted, count how many are smaller than 30, and
so on.  Each of the numbers, 10, 20, 30, 40, and the like, is one
larger than the top of that range.  We can call the list of such
numbers the <code>top-of-ranges</code> list.

<p>If we wished, we could generate this list automatically, but it is
simpler to write a list manually.  Here it is:

<pre>(defvar top-of-ranges
 '(10  20  30  40  50
   60  70  80  90 100
  110 120 130 140 150
  160 170 180 190 200
  210 220 230 240 250
  260 270 280 290 300)
 "List specifying ranges for `defuns-per-range'.")
</pre>

<p>To change the ranges, we edit this list.

<p>Next, we need to write the function that creates the list of the
number of definitions within each range.  Clearly, this function must
take the <code>sorted-lengths</code> and the <code>top-of-ranges</code> lists
as arguments.

<p>The <code>defuns-per-range</code> function must do two things again and
again: it must count the number of definitions within a range
specified by the current top-of-range value; and it must shift to the
next higher value in the <code>top-of-ranges</code> list after counting the
number of definitions in the current range.  Since each of these
actions is repetitive, we can use <code>while</code> loops for the job. 
One loop counts the number of definitions in the range defined by the
current top-of-range value, and the other loop selects each of the
top-of-range values in turn.

<p>Several entries of the <code>sorted-lengths</code> list are counted for each
range; this means that the loop for the <code>sorted-lengths</code> list
will be inside the loop for the <code>top-of-ranges</code> list, like a
small gear inside a big gear.

<p>The inner loop counts the number of definitions within the range.  It
is a simple counting loop of the type we have seen before. 
(See <a href="#Incrementing%20Loop">A loop with an incrementing counter</a>.) 
The true-or-false test of the loop tests whether the value from the
<code>sorted-lengths</code> list is smaller than the current value of the
top of the range.  If it is, the function increments the counter and
tests the next value from the <code>sorted-lengths</code> list.

<p>The inner loop looks like this:

<pre>(while <var>length-element-smaller-than-top-of-range</var>
  (setq number-within-range (1+ number-within-range))
  (setq sorted-lengths (cdr sorted-lengths)))
</pre>

<p>The outer loop must start with the lowest value of the
<code>top-of-ranges</code> list, and then be set to each of the succeeding
higher values in turn.  This can be done with a loop like this:

<pre>(while top-of-ranges
  <var>body-of-loop</var><small>...</small>
  (setq top-of-ranges (cdr top-of-ranges)))
</pre>

<p>Put together, the two loops look like this:

<pre>(while top-of-ranges

  ;; Count the number of elements within the current range.
  (while <var>length-element-smaller-than-top-of-range</var>
    (setq number-within-range (1+ number-within-range))
    (setq sorted-lengths (cdr sorted-lengths)))

  ;; Move to next range.
  (setq top-of-ranges (cdr top-of-ranges)))
</pre>

<p>In addition, in each circuit of the outer loop, Emacs should record
the number of definitions within that range (the value of
<code>number-within-range</code>) in a list.  We can use <code>cons</code> for
this purpose.  (See <a href="#cons"><code>cons</code></a>.)

<p>The <code>cons</code> function works fine, except that the list it
constructs will contain the number of definitions for the highest
range at its beginning and the number of definitions for the lowest
range at its end.  This is because <code>cons</code> attaches new elements
of the list to the beginning of the list, and since the two loops are
working their way through the lengths' list from the lower end first,
the <code>defuns-per-range-list</code> will end up largest number first. 
But we will want to print our graph with smallest values first and the
larger later.  The solution is to reverse the order of the
<code>defuns-per-range-list</code>.  We can do this using the
<code>nreverse</code> function, which reverses the order of a list.

<p>For example,

<pre>(nreverse '(1 2 3 4))
</pre>

<p>produces:

<pre>(4 3 2 1)
</pre>

<p>Note that the <code>nreverse</code> function is "destructive"--that is,
it changes the list to which it is applied; this contrasts with the
<code>car</code> and <code>cdr</code> functions, which are non-destructive.  In
this case, we do not want the original <code>defuns-per-range-list</code>,
so it does not matter that it is destroyed.  (The <code>reverse</code>
function provides a reversed copy of a list, leaving the original list
as is.)

<p>Put all together, the <code>defuns-per-range</code> looks like this:

<pre>(defun defuns-per-range (sorted-lengths top-of-ranges)
  "SORTED-LENGTHS defuns in each TOP-OF-RANGES range."
  (let ((top-of-range (car top-of-ranges))
        (number-within-range 0)
        defuns-per-range-list)

    ;; Outer loop.
    (while top-of-ranges

      ;; Inner loop.
      (while (and
              ;; Need number for numeric test.
              (car sorted-lengths)
              (&lt; (car sorted-lengths) top-of-range))

        ;; Count number of definitions within current range.
        (setq number-within-range (1+ number-within-range))
        (setq sorted-lengths (cdr sorted-lengths)))

      ;; Exit inner loop but remain within outer loop.

      (setq defuns-per-range-list
            (cons number-within-range defuns-per-range-list))
      (setq number-within-range 0)      ; Reset count to zero.

      ;; Move to next range.
      (setq top-of-ranges (cdr top-of-ranges))
      ;; Specify next top of range value.
      (setq top-of-range (car top-of-ranges)))

    ;; Exit outer loop and count the number of defuns larger than
    ;;   the largest top-of-range value.
    (setq defuns-per-range-list
          (cons
           (length sorted-lengths)
           defuns-per-range-list))

    ;; Return a list of the number of definitions within each range,
    ;;   smallest to largest.
    (nreverse defuns-per-range-list)))
</pre>

<p>The function is straightforward except for one subtle feature.  The
true-or-false test of the inner loop looks like this:

<pre>(and (car sorted-lengths)
     (&lt; (car sorted-lengths) top-of-range))
</pre>

<p>instead of like this:

<pre>(&lt; (car sorted-lengths) top-of-range)
</pre>

<p>The purpose of the test is to determine whether the first item in the
<code>sorted-lengths</code> list is less than the value of the top of the
range.

<p>The simple version of the test works fine unless the
<code>sorted-lengths</code> list has a <code>nil</code> value.  In that case, the
<code>(car sorted-lengths)</code> expression function returns
<code>nil</code>.  The <code>&lt;</code> function cannot compare a number to
<code>nil</code>, which is an empty list, so Emacs signals an error and
stops the function from attempting to continue to execute.

<p>The <code>sorted-lengths</code> list always becomes <code>nil</code> when the
counter reaches the end of the list.  This means that any attempt to
use the <code>defuns-per-range</code> function with the simple version of
the test will fail.

<p>We solve the problem by using the <code>(car sorted-lengths)</code>
expression in conjunction with the <code>and</code> expression.  The
<code>(car sorted-lengths)</code> expression returns a non-<code>nil</code>
value so long as the list has at least one number within it, but
returns <code>nil</code> if the list is empty.  The <code>and</code> expression
first evaluates the <code>(car sorted-lengths)</code> expression, and
if it is <code>nil</code>, returns false <em>without</em> evaluating the
<code>&lt;</code> expression.  But if the <code>(car sorted-lengths)</code>
expression returns a non-<code>nil</code> value, the <code>and</code> expression
evaluates the <code>&lt;</code> expression, and returns that value as the value
of the <code>and</code> expression.

<p>This way, we avoid an error.

<p>Here is a short test of the <code>defuns-per-range</code> function.  First,
evaluate the expression that binds (a shortened)
<code>top-of-ranges</code> list to the list of values, then evaluate the
expression for binding the <code>sorted-lengths</code> list, and then
evaluate the <code>defuns-per-range</code> function.

<pre>;; (Shorter list than we will use later.)
(setq top-of-ranges
 '(110 120 130 140 150
   160 170 180 190 200))

(setq sorted-lengths
      '(85 86 110 116 122 129 154 176 179 200 265 300 300))

(defuns-per-range sorted-lengths top-of-ranges)
</pre>

<p>The list returned looks like this:

<pre>(2 2 2 0 0 1 0 2 0 0 4)
</pre>

<p>Indeed, there are two elements of the <code>sorted-lengths</code> list
smaller than 110, two elements between 110 and 119, two elements
between 120 and 129, and so on.  There are four elements with a value
of 200 or larger.

<p><hr>
Node:<a name="Readying%20a%20Graph">Readying a Graph</a>,
Next:<a rel=next href="#Emacs%20Initialization">Emacs Initialization</a>,
Previous:<a rel=previous href="#Words%20in%20a%20defun">Words in a defun</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>15 Readying a Graph</h1>

<p>Our goal is to construct a graph showing the numbers of function
definitions of various lengths in the Emacs lisp sources.

<p>As a practical matter, if you were creating a graph, you would
probably use a program such as <code>gnuplot</code> to do the job. 
(<code>gnuplot</code> is nicely integrated into GNU Emacs.)  In this case,
however, we create one from scratch, and in the process we will
re-acquaint ourselves with some of what we learned before and learn
more.

<p>In this chapter, we will first write a simple graph printing function. 
This first definition will be a <dfn>prototype</dfn>, a rapidly written
function that enables us to reconnoiter this unknown graph-making
territory.  We will discover dragons, or find that they are myth. 
After scouting the terrain, we will feel more confident and enhance
the function to label the axes automatically.

<ul>
<li><a href="#Columns%20of%20a%20graph">Columns of a graph</a>: 
<li><a href="#graph-body-print">graph-body-print</a>:             How to print the body of a graph. 
<li><a href="#recursive-graph-body-print">recursive-graph-body-print</a>: 
<li><a href="#Printed%20Axes">Printed Axes</a>: 
<li><a href="#Line%20Graph%20Exercise">Line Graph Exercise</a>: 
</ul>

<p><hr>
Node:<a name="Columns%20of%20a%20graph">Columns of a graph</a>,
Next:<a rel=next href="#graph-body-print">graph-body-print</a>,
Previous:<a rel=previous href="#Readying%20a%20Graph">Readying a Graph</a>,
Up:<a rel=up href="#Readying%20a%20Graph">Readying a Graph</a>
<br>

<h2>Printing the Columns of a Graph</h2>

<p>Since Emacs is designed to be flexible and work with all kinds of
terminals, including character-only terminals, the graph will need to
be made from one of the `typewriter' symbols.  An asterisk will do; as
we enhance the graph-printing function, we can make the choice of
symbol a user option.

<p>We can call this function <code>graph-body-print</code>; it will take a
<code>numbers-list</code> as its only argument.  At this stage, we will not
label the graph, but only print its body.

<p>The <code>graph-body-print</code> function inserts a vertical column of
asterisks for each element in the <code>numbers-list</code>.  The height of
each line is determined by the value of that element of the
<code>numbers-list</code>.

<p>Inserting columns is a repetitive act; that means that this function can
be written either with a <code>while</code> loop or recursively.

<p>Our first challenge is to discover how to print a column of asterisks. 
Usually, in Emacs, we print characters onto a screen horizontally,
line by line, by typing.  We have two routes we can follow: write our
own column-insertion function or discover whether one exists in Emacs.

<p>To see whether there is one in Emacs, we can use the <kbd>M-x apropos</kbd>
command.  This command is like the <kbd>C-h a</kbd> (command-apropos)
command, except that the latter finds only those functions that are
commands.  The <kbd>M-x apropos</kbd> command lists all symbols that match
a regular expression, including functions that are not interactive.

<p>What we want to look for is some command that prints or inserts
columns.  Very likely, the name of the function will contain either
the word `print' or the word `insert' or the word `column'. 
Therefore, we can simply type <kbd>M-x apropos RET
print\|insert\|column RET</kbd> and look at the result.  On my system, this
command takes quite some time, and then produces a list of 79
functions and variables.  Scanning down the list, the only function
that looks as if it might do the job is <code>insert-rectangle</code>.

<p>Indeed, this is the function we want; its documentation says:

<pre>insert-rectangle:
Insert text of RECTANGLE with upper left corner at point.
RECTANGLE's first line is inserted at point,
its second line is inserted at a point vertically under point, etc.
RECTANGLE should be a list of strings.
</pre>

<p>We can run a quick test, to make sure it does what we expect of it.

<p>Here is the result of placing the cursor after the
<code>insert-rectangle</code> expression and typing <kbd>C-u C-x C-e</kbd>
(<code>eval-last-sexp</code>).  The function inserts the strings
<code>"first"</code>, <code>"second"</code>, and <code>"third"</code> at and below
point.  Also the function returns <code>nil</code>.

<pre>(insert-rectangle '("first" "second" "third"))first
                                              second
                                              third
nil
</pre>

<p>Of course, we won't be inserting the text of the
<code>insert-rectangle</code> expression itself into the buffer in which we
are making the graph, but will call the function from our program.  We
shall, however, have to make sure that point is in the buffer at the
place where the <code>insert-rectangle</code> function will insert its
column of strings.

<p>If you are reading this in Info, you can see how this works by
switching to another buffer, such as the <code>*scratch*</code> buffer,
placing point somewhere in the buffer, typing <kbd>M-:</kbd>,
typing the <code>insert-rectangle</code> expression into the minibuffer at
the prompt, and then typing &lt;RET&gt;.  This causes Emacs to evaluate
the expression in the minibuffer, but to use as the value of point the
position of point in the <code>*scratch*</code> buffer.  (<kbd>M-:</kbd>
is the keybinding for <code>eval-expression</code>.)

<p>We find when we do this that point ends up at the end of the last
inserted line--that is to say, this function moves point as a
side-effect.  If we were to repeat the command, with point at this
position, the next insertion would be below and to the right of the
previous insertion.  We don't want this!  If we are going to make a
bar graph, the columns need to be beside each other.

<p>So we discover that each cycle of the column-inserting <code>while</code>
loop must reposition point to the place we want it, and that place
will be at the top, not the bottom, of the column.  Moreover, we
remember that when we print a graph, we do not expect all the columns
to be the same height.  This means that the top of each column may be
at a different height from the previous one.  We cannot simply
reposition point to the same line each time, but moved over to the
right--or perhaps we can<small>...</small>

<p>We are planning to make the columns of the bar graph out of asterisks. 
The number of asterisks in the column is the number specified by the
current element of the <code>numbers-list</code>.  We need to construct a
list of asterisks of the right length for each call to
<code>insert-rectangle</code>.  If this list consists solely of the requisite
number of asterisks, then we will have position point the right number
of lines above the base for the graph to print correctly.  This could
be difficult.

<p>Alternatively, if we can figure out some way to pass
<code>insert-rectangle</code> a list of the same length each time, then we
can place point on the same line each time, but move it over one
column to the right for each new column.  If we do this, however, some
of the entries in the list passed to <code>insert-rectangle</code> must be
blanks rather than asterisks.  For example, if the maximum height of
the graph is 5, but the height of the column is 3, then
<code>insert-rectangle</code> requires an argument that looks like this:

<pre>(" " " " "*" "*" "*")
</pre>

<p>This last proposal is not so difficult, so long as we can determine
the column height.  There are two ways for us to specify the column
height: we can arbitrarily state what it will be, which would work
fine for graphs of that height; or we can search through the list of
numbers and use the maximum height of the list as the maximum height
of the graph.  If the latter operation were difficult, then the former
procedure would be easiest, but there is a function built into Emacs
that determines the maximum of its arguments.  We can use that
function.  The function is called <code>max</code> and it returns the
largest of all its arguments, which must be numbers.  Thus, for
example,

<pre>(max  3 4 6 5 7 3)
</pre>

<p>returns 7.  (A corresponding function called <code>min</code> returns the
smallest of all its arguments.)

<p>However, we cannot simply call <code>max</code> on the <code>numbers-list</code>;
the <code>max</code> function expects numbers as its argument, not a list of
numbers.  Thus, the following expression,

<pre>(max  '(3 4 6 5 7 3))
</pre>

<p>produces the following error message;

<pre>Wrong type of argument:  number-or-marker-p, (3 4 6 5 7 3)
</pre>

<p>We need a function that passes a list of arguments to a function. 
This function is <code>apply</code>.  This function `applies' its first
argument (a function) to its remaining arguments, the last of which
may be a list.

<p>For example,

<pre>(apply 'max 3 4 7 3 '(4 8 5))
</pre>

<p>returns 8.

<p>(Incidentally, I don't know how you would learn of this function
without a book such as this.  It is possible to discover other
functions, like <code>search-forward</code> or <code>insert-rectangle</code>, by
guessing at a part of their names and then using <code>apropos</code>.  Even
though its base in metaphor is clear--`apply' its first argument to
the rest--I doubt a novice would come up with that particular word
when using <code>apropos</code> or other aid.  Of course, I could be wrong;
after all, the function was first named by someone who had to invent
it.)

<p>The second and subsequent arguments to <code>apply</code> are optional, so
we can use <code>apply</code> to call a function and pass the elements of a
list to it, like this, which also returns 8:

<pre>(apply 'max '(4 8 5))
</pre>

<p>This latter way is how we will use <code>apply</code>.  The
<code>recursive-lengths-list-many-files</code> function returns a numbers'
list to which we can apply <code>max</code> (we could also apply <code>max</code> to
the sorted numbers' list; it does not matter whether the list is
sorted or not.)

<p>Hence, the operation for finding the maximum height of the graph is this:

<pre>(setq max-graph-height (apply 'max numbers-list))
</pre>

<p>Now we can return to the question of how to create a list of strings
for a column of the graph.  Told the maximum height of the graph
and the number of asterisks that should appear in the column, the
function should return a list of strings for the
<code>insert-rectangle</code> command to insert.

<p>Each column is made up of asterisks or blanks.  Since the function is
passed the value of the height of the column and the number of
asterisks in the column, the number of blanks can be found by
subtracting the number of asterisks from the height of the column. 
Given the number of blanks and the number of asterisks, two
<code>while</code> loops can be used to construct the list:

<pre>;;; First version.
(defun column-of-graph (max-graph-height actual-height)
  "Return list of strings that is one column of a graph."
  (let ((insert-list nil)
        (number-of-top-blanks
         (- max-graph-height actual-height)))

    ;; Fill in asterisks.
    (while (&gt; actual-height 0)
      (setq insert-list (cons "*" insert-list))
      (setq actual-height (1- actual-height)))

    ;; Fill in blanks.
    (while (&gt; number-of-top-blanks 0)
      (setq insert-list (cons " " insert-list))
      (setq number-of-top-blanks
            (1- number-of-top-blanks)))

    ;; Return whole list.
    insert-list))
</pre>

<p>If you install this function and then evaluate the following
expression you will see that it returns the list as desired:

<pre>(column-of-graph 5 3)
</pre>

<p>returns

<pre>(" " " " "*" "*" "*")
</pre>

<p>As written, <code>column-of-graph</code> contains a major flaw: the symbols
used for the blank and for the marked entries in the column are
`hard-coded' as a space and asterisk.  This is fine for a prototype,
but you, or another user, may wish to use other symbols.  For example,
in testing the graph function, you many want to use a period in place
of the space, to make sure the point is being repositioned properly
each time the <code>insert-rectangle</code> function is called; or you might
want to substitute a <code>+</code> sign or other symbol for the asterisk. 
You might even want to make a graph-column that is more than one
display column wide.  The program should be more flexible.  The way to
do that is to replace the blank and the asterisk with two variables
that we can call <code>graph-blank</code> and <code>graph-symbol</code> and define
those variables separately.

<p>Also, the documentation is not well written.  These considerations
lead us to the second version of the function:

<pre>(defvar graph-symbol "*"
  "String used as symbol in graph, usually an asterisk.")

(defvar graph-blank " "
  "String used as blank in graph, usually a blank space.
graph-blank must be the same number of columns wide
as graph-symbol.")
</pre>

<p>(For an explanation of <code>defvar</code>, see
<a href="#defvar">Initializing a Variable with <code>defvar</code></a>.)

<pre>;;; Second version.
(defun column-of-graph (max-graph-height actual-height)
  "Return MAX-GRAPH-HEIGHT strings; ACTUAL-HEIGHT are graph-symbols.
The graph-symbols are contiguous entries at the end
of the list.
The list will be inserted as one column of a graph.
The strings are either graph-blank or graph-symbol."

  (let ((insert-list nil)
        (number-of-top-blanks
         (- max-graph-height actual-height)))

    ;; Fill in <code>graph-symbols</code>.
    (while (&gt; actual-height 0)
      (setq insert-list (cons graph-symbol insert-list))
      (setq actual-height (1- actual-height)))

    ;; Fill in <code>graph-blanks</code>.
    (while (&gt; number-of-top-blanks 0)
      (setq insert-list (cons graph-blank insert-list))
      (setq number-of-top-blanks
            (1- number-of-top-blanks)))

    ;; Return whole list.
    insert-list))
</pre>

<p>If we wished, we could rewrite <code>column-of-graph</code> a third time to
provide optionally for a line graph as well as for a bar graph.  This
would not be hard to do.  One way to think of a line graph is that it
is no more than a bar graph in which the part of each bar that is
below the top is blank.  To construct a column for a line graph, the
function first constructs a list of blanks that is one shorter than
the value, then it uses <code>cons</code> to attach a graph symbol to the
list; then it uses <code>cons</code> again to attach the `top blanks' to
the list.

<p>It is easy to see how to write such a function, but since we don't
need it, we will not do it.  But the job could be done, and if it were
done, it would be done with <code>column-of-graph</code>.  Even more
important, it is worth noting that few changes would have to be made
anywhere else.  The enhancement, if we ever wish to make it, is
simple.

<p>Now, finally, we come to our first actual graph printing function. 
This prints the body of a graph, not the labels for the vertical and
horizontal axes, so we can call this <code>graph-body-print</code>.

<p><hr>
Node:<a name="graph-body-print">graph-body-print</a>,
Next:<a rel=next href="#recursive-graph-body-print">recursive-graph-body-print</a>,
Previous:<a rel=previous href="#Columns%20of%20a%20graph">Columns of a graph</a>,
Up:<a rel=up href="#Readying%20a%20Graph">Readying a Graph</a>
<br>

<h2>15.1 The <code>graph-body-print</code> Function</h2>

<p>After our preparation in the preceding section, the
<code>graph-body-print</code> function is straightforward.  The function
will print column after column of asterisks and blanks, using the
elements of a numbers' list to specify the number of asterisks in each
column.  This is a repetitive act, which means we can use a
decrementing <code>while</code> loop or recursive function for the job.  In
this section, we will write the definition using a <code>while</code> loop.

<p>The <code>column-of-graph</code> function requires the height of the graph
as an argument, so we should determine and record that as a local variable.

<p>This leads us to the following template for the <code>while</code> loop
version of this function:

<pre>(defun graph-body-print (numbers-list)
  "<var>documentation</var><small>...</small>"
  (let ((height  <small>...</small>
         <small>...</small>))

    (while numbers-list
      <var>insert-columns-and-reposition-point</var>
      (setq numbers-list (cdr numbers-list)))))
</pre>

<p>We need to fill in the slots of the template.

<p>Clearly, we can use the <code>(apply 'max numbers-list)</code> expression to
determine the height of the graph.

<p>The <code>while</code> loop will cycle through the <code>numbers-list</code> one
element at a time.  As it is shortened by the <code>(setq numbers-list
(cdr numbers-list))</code> expression, the <small>CAR</small> of each instance of the
list is the value of the argument for <code>column-of-graph</code>.

<p>At each cycle of the <code>while</code> loop, the <code>insert-rectangle</code>
function inserts the list returned by <code>column-of-graph</code>.  Since
the <code>insert-rectangle</code> function moves point to the lower right of
the inserted rectangle, we need to save the location of point at the
time the rectangle is inserted, move back to that position after the
rectangle is inserted, and then move horizontally to the next place
from which <code>insert-rectangle</code> is called.

<p>If the inserted columns are one character wide, as they will be if
single blanks and asterisks are used, the repositioning command is
simply <code>(forward-char 1)</code>; however, the width of a column may be
greater than one.  This means that the repositioning command should be
written <code>(forward-char symbol-width)</code>.  The <code>symbol-width</code>
itself is the length of a <code>graph-blank</code> and can be found using
the expression <code>(length graph-blank)</code>.  The best place to bind
the <code>symbol-width</code> variable to the value of the width of graph
column is in the varlist of the <code>let</code> expression.

<p>These considerations lead to the following function definition:

<pre>(defun graph-body-print (numbers-list)
  "Print a bar graph of the NUMBERS-LIST.
The numbers-list consists of the Y-axis values."

  (let ((height (apply 'max numbers-list))
        (symbol-width (length graph-blank))
        from-position)

    (while numbers-list
      (setq from-position (point))
      (insert-rectangle
       (column-of-graph height (car numbers-list)))
      (goto-char from-position)
      (forward-char symbol-width)
      ;; Draw graph column by column.
      (sit-for 0)
      (setq numbers-list (cdr numbers-list)))
    ;; Place point for X axis labels.
    (forward-line height)
    (insert "\n")
))
</pre>

<p>The one unexpected expression in this function is the
<code>(sit-for&nbsp;0)</code> expression in the <code>while</code> loop.  This
expression makes the graph printing operation more interesting to
watch than it would be otherwise.  The expression causes Emacs to
`sit' or do nothing for a zero length of time and then redraw the
screen.  Placed here, it causes Emacs to redraw the screen column by
column.  Without it, Emacs would not redraw the screen until the
function exits.

<p>We can test <code>graph-body-print</code> with a short list of numbers.

<ol type=1 start=1>
</p><li>Install <code>graph-symbol</code>, <code>graph-blank</code>,
<code>column-of-graph</code>, which are in
and <code>graph-body-print</code>.

<li>Copy the following expression:

<pre>(graph-body-print '(1 2 3 4 6 4 3 5 7 6 5 2 3))
</pre>

<li>Switch to the <code>*scratch*</code> buffer and place the cursor where you
want the graph to start.

<li>Type <kbd>M-:</kbd> (<code>eval-expression</code>).

<li>Yank the <code>graph-body-print</code> expression into the minibuffer
with <kbd>C-y</kbd> (<code>yank)</code>.

<li>Press &lt;RET&gt; to evaluate the <code>graph-body-print</code> expression.
</ol>

<p>Emacs will print a graph like this:

<pre>                    *
                *   **
                *  ****
               *** ****
              ********* *
             ************
            *************
</pre>

<p><hr>
Node:<a name="recursive-graph-body-print">recursive-graph-body-print</a>,
Next:<a rel=next href="#Printed%20Axes">Printed Axes</a>,
Previous:<a rel=previous href="#graph-body-print">graph-body-print</a>,
Up:<a rel=up href="#Readying%20a%20Graph">Readying a Graph</a>
<br>

<h2>15.2 The <code>recursive-graph-body-print</code> Function</h2>

<p>The <code>graph-body-print</code> function may also be written recursively. 
The recursive solution is divided into two parts: an outside `wrapper'
that uses a <code>let</code> expression to determine the values of several
variables that need only be found once, such as the maximum height of
the graph, and an inside function that is called recursively to print
the graph.

<p>The `wrapper' is uncomplicated:

<pre>(defun recursive-graph-body-print (numbers-list)
  "Print a bar graph of the NUMBERS-LIST.
The numbers-list consists of the Y-axis values."
  (let ((height (apply 'max numbers-list))
        (symbol-width (length graph-blank))
        from-position)
    (recursive-graph-body-print-internal
     numbers-list
     height
     symbol-width)))
</pre>

<p>The recursive function is a little more difficult.  It has four parts:
the `do-again-test', the printing code, the recursive call, and the
`next-step-expression'.  The `do-again-test' is an <code>if</code>
expression that determines whether the <code>numbers-list</code> contains
any remaining elements; if it does, the function prints one column of
the graph using the printing code and calls itself again.  The
function calls itself again according to the value produced by the
`next-step-expression' which causes the call to act on a shorter
version of the <code>numbers-list</code>.

<pre>(defun recursive-graph-body-print-internal
  (numbers-list height symbol-width)
  "Print a bar graph.
Used within recursive-graph-body-print function."

  (if numbers-list
      (progn
        (setq from-position (point))
        (insert-rectangle
         (column-of-graph height (car numbers-list)))
        (goto-char from-position)
        (forward-char symbol-width)
        (sit-for 0)     ; Draw graph column by column.
        (recursive-graph-body-print-internal
         (cdr numbers-list) height symbol-width))))
</pre>

<p>After installation, this expression can be tested; here is a sample:

<pre>(recursive-graph-body-print '(3 2 5 6 7 5 3 4 6 4 3 2 1))
</pre>

<p>Here is what <code>recursive-graph-body-print</code> produces:

<pre>                *
               **   *
              ****  *
              **** ***
            * *********
            ************
            *************
</pre>

<p>Either of these two functions, <code>graph-body-print</code> or
<code>recursive-graph-body-print</code>, create the body of a graph.

<p><hr>
Node:<a name="Printed%20Axes">Printed Axes</a>,
Next:<a rel=next href="#Line%20Graph%20Exercise">Line Graph Exercise</a>,
Previous:<a rel=previous href="#recursive-graph-body-print">recursive-graph-body-print</a>,
Up:<a rel=up href="#Readying%20a%20Graph">Readying a Graph</a>
<br>

<h2>15.3 Need for Printed Axes</h2>

<p>A graph needs printed axes, so you can orient yourself.  For a do-once
project, it may be reasonable to draw the axes by hand using Emacs'
Picture mode; but a graph drawing function may be used more than once.

<p>For this reason, I have written enhancements to the basic
<code>print-graph-body</code> function that automatically print labels for
the horizontal and vertical axes.  Since the label printing functions
do not contain much new material, I have placed their description in
an appendix.  See <a href="#Full%20Graph">A Graph with Labelled Axes</a>.

<p><hr>
Node:<a name="Line%20Graph%20Exercise">Line Graph Exercise</a>,
Previous:<a rel=previous href="#Printed%20Axes">Printed Axes</a>,
Up:<a rel=up href="#Readying%20a%20Graph">Readying a Graph</a>
<br>

<h2>15.4 Exercise</h2>

<p>Write a line graph version of the graph printing functions.

<p><hr>
Node:<a name="Emacs%20Initialization">Emacs Initialization</a>,
Next:<a rel=next href="#Debugging">Debugging</a>,
Previous:<a rel=previous href="#Readying%20a%20Graph">Readying a Graph</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>16 Your <code>.emacs</code> File</h1>

<p>"You don't have to like Emacs to like it" - this seemingly
paradoxical statement is the secret of GNU Emacs.  The plain, `out of
the box' Emacs is a generic tool.  Most people who use it, customize
it to suit themselves.

<p>GNU Emacs is mostly written in Emacs Lisp; this means that by writing
expressions in Emacs Lisp you can change or extend Emacs.

<ul>
<li><a href="#Default%20Configuration">Default Configuration</a>: 
<li><a href="#Site-wide%20Init">Site-wide Init</a>:               You can write site-wide init files. 
<li><a href="#defcustom">defcustom</a>:                    Emacs will write code for you. 
<li><a href="#Beginning%20a%20.emacs%20File">Beginning a .emacs File</a>:      How to write a <code>.emacs file</code>. 
<li><a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>:           Automatically wrap lines. 
<li><a href="#Mail%20Aliases">Mail Aliases</a>:                 Use abbreviations for email addresses. 
<li><a href="#Indent%20Tabs%20Mode">Indent Tabs Mode</a>:             Don't use tabs with TeX
<li><a href="#Keybindings">Keybindings</a>:                  Create some personal keybindings. 
<li><a href="#Keymaps">Keymaps</a>:                      More about key binding. 
<li><a href="#Loading%20Files">Loading Files</a>:                Load (i.e., evaluate) files automatically. 
<li><a href="#Autoload">Autoload</a>:                     Make functions available. 
<li><a href="#Simple%20Extension">Simple Extension</a>:             Define a function; bind it to a key. 
<li><a href="#X11%20Colors">X11 Colors</a>:                   Colors in version 19 in X. 
<li><a href="#Miscellaneous">Miscellaneous</a>: 
<li><a href="#Mode%20Line">Mode Line</a>:                    How to customize your mode line. 
</ul>

<p><hr>
Node:<a name="Default%20Configuration">Default Configuration</a>,
Next:<a rel=next href="#Site-wide%20Init">Site-wide Init</a>,
Previous:<a rel=previous href="#Emacs%20Initialization">Emacs Initialization</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>Emacs' Default Configuration</h2>

<p>There are those who appreciate Emacs' default configuration.  After
all, Emacs starts you in C mode when you edit a C file, starts you in
Fortran mode when you edit a Fortran file, and starts you in
Fundamental mode when you edit an unadorned file.  This all makes
sense, if you do not know who is going to use Emacs.  Who knows what a
person hopes to do with an unadorned file?  Fundamental mode is the
right default for such a file, just as C mode is the right default for
editing C code.  But when you do know who is going to use Emacs--you,
yourself--then it makes sense to customize Emacs.

<p>For example, I seldom want Fundamental mode when I edit an
otherwise undistinguished file; I want Text mode.  This is why I
customize Emacs: so it suits me.

<p>You can customize and extend Emacs by writing or adapting a
<code>~/.emacs</code> file.  This is your personal initialization file; its
contents, written in Emacs Lisp, tell Emacs what to do.<a rel=footnote href="#fn-11"><sup>11</sup></a>

<p>A <code>~/.emacs</code> file contains Emacs Lisp code.  You can write this
code yourself; or you can use Emacs' <code>customize</code> feature to write
the code for you.  You can combine your own expressions and
auto-written Customize expressions in your <code>.emacs</code> file.

<p>(I myself prefer to write my own expressions, except for those,
particularly fonts, that I find easier to manipulate using the
<code>customize</code> command.  I combine the two methods.)

<p>Most of this chapter is about writing expressions yourself.  It
describes a simple <code>.emacs</code> file; for more information, see
<a href="emacs.html#The%20Init%20File">Init File</a>, and
<a href="elisp.html#The%20Init%20File">Init File</a>.

<p><hr>
Node:<a name="Site-wide%20Init">Site-wide Init</a>,
Next:<a rel=next href="#defcustom">defcustom</a>,
Previous:<a rel=previous href="#Default%20Configuration">Default Configuration</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.1 Site-wide Initialization Files</h2>

<p>In addition to your personal initialization file, Emacs automatically
loads various site-wide initialization files, if they exist.  These
have the same form as your <code>.emacs</code> file, but are loaded by
everyone.

<p>Two site-wide initialization files, <code>site-load.el</code> and
<code>site-init.el</code>, are loaded into Emacs and then `dumped' if a
`dumped' version of Emacs is created, as is most common.  (Dumped
copies of Emacs load more quickly.  However, once a file is loaded and
dumped, a change to it does not lead to a change in Emacs unless you
load it yourself or re-dump Emacs.  See <a href="elisp.html#Building%20Emacs">Building Emacs</a>, and the
<code>INSTALL</code> file.)

<p>Three other site-wide initialization files are loaded automatically
each time you start Emacs, if they exist.  These are
<code>site-start.el</code>, which is loaded <em>before</em> your <code>.emacs</code>
file, and <code>default.el</code>, and the terminal type file, which are both
loaded <em>after</em> your <code>.emacs</code> file.

<p>Settings and definitions in your <code>.emacs</code> file will overwrite
conflicting settings and definitions in a <code>site-start.el</code> file,
if it exists; but the settings and definitions in a <code>default.el</code>
or terminal type file will overwrite those in your <code>.emacs</code> file. 
(You can prevent interference from a terminal type file by setting
<code>term-file-prefix</code> to <code>nil</code>.  See <a href="#Simple%20Extension">A Simple Extension</a>.)

<p>The <code>INSTALL</code> file that comes in the distribution contains
descriptions of the <code>site-init.el</code> and <code>site-load.el</code> files.

<p>The <code>loadup.el</code>, <code>startup.el</code>, and <code>loaddefs.el</code> files
control loading.  These files are in the <code>lisp</code> directory of the
Emacs distribution and are worth perusing.

<p>The <code>loaddefs.el</code> file contains a good many suggestions as to
what to put into your own <code>.emacs</code> file, or into a site-wide
initialization file.

<p><hr>
Node:<a name="defcustom">defcustom</a>,
Next:<a rel=next href="#Beginning%20a%20.emacs%20File">Beginning a .emacs File</a>,
Previous:<a rel=previous href="#Site-wide%20Init">Site-wide Init</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.2 Specifying Variables using <code>defcustom</code></h2>

<p>You can specify variables using <code>defcustom</code> so that you and
others can then can use Emacs' <code>customize</code> feature to set their
values.  (You cannot use <code>customize</code> to write function
definitions; but you can write <code>defuns</code> in your <code>.emacs</code>
file.  Indeed, you can write any Lisp expression in your <code>.emacs</code>
file.)

<p>The <code>customize</code> feature depends on the <code>defcustom</code> special
form.  Although you can use <code>defvar</code> or <code>setq</code> for variables
that users set, the <code>defcustom</code> special form is designed for the
job.

<p>You can use your knowledge of <code>defvar</code> for writing the
first three arguments for <code>defcustom</code>.  The first argument to
<code>defcustom</code> is the name of the variable.  The second argument is
the variable's initial value, if any; and this value is set only if
the value has not already been set.  The third argument is the
documentation.

<p>The fourth and subsequent arguments to <code>defcustom</code> specify types
and options; these are not featured in <code>defvar</code>.  (These
arguments are optional.)

<p>Each of these arguments consists of a keyword followed by a value. 
Each keyword starts with the character <code>:</code>.

<p>For example, the customizable user option variable
<code>text-mode-hook</code> looks like this:

<pre>(defcustom text-mode-hook nil
  "Normal hook run when entering Text mode and many related modes."
  :type 'hook
  :options '(turn-on-auto-fill flyspell-mode)
  :group 'data)
</pre>

<p>The name of the variable is <code>text-mode-hook</code>; it has no default
value; and its documentation string tells you what it does.

<p>The <code>:type</code> keyword tells Emacs what kind of data
<code>text-mode-hook</code> should be set to and how to display the value in
a Customization buffer.

<p>The <code>:options</code> keyword specifies a suggested list of values for
the variable.  Currently, you can use <code>:options</code> only for a hook. 
The list is only a suggestion; it is not exclusive; a person who sets
the variable may set it to other values; the list shown following the
<code>:options</code> keyword is intended to offer convenient choices to a
user.

<p>Finally, the <code>:group</code> keyword tells the Emacs Customization
command in which group the variable is located.  This tells where to
find it.

<p>For more information, see <a href="elisp.html#Writing%20Customization%20Definitions">Customization</a>.

<p>Consider <code>text-mode-hook</code> as an example.

<p>There are two ways to customize this variable.  You can use the
customization command or write the appropriate expressions yourself.

<p>Using the customization command,  you can type:

<pre>M-x customize
</pre>

<p>and find that the group for editing files of data is called `data'. 
Enter that group.  Text Mode Hook is the first member.  You can click
on its various options to set the values.  After you click on the
button to

<pre>Save for Future Sessions
</pre>

<p>Emacs will write an expression into your <code>.emacs</code> file. 
It will look like this:

<pre>(custom-set-variables
  ;; custom-set-variables was added by Custom --
  ;;                           don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify))))
</pre>

<p>(The <code>text-mode-hook-identify</code> function tells
<code>toggle-text-mode-auto-fill</code> which buffers are in Text mode.)

<p>In spite of the warning, you certainly may edit, cut, and paste the
expression!  I do all time.  The purpose of the warning is to scare
those who do not know what they are doing, so they do not
inadvertently generate an error.

<p>The <code>custom-set-variables</code> works somewhat differently than a
<code>setq</code>.  While I have never learned the differences, I do modify
the <code>custom-set-variables</code> expressions in my <code>.emacs</code> file
by hand:  I make the changes in what appears to me to be a reasonable
manner and have not had any problems.  Others prefer to use the
Customization command and let Emacs do the work for them.

<p>Another <code>custom-set-<small>...</small></code> function is <code>custom-set-faces</code>. 
This function sets the various font faces.  Over time, I have set a
considerable number of faces.  Some of the time, I re-set them using
<code>customize</code>; other times, I simply edit the
<code>custom-set-faces</code> expression in my <code>.emacs</code> file itself.

<p>The second way to customize your <code>text-mode-hook</code> is to set it
yourself in your <code>.emacs</code> file using code that has nothing to do
with the <code>custom-set-<small>...</small></code> functions.

<p>When you do this, and later use <code>customize</code>, you will see a
message that says

<pre>this option has been changed outside the customize buffer.
</pre>

<p>This message is only a warning.  If you click on the button to

<pre>Save for Future Sessions
</pre>

<p>Emacs will write a <code>custom-set-<small>...</small></code> expression near the end
of your <code>.emacs</code> file that will be evaluated after your
hand-written expression.  It will, therefore, overrule your
hand-written expression.  No harm will be done.  When you do this,
however, be careful to remember which expression is active; if you
forget, you may confuse yourself.

<p>So long as you remember where the values are set, you will have no
trouble.  In any event, the values are always set in your
initialization file, which is usually called <code>.emacs</code>.

<p>I myself use <code>customize</code> for hardly anything.  Mostly, I write
expressions myself.

<p><hr>
Node:<a name="Beginning%20a%20.emacs%20File">Beginning a .emacs File</a>,
Next:<a rel=next href="#Text%20and%20Auto-fill">Text and Auto-fill</a>,
Previous:<a rel=previous href="#defcustom">defcustom</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.3 Beginning a <code>.emacs</code> File</h2>

<p>When you start Emacs, it loads your <code>.emacs</code> file unless you tell
it not to by specifying <code>-q</code> on the command line.  (The
<code>emacs -q</code> command gives you a plain, out-of-the-box Emacs.)

<p>A <code>.emacs</code> file contains Lisp expressions.  Often, these are no
more than expressions to set values; sometimes they are function
definitions.

<p>See <a href="emacs.html#The%20Init%20File%20%3ccode%3e%7e%2f.emacs%3c%2fcode%3e">Init File</a>, for a short description of initialization files.

<p>This chapter goes over some of the same ground, but is a walk among
extracts from a complete, long-used <code>.emacs</code> file--my own.

<p>The first part of the file consists of comments: reminders to myself. 
By now, of course, I remember these things, but when I started, I did
not.

<pre>;;;; Bob's .emacs file
; Robert J. Chassell
; 26 September 1985
</pre>

<p>Look at that date!  I started this file a long time ago.  I have been
adding to it ever since.

<pre>; Each section in this file is introduced by a
; line beginning with four semicolons; and each
; entry is introduced by a line beginning with
; three semicolons.
</pre>

<p>This describes the usual conventions for comments in Emacs Lisp. 
Everything on a line that follows a semicolon is a comment.  Two,
three, and four semicolons are used as section and subsection
markers.  (See <a href="elisp.html#Comments">Comments</a>, for more about comments.)

<pre>;;;; The Help Key
; Control-h is the help key;
; after typing control-h, type a letter to
; indicate the subject about which you want help.
; For an explanation of the help facility,
; type control-h two times in a row.
</pre>

<p>Just remember: type <kbd>C-h</kbd> two times for help.

<pre>; To find out about any mode, type control-h m
; while in that mode.  For example, to find out
; about mail mode, enter mail mode and then type
; control-h m.
</pre>

<p>`Mode help', as I call this, is very helpful.  Usually, it tells you
all you need to know.

<p>Of course, you don't need to include comments like these in your
<code>.emacs</code> file.  I included them in mine because I kept forgetting
about Mode help or the conventions for comments--but I was able to
remember to look here to remind myself.

<p><hr>
Node:<a name="Text%20and%20Auto-fill">Text and Auto-fill</a>,
Next:<a rel=next href="#Mail%20Aliases">Mail Aliases</a>,
Previous:<a rel=previous href="#Beginning%20a%20.emacs%20File">Beginning a .emacs File</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.4 Text and Auto Fill Mode</h2>

<p>Now we come to the part that `turns on' Text mode and
Auto Fill mode.

<pre>;;; Text mode and Auto Fill mode
; The next three lines put Emacs into Text mode
; and Auto Fill mode, and are for writers who
; want to start writing prose rather than code.

(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'text-mode-hook-identify)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
</pre>

<p>Here is the first part of this <code>.emacs</code> file that does something
besides remind a forgetful human!

<p>The first of the two lines in parentheses tells Emacs to turn on Text
mode when you find a file, <em>unless</em> that file should go into some
other mode, such as C mode.

<p>When Emacs reads a file, it looks at the extension to the file name,
if any.  (The extension is the part that comes after a <code>.</code>.)  If
the file ends with a <code>.c</code> or <code>.h</code> extension then Emacs turns
on C mode.  Also, Emacs looks at first nonblank line of the file; if
the line says <code>-*-&nbsp;C&nbsp;-*-</code>, Emacs turns on C mode.  Emacs
possesses a list of extensions and specifications that it uses
automatically.  In addition, Emacs looks near the last page for a
per-buffer, "local variables list", if any.

<p>Now, back to the <code>.emacs</code> file.

<p>Here is the line again; how does it work?

<pre>(setq default-major-mode 'text-mode)
</pre>

<p>This line is a short, but complete Emacs Lisp expression.

<p>We are already familiar with <code>setq</code>.  It sets the following variable,
<code>default-major-mode</code>, to the subsequent value, which is
<code>text-mode</code>.  The single quote mark before <code>text-mode</code> tells
Emacs to deal directly with the <code>text-mode</code> variable, not with
whatever it might stand for.  See <a href="#set%20&amp;%20setq">Setting the Value of a Variable</a>, for a reminder of how <code>setq</code> works.  The main point
is that there is no difference between the procedure you use to set
a value in your <code>.emacs</code> file and the procedure you use anywhere
else in Emacs.

<p>Here are the next two lines:

<pre>(add-hook 'text-mode-hook 'text-mode-hook-identify)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
</pre>

<p>In these two lines, the <code>add-hook</code> command first adds
<code>text-mode-hook-identify</code> to the variable called
<code>text-mode-hook</code> and then adds <code>turn-on-auto-fill</code> to the
variable.

<p><code>turn-on-auto-fill</code> is the name of a program, that, you guessed
it!, turns on Auto Fill mode.  <code>text-mode-hook-identify</code> is a
function that tells <code>toggle-text-mode-auto-fill</code> which buffers
are in Text mode.

<p>Every time Emacs turns on Text mode, Emacs runs the commands `hooked'
onto Text mode.  So every time Emacs turns on Text mode, Emacs also
turns on Auto Fill mode.

<p>In brief, the first line causes Emacs to enter Text mode when you edit
a file, unless the file name extension, first non-blank line, or local
variables tell Emacs otherwise.

<p>Text mode among other actions, sets the syntax table to work
conveniently for writers.  In Text mode, Emacs considers an apostrophe
as part of a word like a letter; but Emacs does not consider a period
or a space as part of a word.  Thus, <kbd>M-f</kbd> moves you over
<code>it's</code>.  On the other hand, in C mode, <kbd>M-f</kbd> stops just after
the <code>t</code> of <code>it's</code>.

<p>The second and third lines causes Emacs to turn on Auto Fill mode when
it turns on Text mode.  In Auto Fill mode, Emacs automatically breaks
a line that is too wide and brings the excessively wide part of the
line down to the next line.  Emacs breaks lines between words, not
within them.

<p>When Auto Fill mode is turned off, lines continue to the right as you
type them.  Depending on how you set the value of
<code>truncate-lines</code>, the words you type either disappear off the
right side of the screen, or else are shown, in a rather ugly and
unreadable manner, as a continuation line on the screen.

<p>In addition, in this part of my <code>.emacs</code> file, I tell the Emacs
fill commands to insert two spaces after a colon:

<pre>(setq colon-double-space t)
</pre>

<p><hr>
Node:<a name="Mail%20Aliases">Mail Aliases</a>,
Next:<a rel=next href="#Indent%20Tabs%20Mode">Indent Tabs Mode</a>,
Previous:<a rel=previous href="#Text%20and%20Auto-fill">Text and Auto-fill</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.5 Mail Aliases</h2>

<p>Here is a <code>setq</code> that `turns on' mail aliases, along with more
reminders.

<pre>;;; Mail mode
; To enter mail mode, type `C-x m'
; To enter RMAIL (for reading mail),
; type `M-x rmail'

(setq mail-aliases t)
</pre>

<p>This <code>setq</code> command sets the value of the variable
<code>mail-aliases</code> to <code>t</code>.  Since <code>t</code> means true, the line
says, in effect, "Yes, use mail aliases."

<p>Mail aliases are convenient short names for long email addresses or
for lists of email addresses.  The file where you keep your `aliases'
is <code>~/.mailrc</code>.  You write an alias like this:

<pre>alias geo george@foobar.wiz.edu
</pre>

<p>When you write a message to George, address it to <code>geo</code>; the
mailer will automatically expand <code>geo</code> to the full address.

<p><hr>
Node:<a name="Indent%20Tabs%20Mode">Indent Tabs Mode</a>,
Next:<a rel=next href="#Keybindings">Keybindings</a>,
Previous:<a rel=previous href="#Mail%20Aliases">Mail Aliases</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.6 Indent Tabs Mode</h2>

<p>By default, Emacs inserts tabs in place of multiple spaces when it
formats a region.  (For example, you might indent many lines of text
all at once with the <code>indent-region</code> command.)  Tabs look fine on
a terminal or with ordinary printing, but they produce badly indented
output when you use TeX or Texinfo since TeX ignores tabs.

<p>The following turns off Indent Tabs mode:

<pre>;;; Prevent Extraneous Tabs
(setq-default indent-tabs-mode nil)
</pre>

<p>Note that this line uses <code>setq-default</code> rather than the
<code>setq</code> command that we have seen before.  The <code>setq-default</code>
command sets values only in buffers that do not have their own local
values for the variable.

<p><hr>
Node:<a name="Keybindings">Keybindings</a>,
Next:<a rel=next href="#Keymaps">Keymaps</a>,
Previous:<a rel=previous href="#Indent%20Tabs%20Mode">Indent Tabs Mode</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.7 Some Keybindings</h2>

<p>Now for some personal keybindings:

<pre>;;; Compare windows
(global-set-key "\C-cw" 'compare-windows)
</pre>

<p><code>compare-windows</code> is a nifty command that compares the text in
your current window with text in the next window.  It makes the
comparison by starting at point in each window, moving over text in
each window as far as they match.  I use this command all the time.

<p>This also shows how to set a key globally, for all modes.

<p>The command is <code>global-set-key</code>.  It is followed by the
keybinding.  In a <code>.emacs</code> file, the keybinding is written as
shown: <code>\C-c</code> stands for `control-c', which means `press the
control key and the <kbd>c</kbd> key at the same time'.  The <code>w</code> means
`press the <kbd>w</kbd> key'.  The keybinding is surrounded by double
quotation marks.  In documentation, you would write this as <kbd>C-c
w</kbd>.  (If you were binding a &lt;META&gt; key, such as <kbd>M-c</kbd>, rather
than a &lt;CTL&gt; key, you would write <code>\M-c</code>.  See <a href="emacs.html#Rebinding%20Keys%20in%20Your%20Init%20File">Init Rebinding</a>, for details.)

<p>The command invoked by the keys is <code>compare-windows</code>.  Note that
<code>compare-windows</code> is preceded by a single quote; otherwise, Emacs
would first try to evaluate the symbol to determine its value.

<p>These three things, the double quotation marks, the backslash before
the <code>C</code>, and the single quote mark are necessary parts of
keybinding that I tend to forget.  Fortunately, I have come to
remember that I should look at my existing <code>.emacs</code> file, and
adapt what is there.

<p>As for the keybinding itself: <kbd>C-c w</kbd>.  This combines the prefix
key, <kbd>C-c</kbd>, with a single character, in this case, <kbd>w</kbd>.  This
set of keys, <kbd>C-c</kbd> followed by a single character, is strictly
reserved for individuals' own use.  (I call these `own' keys, since
these are for my own use.)  You should always be able to create such a
keybinding for your own use without stomping on someone else's
keybinding.  If you ever write an extension to Emacs, please avoid
taking any of these keys for public use.  Create a key like <kbd>C-c
C-w</kbd> instead.  Otherwise, we will run out of `own' keys.

<p>Here is another keybinding, with a comment:

<pre>;;; Keybinding for `occur'
; I use occur a lot, so let's bind it to a key:
(global-set-key "\C-co" 'occur)
</pre>

<p>The <code>occur</code> command shows all the lines in the current buffer
that contain a match for a regular expression.  Matching lines are
shown in a buffer called <code>*Occur*</code>.  That buffer serves as a menu
to jump to occurrences.

<p>Here is how to unbind a key, so it does not
work:

<pre>;;; Unbind `C-x f'
(global-unset-key "\C-xf")
</pre>

<p>There is a reason for this unbinding: I found I inadvertently typed
<kbd>C-x&nbsp;f</kbd> when I meant to type <kbd>C-x C-f</kbd>.  Rather than find a
file, as I intended, I accidentally set the width for filled text,
almost always to a width I did not want.  Since I hardly ever reset my
default width, I simply unbound the key.

<p>The following rebinds an existing key:

<pre>;;; Rebind `C-x C-b' for `buffer-menu'
(global-set-key "\C-x\C-b" 'buffer-menu)
</pre>

<p>By default, <kbd>C-x C-b</kbd> runs the
<code>list-buffers</code> command.  This command lists
your buffers in <em>another</em> window.  Since I
almost always want to do something in that
window, I prefer the  <code>buffer-menu</code>
command, which not only lists the buffers,
but moves point into that window.

<p><hr>
Node:<a name="Keymaps">Keymaps</a>,
Next:<a rel=next href="#Loading%20Files">Loading Files</a>,
Previous:<a rel=previous href="#Keybindings">Keybindings</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.8 Keymaps</h2>

<p>Emacs uses <dfn>keymaps</dfn> to record which keys call which commands. 
When you use <code>global-set-key</code> to set the keybinding for a single
command in all parts of Emacs, you are specifying the keybinding in
<code>current-global-map</code>.

<p>Specific modes, such as C mode or Text mode, have their own keymaps;
the mode-specific keymaps override the global map that is shared by
all buffers.

<p>The <code>global-set-key</code> function binds, or rebinds, the global
keymap.  For example, the following binds the key <kbd>C-x C-b</kbd> to the
function <code>buffer-menu</code>:

<pre>(global-set-key "\C-x\C-b" 'buffer-menu)
</pre>

<p>Mode-specific keymaps are bound using the <code>define-key</code> function,
which takes a specific keymap as an argument, as well as the key and
the command.  For example, my <code>.emacs</code> file contains the
following expression to bind the <code>texinfo-insert-@group</code> command
to <kbd>C-c C-c g</kbd>:

<pre>(define-key texinfo-mode-map "\C-c\C-cg" 'texinfo-insert-@group)
</pre>

<p>The <code>texinfo-insert-@group</code> function itself is a little extension
to Texinfo mode that inserts <code>@group</code> into a Texinfo file.  I
use this command all the time and prefer to type the three strokes
<kbd>C-c C-c g</kbd> rather than the six strokes <kbd>@ g r o u p</kbd>. 
(<code>@group</code> and its matching <code>@end group</code> are commands that
keep all enclosed text together on one page; many multi-line examples
in this book are surrounded by <code>@group <small>...</small> @end group</code>.)

<p>Here is the <code>texinfo-insert-@group</code> function definition:

<pre>(defun texinfo-insert-@group ()
  "Insert the string @group in a Texinfo buffer."
  (interactive)
  (beginning-of-line)
  (insert "@group\n"))
</pre>

<p>(Of course, I could have used Abbrev mode to save typing, rather than
write a function to insert a word; but I prefer key strokes consistent
with other Texinfo mode key bindings.)

<p>You will see numerous <code>define-key</code> expressions in
<code>loaddefs.el</code> as well as in the various mode libraries, such as
<code>cc-mode.el</code> and <code>lisp-mode.el</code>.

<p>See <a href="emacs.html#Customizing%20Key%20Bindings">Key Bindings</a>, and <a href="elisp.html#Keymaps">Keymaps</a>, for more information about keymaps.

<p><hr>
Node:<a name="Loading%20Files">Loading Files</a>,
Next:<a rel=next href="#Autoload">Autoload</a>,
Previous:<a rel=previous href="#Keymaps">Keymaps</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.9 Loading Files</h2>

<p>Many people in the GNU Emacs community have written extensions to
Emacs.  As time goes by, these extensions are often included in new
releases.  For example, the Calendar and Diary packages are now part
of the standard GNU Emacs.

<p>(Calc, which I consider a vital part of Emacs, would be part of the
standard distribution except that it was so large it was packaged
separately and no one has changed that.)

<p>You can use a <code>load</code> command to evaluate a complete file and
thereby install all the functions and variables in the file into Emacs. 
For example:

<pre>(load "~/emacs/slowsplit")
</pre>

<p>This evaluates, i.e. loads, the <code>slowsplit.el</code> file or if it
exists, the faster, byte compiled <code>slowsplit.elc</code> file from the
<code>emacs</code> sub-directory of your home directory.  The file contains
the function <code>split-window-quietly</code>, which John Robinson wrote in
1989.

<p>The <code>split-window-quietly</code> function splits a window with the
minimum of redisplay.  I installed it in 1989 because it worked well
with the slow 1200 baud terminals I was then using.  Nowadays, I only
occasionally come across such a slow connection, but I continue to use
the function because I like the way it leaves the bottom half of a
buffer in the lower of the new windows and the top half in the upper
window.

<p>To replace the key binding for the default
<code>split-window-vertically</code>, you must also unset that key and bind
the keys to <code>split-window-quietly</code>, like this:

<pre>(global-unset-key "\C-x2")
(global-set-key "\C-x2" 'split-window-quietly)
</pre>

<p>If you load many extensions, as I do, then instead of specifying the
exact location of the extension file, as shown above, you can specify
that directory as part of Emacs' <code>load-path</code>.  Then, when Emacs
loads a file, it will search that directory as well as its default
list of directories.  (The default list is specified in <code>paths.h</code>
when Emacs is built.)

<p>The following command adds your <code>~/emacs</code> directory to the
existing load path:

<pre>;;; Emacs Load Path
(setq load-path (cons "~/emacs" load-path))
</pre>

<p>Incidentally, <code>load-library</code> is an interactive interface to the
<code>load</code> function.  The complete function looks like this:

<pre>(defun load-library (library)
  "Load the library named LIBRARY.
This is an interface to the function `load'."
  (interactive "sLoad library: ")
  (load library))
</pre>

<p>The name of the function, <code>load-library</code>, comes from the use of
`library' as a conventional synonym for `file'.  The source for the
<code>load-library</code> command is in the <code>files.el</code> library.

<p>Another interactive command that does a slightly different job is
<code>load-file</code>.  See <a href="emacs.html#Libraries%20of%20Lisp%20Code%20for%20Emacs">Lisp Libraries</a>, for information on the
distinction between <code>load-library</code> and this command.

<p><hr>
Node:<a name="Autoload">Autoload</a>,
Next:<a rel=next href="#Simple%20Extension">Simple Extension</a>,
Previous:<a rel=previous href="#Loading%20Files">Loading Files</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.10 Autoloading</h2>

<p>Instead of installing a function by loading the file that contains it,
or by evaluating the function definition, you can make the function
available but not actually install it until it is first called.  This
is called <dfn>autoloading</dfn>.

<p>When you execute an autoloaded function, Emacs automatically evaluates
the file that contains the definition, and then calls the function.

<p>Emacs starts quicker with autoloaded functions, since their libraries
are not loaded right away; but you need to wait a moment when you
first use such a function, while its containing file is evaluated.

<p>Rarely used functions are frequently autoloaded.  The
<code>loaddefs.el</code> library contains hundreds of autoloaded functions,
from <code>bookmark-set</code> to <code>wordstar-mode</code>.  Of course, you may
come to use a `rare' function frequently.  When you do, you should
load that function's file with a <code>load</code> expression in your
<code>.emacs</code> file.

<p>In my <code>.emacs</code> file for Emacs version 21, I load 12 libraries
that contain functions that would otherwise be autoloaded.  (Actually,
it would have been better to include these files in my `dumped' Emacs
when I built it, but I forgot.  See <a href="elisp.html#Building%20Emacs">Building Emacs</a>, and the <code>INSTALL</code>
file for more about dumping.)

<p>You may also want to include autoloaded expressions in your <code>.emacs</code>
file.  <code>autoload</code> is a built-in function that takes up to five
arguments, the final three of which are optional.  The first argument
is the name of the function to be autoloaded; the second is the name
of the file to be loaded.  The third argument is documentation for the
function, and the fourth tells whether the function can be called
interactively.  The fifth argument tells what type of
object--<code>autoload</code> can handle a keymap or macro as well as a
function (the default is a function).

<p>Here is a typical example:

<pre>(autoload 'html-helper-mode
  "html-helper-mode" "Edit HTML documents" t)
</pre>

<p>(<code>html-helper-mode</code> is an alternative to <code>html-mode</code>, which
is a standard part of the distribution).

<p>This expression autoloads the <code>html-helper-mode</code> function.  It
takes it from the <code>html-helper-mode.el</code> file (or from the byte
compiled file <code>html-helper-mode.elc</code>, if it exists.)  The file
must be located in a directory specified by <code>load-path</code>.  The
documentation says that this is a mode to help you edit documents
written in the HyperText Markup Language.  You can call this mode
interactively by typing <kbd>M-x html-helper-mode</kbd>.  (You need to
duplicate the function's regular documentation in the autoload
expression because the regular function is not yet loaded, so its
documentation is not available.)

<p>See <a href="elisp.html#Autoload">Autoload</a>, for more information.

<p><hr>
Node:<a name="Simple%20Extension">Simple Extension</a>,
Next:<a rel=next href="#X11%20Colors">X11 Colors</a>,
Previous:<a rel=previous href="#Autoload">Autoload</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.11 A Simple Extension: <code>line-to-top-of-window</code></h2>

<p>Here is a simple extension to Emacs that moves the line point is on to
the top of the window.  I use this all the time, to make text easier
to read.

<p>You can put the following code into a separate file and then load it
from your <code>.emacs</code> file, or you can include it within your
<code>.emacs</code> file.

<p>Here is the definition:

<pre>;;; Line to top of window;
;;; replace three keystroke sequence  C-u 0 C-l
(defun line-to-top-of-window ()
  "Move the line point is on to top of window."
  (interactive)
  (recenter 0))
</pre>

<p>Now for the keybinding.

<p>Nowadays, function keys as well as mouse button events and
non-<small>ASCII</small> characters are written within square brackets, without
quotation marks.  (In Emacs version 18 and before, you had to write
different function key bindings for each different make of terminal.)

<p>I bind <code>line-to-top-of-window</code> to my &lt;F6&gt; function key like
this:

<pre>(global-set-key [f6] 'line-to-top-of-window)
</pre>

<p>For more information, see <a href="emacs.html#Rebinding%20Keys%20in%20Your%20Init%20File">Init Rebinding</a>.

<p>If you run two versions of GNU Emacs, such as versions 20 and 21, and
use one <code>.emacs</code> file, you can select which code to evaluate with
the following conditional:

<pre>(cond
 ((string-equal (number-to-string 20) (substring (emacs-version) 10 12))
  ;; evaluate version 20 code
  ( <small>...</small> ))
 ((string-equal (number-to-string 21) (substring (emacs-version) 10 12))
  ;; evaluate version 21 code
  ( <small>...</small> )))
</pre>

<p>For example, in contrast to version 20, version 21 blinks its cursor
by default.  I hate such blinking, as well as some other features in
version 21, so I placed the following in my <code>.emacs</code>
file<a rel=footnote href="#fn-12"><sup>12</sup></a>:

<pre>(if (string-equal "21" (substring (emacs-version) 10 12))
    (progn
      (blink-cursor-mode 0)
      ;; Insert newline when you press `C-n' (next-line)
      ;; at the end of the buffer
      (setq next-line-add-newlines t)
      ;; Turn on image viewing
      (auto-image-file-mode t)
      ;; Turn on menu bar (this bar has text)
      ;; (Use numeric argument to turn on)
      (menu-bar-mode 1)
      ;; Turn off tool bar (this bar has icons)
      ;; (Use numeric argument to turn on)
      (tool-bar-mode nil)
      ;; Turn off tooltip mode for tool bar
      ;; (This mode causes icon explanations to pop up)
      ;; (Use numeric argument to turn on)
      (tooltip-mode nil)
      ;; If tooltips turned on, make tips appear promptly
      (setq tooltip-delay 0.1)  ; default is one second
       ))
</pre>

<p>(You will note that instead of typing <code>(number-to-string 21)</code>, I
decided to save typing and wrote `21' as a string, <code>"21"</code>, rather
than convert it from an integer to a string.  In this instance, this
expression is better than the longer, but more general
<code>(number-to-string 21)</code>.  However, if you do not know ahead of
time what type of information will be returned, then the
<code>number-to-string</code> function will be needed.)

<p><hr>
Node:<a name="X11%20Colors">X11 Colors</a>,
Next:<a rel=next href="#Miscellaneous">Miscellaneous</a>,
Previous:<a rel=previous href="#Simple%20Extension">Simple Extension</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.12 X11 Colors</h2>

<p>You can specify colors when you use Emacs with the MIT X Windowing
system.

<p>I dislike the default colors and specify my own.

<p>Here are the expressions in my <code>.emacs</code>
file that set values:

<pre>;; Set cursor color
(set-cursor-color "white")

;; Set mouse color
(set-mouse-color "white")

;; Set foreground and background
(set-foreground-color "white")
(set-background-color "darkblue")

;;; Set highlighting colors for isearch and drag
(set-face-foreground 'highlight "white")
(set-face-background 'highlight "blue")

(set-face-foreground 'region "cyan")
(set-face-background 'region "blue")

(set-face-foreground 'secondary-selection "skyblue")
(set-face-background 'secondary-selection "darkblue")

;; Set calendar highlighting colors
(setq calendar-load-hook
      '(lambda ()
         (set-face-foreground 'diary-face   "skyblue")
         (set-face-background 'holiday-face "slate blue")
         (set-face-foreground 'holiday-face "white")))
</pre>

<p>The various shades of blue soothe my eye and prevent me from seeing
the screen flicker.

<p>Alternatively, I could have set my specifications in various X
initialization files.  For example, I could set the foreground,
background, cursor, and pointer (i.e., mouse) colors in my
<code>~/.Xresources</code> file like this:

<pre>Emacs*foreground:   white
Emacs*background:   darkblue
Emacs*cursorColor:  white
Emacs*pointerColor: white
</pre>

<p>In any event, since it is not part of Emacs, I set the root color of
my X window in my <code>~/.xinitrc</code> file, like this<a rel=footnote href="#fn-13"><sup>13</sup></a>:

<pre># I use TWM for window manager.
xsetroot -solid Navy -fg white &amp;
</pre>

<p><hr>
Node:<a name="Miscellaneous">Miscellaneous</a>,
Next:<a rel=next href="#Mode%20Line">Mode Line</a>,
Previous:<a rel=previous href="#X11%20Colors">X11 Colors</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.13 Miscellaneous Settings for a <code>.emacs</code> File</h2>

<p>Here are a few miscellaneous settings:

<br><p>
<ul>
<li>Set the shape and color of the mouse cursor:
<pre>; Cursor shapes are defined in
; `/usr/include/X11/cursorfont.h';
; for example, the `target' cursor is number 128;
; the `top_left_arrow' cursor is number 132.

(let ((mpointer (x-get-resource "*mpointer"
                                "*emacs*mpointer")))
  ;; If you have not set your mouse pointer
  ;;     then set it, otherwise leave as is:
  (if (eq mpointer nil)
      (setq mpointer "132")) ; top_left_arrow
  (setq x-pointer-shape (string-to-int mpointer))
  (set-mouse-color "white"))
</pre>
</ul>

<p><hr>
Node:<a name="Mode%20Line">Mode Line</a>,
Previous:<a rel=previous href="#Miscellaneous">Miscellaneous</a>,
Up:<a rel=up href="#Emacs%20Initialization">Emacs Initialization</a>
<br>

<h2>16.14 A Modified Mode Line</h2>

<p>Finally, a feature I really like: a modified mode line.

<p>When I work over a network, I forget which machine I am using.  Also,
I tend to I lose track of where I am, and which line point is on.

<p>So I reset my mode line to look like this:

<pre>-:-- foo.texi   rattlesnake:/home/bob/  Line 1  (Texinfo Fill) Top
</pre>

<p>I am visiting a file called <code>foo.texi</code>, on my machine
<code>rattlesnake</code> in my <code>/home/bob</code> buffer.  I am on line 1, in
Texinfo mode, and am at the top of the buffer.

<p>My <code>.emacs</code> file has a section that looks like this:

<pre>;; Set a Mode Line that tells me which machine, which directory,
;; and which line I am on, plus the other customary information.
(setq default-mode-line-format
 (quote
  (#("-" 0 1
     (help-echo
      "mouse-1: select window, mouse-2: delete others ..."))
   mode-line-mule-info
   mode-line-modified
   mode-line-frame-identification
   "    "
   mode-line-buffer-identification
   "    "
   (:eval (substring
           (system-name) 0 (string-match "\\..+" (system-name))))
   ":"
   default-directory
   #(" " 0 1
     (help-echo
      "mouse-1: select window, mouse-2: delete others ..."))
   (line-number-mode " Line %l ")
   global-mode-string
   #("   %[(" 0 6
     (help-echo
      "mouse-1: select window, mouse-2: delete others ..."))
   (:eval (mode-line-mode-name))
   mode-line-process
   minor-mode-alist
   #("%n" 0 2 (help-echo "mouse-2: widen" local-map (keymap ...)))
   ")%] "
   (-3 . "%P")
   ;;   "-%-"
   )))
</pre>

<p>Here, I redefine the default mode line.  Most of the parts are from
the original; but I make a few changes.  I set the <em>default</em> mode
line format so as to permit various modes, such as Info, to override
it.

<p>Many elements in the list are self-explanatory:
<code>mode-line-modified</code> is a variable that tells whether the buffer
has been modified, <code>mode-name</code> tells the name of the mode, and so
on.  However, the format looks complicated because of two features we
have not discussed.

<p>The first string in the mode line is a dash or hyphen, <code>-</code>.  In
the old days, it would have been specified simply as <code>"-"</code>.  But
nowadays, Emacs can add properties to a string, such as highlighting
or, as in this case, a help feature.  If you place your mouse cursor
over the hyphen, some help information appears  (By default, you must
wait one second before the information appears.  You can change that
timing by changing the value of <code>tooltip-delay</code>.)

<p>The new string format has a special syntax:

<pre>#("-" 0 1 (help-echo "mouse-1: select window, ..."))
</pre>

<p>The <code>#(</code> begins a list.  The first element of the list is the
string itself, just one <code>-</code>.  The second and third
elements specify the range over which the fourth element applies.  A
range starts <em>after</em> a character, so a zero means the range
starts just before the first character; a 1 means that the range ends
just after the first character.  The third element is the property for
the range.  It consists of a property list,  a
property name, in this case, <code>help-echo</code>, followed by a value, in this
case, a string.  The second, third, and fourth elements of this new
string format can be repeated.

<p>See <a href="elisp.html#Text%20Properties%20in%20String">Text Props and Strings</a>, and see <a href="elisp.html#Mode%20Line%20Format">Mode Line Format</a>, for more
information.

<p><code>mode-line-buffer-identification</code>
displays the current buffer name.  It is a list
beginning <code>(#("%12b" 0 4 <small>...</small></code>. 
The <code>#(</code> begins the list.

<p>The <code>"%12b"</code> displays the current buffer name, using the
<code>buffer-name</code> function with which we are familiar; the `12'
specifies the maximum number of characters that will be displayed. 
When a name has fewer characters, whitespace is added to fill out to
this number.  (Buffer names can and often should be longer than 12
characters; this length works well in a typical 80 column wide
window.)

<p><code>:eval</code> is a new feature in GNU Emacs version 21.  It says to
evaluate the following form and use the result as a string to display. 
In this case, the expression displays the first component of the full
system name.  The end of the first component is a <code>.</code> (`period'),
so I use the <code>string-match</code> function to tell me the length of the
first component.  The substring from the zeroth character to that
length is the name of the machine.

<p>This is the expression:

<pre>(:eval (substring
        (system-name) 0 (string-match "\\..+" (system-name))))
</pre>

<p><code>%[</code> and <code>%]</code> cause a pair of square brackets
to appear for each recursive editing level.  <code>%n</code> says `Narrow'
when narrowing is in effect.  <code>%P</code> tells you the percentage of
the buffer that is above the bottom of the window, or `Top', `Bottom',
or `All'.  (A lower case <code>p</code> tell you the percentage above the
<em>top</em> of the window.)  <code>%-</code> inserts enough dashes to fill
out the line.

<p>Remember, "You don't have to like Emacs to like it" -- your own
Emacs can have different colors, different commands, and different
keys than a default Emacs.

<p>On the other hand, if you want to bring up a plain `out of the box'
Emacs, with no customization, type:

<pre>emacs -q
</pre>

<p>This will start an Emacs that does <em>not</em> load your
<code>~/.emacs</code> initialization file.  A plain, default Emacs.  Nothing
more.

<p><hr>
Node:<a name="Debugging">Debugging</a>,
Next:<a rel=next href="#Conclusion">Conclusion</a>,
Previous:<a rel=previous href="#Emacs%20Initialization">Emacs Initialization</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>17 Debugging</h1>

<p>GNU Emacs has two debuggers, <code>debug</code> and <code>edebug</code>.  The
first is built into the internals of Emacs and is always with you;
the second requires that you instrument a function before you can use it.

<p>Both debuggers are described extensively in <a href="elisp.html#Debugging%20Lisp%20Programs">Debugging</a>. 
In this chapter, I will walk through a short example of each.

<ul>
<li><a href="#debug">debug</a>:                        How to use the built-in debugger. 
<li><a href="#debug-on-entry">debug-on-entry</a>:               Start debugging when you call a function. 
<li><a href="#debug-on-quit">debug-on-quit</a>:                Start debugging when you quit with <kbd>C-g</kbd>. 
<li><a href="#edebug">edebug</a>:                       How to use Edebug, a source level debugger. 
<li><a href="#Debugging%20Exercises">Debugging Exercises</a>: 
</ul>

<p><hr>
Node:<a name="debug">debug</a>,
Next:<a rel=next href="#debug-on-entry">debug-on-entry</a>,
Previous:<a rel=previous href="#Debugging">Debugging</a>,
Up:<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>17.1 <code>debug</code></h2>

<p>Suppose you have written a function definition that is intended to
return the sum of the numbers 1 through a given number.  (This is the
<code>triangle</code> function discussed earlier.  See <a href="#Decrementing%20Example">Example with Decrementing Counter</a>, for a discussion.)

<p>However, your function definition has a bug.  You have mistyped
<code>1=</code> for <code>1-</code>.  Here is the broken definition:

<pre>(defun triangle-bugged (number)
  "Return sum of numbers 1 through NUMBER inclusive."
  (let ((total 0))
    (while (&gt; number 0)
      (setq total (+ total number))
      (setq number (1= number)))      ; Error here.
    total))
</pre>

<p>If you are reading this in Info, you can evaluate this definition in
the normal fashion.  You will see <code>triangle-bugged</code> appear in the
echo area.

<p>Now evaluate the <code>triangle-bugged</code> function with an
argument of 4:

<pre>(triangle-bugged 4)
</pre>

<p>In GNU Emacs version 21, you will create and enter a
<code>*Backtrace*</code> buffer that says:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--Lisp error: (void-function 1=)
  (1= number)
  (setq number (1= number))
  (while (&gt; number 0) (setq total (+ total number))
        (setq number (1= number)))
  (let ((total 0)) (while (&gt; number 0) (setq total ...)
    (setq number ...)) total)
  triangle-bugged(4)
  eval((triangle-bugged 4))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>(I have reformatted this example slightly; the debugger does not fold
long lines.  As usual, you can quit the debugger by typing <kbd>q</kbd> in
the <code>*Backtrace*</code> buffer.)

<p>In practice, for a bug as simple as this, the `Lisp error' line will
tell you what you need to know to correct the definition.  The
function <code>1=</code> is `void'.

<p>In GNU Emacs 20 and before, you will see:

<pre>Symbol's function definition is void: 1=
</pre>

<p>which has the same meaning as the <code>*Backtrace*</code> buffer line in
version 21.

<p>However, suppose you are not quite certain what is going on? 
You can read the complete backtrace.

<p>In this case, you need to run GNU Emacs 21, which automatically starts
the debugger that puts you in the <code>*Backtrace*</code> buffer; or else,
you need to start the debugger manually as described below.

<p>Read the <code>*Backtrace*</code> buffer from the bottom up; it tells you
what Emacs did that led to the error.  Emacs made an interactive call
to <kbd>C-x C-e</kbd> (<code>eval-last-sexp</code>), which led to the evaluation
of the <code>triangle-bugged</code> expression.  Each line above tells you
what the Lisp interpreter evaluated next.

<p>The third line from the top of the buffer is

<pre>(setq number (1= number))
</pre>

<p>Emacs tried to evaluate this expression; in order to do so, it tried
to evaluate the inner expression shown on the second line from the
top:

<pre>(1= number)
</pre>

<p>This is where the error occurred; as the top line says:

<pre>Debugger entered--Lisp error: (void-function 1=)
</pre>

<p>You can correct the mistake, re-evaluate the function definition, and
then run your test again.

<p><hr>
Node:<a name="debug-on-entry">debug-on-entry</a>,
Next:<a rel=next href="#debug-on-quit">debug-on-quit</a>,
Previous:<a rel=previous href="#debug">debug</a>,
Up:<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>17.2 <code>debug-on-entry</code></h2>

<p>GNU Emacs 21 starts the debugger automatically when your function has
an error.  GNU Emacs version 20 and before did not; it simply
presented you with an error message.  You had to start the debugger
manually.

<p>You can start the debugger manually for all versions of Emacs; the
advantage is that the debugger runs even if you do not have a bug in
your code.  Sometimes your code will be free of bugs!

<p>You can enter the debugger when you call the function by calling
<code>debug-on-entry</code>.

<p>Type:

<pre>M-x debug-on-entry RET triangle-bugged RET
</pre>

<p>Now, evaluate the following:

<pre>(triangle-bugged 5)
</pre>

<p>All versions of Emacs will create a <code>*Backtrace*</code> buffer and tell
you that it is beginning to evaluate the <code>triangle-bugged</code>
function:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--entering a function:
* triangle-bugged(5)
  eval((triangle-bugged 5))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>In the <code>*Backtrace*</code> buffer, type <kbd>d</kbd>.  Emacs will evaluate
the first expression in <code>triangle-bugged</code>; the buffer will look
like this:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--beginning evaluation of function call form:
* (let ((total 0)) (while (&gt; number 0) (setq total ...)
        (setq number ...)) total)
* triangle-bugged(5)
  eval((triangle-bugged 5))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>Now, type <kbd>d</kbd> again, eight times, slowly.  Each time you type
<kbd>d</kbd>, Emacs will evaluate another expression in the function
definition.

<p>Eventually, the buffer will look like this:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--beginning evaluation of function call form:
* (setq number (1= number))
* (while (&gt; number 0) (setq total (+ total number))
        (setq number (1= number)))
* (let ((total 0)) (while (&gt; number 0) (setq total ...)
        (setq number ...)) total)
* triangle-bugged(5)
  eval((triangle-bugged 5))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
---------- Buffer: *Backtrace* ----------
</pre>

<p>Finally, after you type <kbd>d</kbd> two more times, Emacs will reach the
error, and the top two lines of the <code>*Backtrace*</code> buffer will look
like this:

<pre>---------- Buffer: *Backtrace* ----------
Debugger entered--Lisp error: (void-function 1=)
* (1= number)
<small>...</small>
---------- Buffer: *Backtrace* ----------
</pre>

<p>By typing <kbd>d</kbd>, you were able to step through the function.

<p>You can quit a <code>*Backtrace*</code> buffer by typing <kbd>q</kbd> in it; this
quits the trace, but does not cancel <code>debug-on-entry</code>.

<p>To cancel the effect of <code>debug-on-entry</code>, call
<code>cancel-debug-on-entry</code> and the name of the function, like this:

<pre>M-x cancel-debug-on-entry RET triangle-bugged RET
</pre>

<p>(If you are reading this in Info, cancel <code>debug-on-entry</code> now.)

<p><hr>
Node:<a name="debug-on-quit">debug-on-quit</a>,
Next:<a rel=next href="#edebug">edebug</a>,
Previous:<a rel=previous href="#debug-on-entry">debug-on-entry</a>,
Up:<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>17.3 <code>debug-on-quit</code> and <code>(debug)</code></h2>

<p>In addition to setting <code>debug-on-error</code> or calling <code>debug-on-entry</code>,
there are two other ways to start <code>debug</code>.

<p>You can start <code>debug</code> whenever you type <kbd>C-g</kbd>
(<code>keyboard-quit</code>) by setting the variable <code>debug-on-quit</code> to
<code>t</code>.  This is useful for debugging infinite loops.

<p>Or, you can insert a line that says <code>(debug)</code> into your code
where you want the debugger to start, like this:

<pre>(defun triangle-bugged (number)
  "Return sum of numbers 1 through NUMBER inclusive."
  (let ((total 0))
    (while (&gt; number 0)
      (setq total (+ total number))
      (debug)                         ; Start debugger.
      (setq number (1= number)))      ; Error here.
    total))
</pre>

<p>The <code>debug</code> function is described in detail in <a href="elisp.html#The%20Lisp%20Debugger">Debugger</a>.

<p><hr>
Node:<a name="edebug">edebug</a>,
Next:<a rel=next href="#Debugging%20Exercises">Debugging Exercises</a>,
Previous:<a rel=previous href="#debug-on-quit">debug-on-quit</a>,
Up:<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>17.4 The <code>edebug</code> Source Level Debugger</h2>

<p>Edebug is a source level debugger.  Edebug normally displays the
source of the code you are debugging, with an arrow at the left that
shows which line you are currently executing.

<p>You can walk through the execution of a function, line by line, or run
quickly until reaching a <dfn>breakpoint</dfn> where execution stops.

<p>Edebug is described in <a href="elisp.html#Edebug">edebug</a>.

<p>Here is a bugged function definition for <code>triangle-recursively</code>. 
See <a href="#Recursive%20triangle%20function">Recursion in place of a counter</a>,
for a review of it.

<pre>(defun triangle-recursively-bugged (number)
  "Return sum of numbers 1 through NUMBER inclusive.
Uses recursion."
  (if (= number 1)
      1
    (+ number
       (triangle-recursively-bugged
        (1= number)))))               ; Error here.
</pre>

<p>Normally, you would install this definition by positioning your cursor
after the function's closing parenthesis and typing <kbd>C-x C-e</kbd>
(<code>eval-last-sexp</code>) or else by positioning your cursor within the
definition and typing <kbd>C-M-x</kbd> (<code>eval-defun</code>).  (By default,
the <code>eval-defun</code> command works only in Emacs Lisp mode or in Lisp
Interactive mode.)

<p>However, to prepare this function definition for Edebug, you must
first <dfn>instrument</dfn> the code using a different command.  You can do
this by positioning your cursor within the definition and typing

<pre>M-x edebug-defun RET
</pre>

<p>This will cause Emacs to load Edebug automatically if it is not
already loaded, and properly instrument the function.

<p>After instrumenting the function, place your cursor after the
following expression and type <kbd>C-x C-e</kbd> (<code>eval-last-sexp</code>):

<pre>(triangle-recursively-bugged 3)
</pre>

<p>You will be jumped back to the source for
<code>triangle-recursively-bugged</code> and the cursor positioned at the
beginning of the <code>if</code> line of the function.  Also, you will see
an arrowhead at the left hand side of that line.  The arrowhead marks
the line where the function is executing.  (In the following examples,
we show the arrowhead with <code>=&gt;</code>; in a windowing system, you may
see the arrowhead as a solid triangle in the window `fringe'.)

<pre>=&gt;-!-(if (= number 1)
</pre>

<p>In the example, the location of point is displayed as <code>-!-</code>
(in a printed book, it is displayed with a five pointed star).

<p>If you now press &lt;SPC&gt;, point will move to the next expression to
be executed; the line will look like this:

<pre>=&gt;(if -!-(= number 1)
</pre>

<p>As you continue to press &lt;SPC&gt;, point will move from expression to
expression.  At the same time, whenever an expression returns a value,
that value will be displayed in the echo area.  For example, after you
move point past <code>number</code>, you will see the following:

<pre>Result: 3 = C-c
</pre>

<p>This means the value of <code>number</code> is 3, which is <small>ASCII</small>
`control-c' (the third letter of the alphabet).

<p>You can continue moving through the code until you reach the line with
the error.  Before evaluation, that line looks like this:

<pre>=&gt;        -!-(1= number)))))               ; Error here.
</pre>

<p>When you press &lt;SPC&gt; once again, you will produce an error message
that says:

<pre>Symbol's function definition is void: 1=
</pre>

<p>This is the bug.

<p>Press <kbd>q</kbd> to quit Edebug.

<p>To remove instrumentation from a function definition, simply
re-evaluate it with a command that does not instrument it. 
For example, you could place your cursor after the definition's
closing parenthesis and type <kbd>C-x C-e</kbd>.

<p>Edebug does a great deal more than walk with you through a function. 
You can set it so it races through on its own, stopping only at an
error or at specified stopping points; you can cause it to display the
changing values of various expressions; you can find out how many
times a function is called, and more.

<p>Edebug is described in <a href="elisp.html#Edebug">edebug</a>.

<p><hr>
Node:<a name="Debugging%20Exercises">Debugging Exercises</a>,
Previous:<a rel=previous href="#edebug">edebug</a>,
Up:<a rel=up href="#Debugging">Debugging</a>
<br>

<h2>17.5 Debugging Exercises</h2>

<ul>
<li>Install the <code>count-words-region</code> function and then cause it to
enter the built-in debugger when you call it.  Run the command on a
region containing two words.  You will need to press <kbd>d</kbd> a
remarkable number of times.  On your system, is a `hook' called after
the command finishes?  (For information on hooks, see <a href="elisp.html#Command%20Loop%20Overview">Command Overview</a>.)

<li>Copy <code>count-words-region</code> into the <code>*scratch*</code> buffer,
instrument the function for Edebug, and walk through its execution. 
The function does not need to have a bug, although you can introduce
one if you wish.  If the function lacks a bug, the walk-through
completes without problems.

<li>While running Edebug, type <kbd>?</kbd> to see a list of all the Edebug commands. 
(The <code>global-edebug-prefix</code> is usually <kbd>C-x X</kbd>, i.e. 
<kbd>&lt;CTL&gt;-x</kbd> followed by an upper case <kbd>X</kbd>; use this prefix
for commands made outside of the Edebug debugging buffer.)

<li>In the Edebug debugging buffer, use the <kbd>p</kbd>
(<code>edebug-bounce-point</code>) command to see where in the region the
<code>count-words-region</code> is working.

<li>Move point to some spot further down function and then type the
<kbd>h</kbd> (<code>edebug-goto-here</code>) command to jump to that location.

<li>Use the <kbd>t</kbd> (<code>edebug-trace-mode</code>) command to cause Edebug to
walk through the function on its own; use an upper case <kbd>T</kbd> for
<code>edebug-Trace-fast-mode</code>.

<li>Set a breakpoint, then run Edebug in Trace mode until it reaches the
stopping point. 
</ul>

<p><hr>
Node:<a name="Conclusion">Conclusion</a>,
Next:<a rel=next href="#the-the">the-the</a>,
Previous:<a rel=previous href="#Debugging">Debugging</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>18 Conclusion</h1>

<p>We have now reached the end of this Introduction.  You have now
learned enough about programming in Emacs Lisp to set values, to write
simple <code>.emacs</code> files for yourself and your friends, and write
simple customizations and extensions to Emacs.

<p>This is a place to stop.  Or, if you wish, you can now go onward, and
teach yourself.

<p>You have learned some of the basic nuts and bolts of programming.  But
only some.  There are a great many more brackets and hinges that are
easy to use that we have not touched.

<p>A path you can follow right now lies among the sources to GNU Emacs
and in
<cite>The GNU Emacs Lisp Reference Manual</cite>.

<p>The Emacs Lisp sources are an adventure.  When you read the sources and
come across a function or expression that is unfamiliar, you need to
figure out or find out what it does.

<p>Go to the Reference Manual.  It is a thorough, complete, and fairly
easy-to-read description of Emacs Lisp.  It is written not only for
experts, but for people who know what you know.  (The <cite>Reference
Manual</cite> comes with the standard GNU Emacs distribution.  Like this
introduction, it comes as a Texinfo source file, so you can read it
on-line and as a typeset, printed book.)

<p>Go to the other on-line help that is part of GNU Emacs: the on-line
documentation for all functions, and <code>find-tags</code>, the program
that takes you to sources.

<p>Here is an example of how I explore the sources.  Because of its name,
<code>simple.el</code> is the file I looked at first, a long time ago.  As
it happens some of the functions in <code>simple.el</code> are complicated,
or at least look complicated at first sight.  The <code>open-line</code>
function, for example, looks complicated.

<p>You may want to walk through this function slowly, as we did with the
<code>forward-sentence</code> function. 
(See <a href="#forward-sentence">forward-sentence</a>.) 
Or you may want to skip that function and look at another, such as
<code>split-line</code>.  You don't need to read all the functions. 
According to <code>count-words-in-defun</code>, the <code>split-line</code>
function contains 27 words and symbols.

<p>Even though it is short, <code>split-line</code> contains four expressions
we have not studied: <code>skip-chars-forward</code>, <code>indent-to</code>,
<code>current-column</code> and <code>?\n</code>.

<p>Consider the <code>skip-chars-forward</code> function.  (It is part of the
function definition for <code>back-to-indentation</code>, which is shown in
<a href="#Review">Review</a>.)

<p>In GNU Emacs, you can find out more about <code>skip-chars-forward</code> by
typing <kbd>C-h f</kbd> (<code>describe-function</code>) and the name of the
function.  This gives you the function documentation.

<p>You may be able to guess what is done by a well named function such as
<code>indent-to</code>; or you can look it up, too.  Incidentally, the
<code>describe-function</code> function itself is in <code>help.el</code>; it is
one of those long, but decipherable functions.  You can look up
<code>describe-function</code> using the <kbd>C-h f</kbd> command!

<p>In this instance, since the code is Lisp, the <code>*Help*</code> buffer
contains the name of the library containing the function's source. 
You can put point over the name of the library and press the RET key,
which in this situation is bound to <code>help-follow</code>, and be taken
directly to the source, in the same way as <kbd>M-.</kbd>
(<code>find-tag</code>).

<p>The definition for <code>describe-function</code> illustrates how to
customize the <code>interactive</code> expression without using the standard
character codes; and it shows how to create a temporary buffer.

<p>(The <code>indent-to</code> function is written in C rather than Emacs Lisp;
it is a `built-in' function.  <code>help-follow</code> only provides you
with the documentation of a built-in function; it does not take you to
the source.  But <code>find-tag</code> will take you to the source, if
properly set up.)

<p>You can look at a function's source using <code>find-tag</code>, which is
bound to <kbd>M-.</kbd>  Finally, you can find out what the Reference
Manual has to say by visiting the manual in Info, and typing <kbd>i</kbd>
(<code>Info-index</code>) and the name of the function, or by looking up
<code>skip-chars-forward</code> in the index to a printed copy of the
manual.

<p>Similarly, you can find out what is meant by <code>?\n</code>.  You can try
using <code>Info-index</code> with <code>?\n</code>.  It turns out that this
action won't help; but don't give up.  If you search the index for
<code>\n</code> without the <code>?</code>, you will be taken directly to the
relevant section of the manual.  (See <a href="elisp.html#Character%20Type">Character Type</a>.  <code>?\n</code> stands
for the newline character.)

<p>Other interesting source files include <code>paragraphs.el</code>,
<code>loaddefs.el</code>, and <code>loadup.el</code>.  The <code>paragraphs.el</code>
file includes short, easily understood functions as well as longer
ones.  The <code>loaddefs.el</code> file contains the many standard
autoloads and many keymaps.  I have never looked at it all; only at
parts.  <code>loadup.el</code> is the file that loads the standard parts of
Emacs; it tells you a great deal about how Emacs is built. 
(See <a href="elisp.html#Building%20Emacs">Building Emacs</a>, for more about building.)

<p>As I said, you have learned some nuts and bolts; however, and very
importantly, we have hardly touched major aspects of programming; I
have said nothing about how to sort information, except to use the
predefined <code>sort</code> function; I have said nothing about how to store
information, except to use variables and lists; I have said nothing
about how to write programs that write programs.  These are topics for
another, and different kind of book, a different kind of learning.

<p>What you have done is learn enough for much practical work with GNU
Emacs.  What you have done is get started.  This is the end of a
beginning.

<p><hr>
Node:<a name="the-the">the-the</a>,
Next:<a rel=next href="#Kill%20Ring">Kill Ring</a>,
Previous:<a rel=previous href="#Conclusion">Conclusion</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>Appendix A The <code>the-the</code> Function</h1>

<p>Sometimes when you you write text, you duplicate words--as with "you
you" near the beginning of this sentence.  I find that most
frequently, I duplicate "the'; hence, I call the function for
detecting duplicated words, <code>the-the</code>.

<p>As a first step, you could use the following regular expression to
search for duplicates:

<pre>\\(\\w+[ \t\n]+\\)\\1
</pre>

<p>This regexp matches one or more word-constituent characters followed
by one or more spaces, tabs, or newlines.  However, it does not detect
duplicated words on different lines, since the ending of the first
word, the end of the line, is different from the ending of the second
word, a space.  (For more information about regular expressions, see
<a href="#Regexp%20Search">Regular Expression Searches</a>, as well as
<a href="emacs.html#Syntax%20of%20Regular%20Expressions">Regexps</a>, and <a href="elisp.html#Regular%20Expressions">Regular Expressions</a>.)

<p>You might try searching just for duplicated word-constituent
characters but that does not work since the pattern detects doubles
such as the two occurrences of `th' in `with the'.

<p>Another possible regexp searches for word-constituent characters
followed by non-word-constituent characters, reduplicated.  Here,
<code>\\w+</code> matches one or more word-constituent characters and
<code>\\W*</code> matches zero or more non-word-constituent characters.

<pre>\\(\\(\\w+\\)\\W*\\)\\1
</pre>

<p>Again, not useful.

<p>Here is the pattern that I use.  It is not perfect, but good enough. 
<code>\\b</code> matches the empty string, provided it is at the beginning
or end of a word; <code>[^@&nbsp;\n\t]+</code> matches one or more occurrences of
any characters that are <em>not</em> an @-sign, space, newline, or tab.

<pre>\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b
</pre>

<p>One can write more complicated expressions, but I found that this
expression is good enough, so I use it.

<p>Here is the <code>the-the</code> function, as I include it in my
<code>.emacs</code> file, along with a handy global key binding:

<pre>(defun the-the ()
  "Search forward for for a duplicated word."
  (interactive)
  (message "Searching for for duplicated words ...")
  (push-mark)
  ;; This regexp is not perfect
  ;; but is fairly good over all:
  (if (re-search-forward
       "\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b" nil 'move)
      (message "Found duplicated word.")
    (message "End of buffer")))

;; Bind `the-the' to  C-c \
(global-set-key "\C-c\\" 'the-the)
</pre>

<br><p>
<p>Here is test text:

<pre>one two two three four five
five six seven
</pre>

<p>You can substitute the other regular expressions shown above in the
function definition and try each of them on this list.

<p><hr>
Node:<a name="Kill%20Ring">Kill Ring</a>,
Next:<a rel=next href="#Full%20Graph">Full Graph</a>,
Previous:<a rel=previous href="#the-the">the-the</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>Appendix B Handling the Kill Ring</h1>

<p>The kill ring is a list that is transformed into a ring by the
workings of the <code>rotate-yank-pointer</code> function.  The <code>yank</code>
and <code>yank-pop</code> commands use the <code>rotate-yank-pointer</code>
function.  This appendix describes the <code>rotate-yank-pointer</code>
function as well as both the <code>yank</code> and the <code>yank-pop</code>
commands.

<ul>
<li><a href="#rotate-yank-pointer">rotate-yank-pointer</a>:          Move a pointer along a list and around. 
<li><a href="#yank">yank</a>:                         Paste a copy of a clipped element. 
<li><a href="#yank-pop">yank-pop</a>:                     Insert first element pointed to. 
</ul>

<p><hr>
Node:<a name="rotate-yank-pointer">rotate-yank-pointer</a>,
Next:<a rel=next href="#yank">yank</a>,
Previous:<a rel=previous href="#Kill%20Ring">Kill Ring</a>,
Up:<a rel=up href="#Kill%20Ring">Kill Ring</a>
<br>

<h2>B.1 The <code>rotate-yank-pointer</code> Function</h2>

<p>The <code>rotate-yank-pointer</code> function changes the element in the kill
ring to which <code>kill-ring-yank-pointer</code> points.  For example, it can
change  <code>kill-ring-yank-pointer</code> from pointing to the second
element to point to the third element.

<p>Here is the code for <code>rotate-yank-pointer</code>:

<pre>(defun rotate-yank-pointer (arg)
  "Rotate the yanking point in the kill ring."
  (interactive "p")
  (let ((length (length kill-ring)))
    (if (zerop length)
        ;; then-part
        (error "Kill ring is empty")
      ;; else-part
      (setq kill-ring-yank-pointer
            (nthcdr (% (+ arg
                          (- length
                             (length
                              kill-ring-yank-pointer)))
                       length)
                    kill-ring)))))
</pre>

<ul>
<li><a href="#Understanding%20rotate-yk-ptr">Understanding rotate-yk-ptr</a>: 
<li><a href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>:           The body of <code>rotate-yank-pointer</code>. 
</ul>

<p><hr>
Node:<a name="Understanding%20rotate-yk-ptr">Understanding rotate-yk-ptr</a>,
Next:<a rel=next href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>,
Previous:<a rel=previous href="#rotate-yank-pointer">rotate-yank-pointer</a>,
Up:<a rel=up href="#rotate-yank-pointer">rotate-yank-pointer</a>
<br>

<h3><code>rotate-yank-pointer</code> in Outline</h3>

<p>The <code>rotate-yank-pointer</code> function looks complex, but as usual,
it can be understood by taking it apart piece by piece.  First look at
it in skeletal form:

<pre>(defun rotate-yank-pointer (arg)
  "Rotate the yanking point in the kill ring."
  (interactive "p")
  (let <var>varlist</var>
    <var>body</var><small>...</small>)
</pre>

<p>This function takes one argument, called <code>arg</code>.  It has a brief
documentation string; and it is interactive with a small <code>p</code>, which
means that the argument must be a processed prefix passed to the
function as a number.

<p>The body of the function definition is a <code>let</code> expression, which
itself has a body as well as a <var>varlist</var>.

<p>The <code>let</code> expression declares a variable that will be only usable
within the bounds of this function.  This variable is called
<code>length</code> and is bound to a value that is equal to the number of
items in the kill ring.  This is done by using the function called
<code>length</code>.  (Note that this function has the same name as the
variable called <code>length</code>; but one use of the word is to name the
function and the other is to name the variable.  The two are quite
distinct.  Similarly, an English speaker will distinguish between the
meanings of the word <code>ship</code> when he says: "I must ship this package
immediately." and "I must get aboard the ship immediately.")

<p>The function <code>length</code> tells the number of items there are in a list,
so <code>(length kill-ring)</code> returns the number of items there are in the
kill ring.

<p><hr>
Node:<a name="rotate-yk-ptr%20body">rotate-yk-ptr body</a>,
Previous:<a rel=previous href="#Understanding%20rotate-yk-ptr">Understanding rotate-yk-ptr</a>,
Up:<a rel=up href="#rotate-yank-pointer">rotate-yank-pointer</a>
<br>

<h3>B.1.1 The Body of <code>rotate-yank-pointer</code></h3>

<p>The body of <code>rotate-yank-pointer</code> is a <code>let</code> expression and
the body of the <code>let</code> expression is an <code>if</code> expression.

<p>The purpose of the <code>if</code> expression is to find out whether there is
anything in the kill ring.  If the kill ring is empty, the <code>error</code>
function stops evaluation of the function and prints a message in the
echo area.  On the other hand, if the kill ring has something in it, the
work of the function is done.

<p>Here is the if-part and then-part of the <code>if</code> expression:

<pre>(if (zerop length)                      ; if-part
    (error "Kill ring is empty")        ; then-part
  <small>...</small>
</pre>

<p>If there is not anything in the kill ring, its length must be zero and
an error message sent to the user: <code>Kill ring is empty</code>.  The
<code>if</code> expression uses the function <code>zerop</code> which returns true
if the value it is testing is zero.  When <code>zerop</code> tests true, the
then-part of the <code>if</code> is evaluated.  The then-part is a list
starting with the function <code>error</code>, which is a function that is
similar to the <code>message</code> function (see <a href="#message">message</a>), in that it
prints a one-line message in the echo area.  However, in addition to
printing a message, <code>error</code> also stops evaluation of the function
within which it is embedded.  This means that the rest of the function
will not be evaluated if the length of the kill ring is zero.

<ul>
<li><a href="#Digression%20concerning%20error">Digression concerning error</a>:   How to mislead humans, but not computers. 
<li><a href="#rotate-yk-ptr%20else-part">rotate-yk-ptr else-part</a>:      The else-part of the <code>if</code> expression. 
<li><a href="#Remainder%20Function">Remainder Function</a>:           The remainder, <code>%</code>, function. 
<li><a href="#rotate-yk-ptr%20remainder">rotate-yk-ptr remainder</a>:      Using <code>%</code> in <code>rotate-yank-pointer</code>. 
<li><a href="#kill-rng-yk-ptr%20last%20elt">kill-rng-yk-ptr last elt</a>:     Pointing to the last element. 
</ul>

<p><hr>
Node:<a name="Digression%20concerning%20error">Digression concerning error</a>,
Next:<a rel=next href="#rotate-yk-ptr%20else-part">rotate-yk-ptr else-part</a>,
Previous:<a rel=previous href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>,
Up:<a rel=up href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>
<br>

<h4>Digression about the word `error'</h4>

<p>(In my opinion, it is slightly misleading, at least to humans, to use
the term `error' as the name of the <code>error</code> function.  A better
term would be `cancel'.  Strictly speaking, of course, you cannot
point to, much less rotate a pointer to a list that has no length, so
from the point of view of the computer, the word `error' is correct. 
But a human expects to attempt this sort of thing, if only to find out
whether the kill ring is full or empty.  This is an act of
exploration.

<p>(From the human point of view, the act of exploration and discovery is
not necessarily an error, and therefore should not be labelled as one,
even in the bowels of a computer.  As it is, the code in Emacs implies
that a human who is acting virtuously, by exploring his or her
environment, is making an error.  This is bad.  Even though the computer
takes the same steps as it does when there is an `error', a term such as
`cancel' would have a clearer connotation.)

<p><hr>
Node:<a name="rotate-yk-ptr%20else-part">rotate-yk-ptr else-part</a>,
Next:<a rel=next href="#Remainder%20Function">Remainder Function</a>,
Previous:<a rel=previous href="#Digression%20concerning%20error">Digression concerning error</a>,
Up:<a rel=up href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>
<br>

<h4>The else-part of the <code>if</code> expression</h4>

<p>The else-part of the <code>if</code> expression is dedicated to setting the
value of <code>kill-ring-yank-pointer</code> when the kill ring has something
in it.  The code looks like this:

<pre>(setq kill-ring-yank-pointer
      (nthcdr (% (+ arg
                    (- length
                       (length kill-ring-yank-pointer)))
                 length)
              kill-ring)))))
</pre>

<p>This needs some examination.  Clearly, <code>kill-ring-yank-pointer</code>
is being set to be equal to some <small>CDR</small> of the kill ring, using the
<code>nthcdr</code> function that is described in an earlier section. 
(See <a href="#copy-region-as-kill">copy-region-as-kill</a>.)  But exactly how does it do this?

<p>Before looking at the details of the code let's first consider the
purpose of the <code>rotate-yank-pointer</code> function.

<p>The <code>rotate-yank-pointer</code> function changes what
<code>kill-ring-yank-pointer</code> points to.  If
<code>kill-ring-yank-pointer</code> starts by pointing to the first element
of a list, a call to <code>rotate-yank-pointer</code> causes it to point to
the second element; and if <code>kill-ring-yank-pointer</code> points to the
second element, a call to <code>rotate-yank-pointer</code> causes it to
point to the third element.  (And if <code>rotate-yank-pointer</code> is
given an argument greater than 1, it jumps the pointer that many
elements.)

<p>The <code>rotate-yank-pointer</code> function uses <code>setq</code> to reset what
the <code>kill-ring-yank-pointer</code> points to.  If
<code>kill-ring-yank-pointer</code> points to the first element of the kill
ring, then, in the simplest case, the <code>rotate-yank-pointer</code>
function must cause it to point to the second element.  Put another
way, <code>kill-ring-yank-pointer</code> must be reset to have a value equal
to the <small>CDR</small> of the kill ring.

<p>That is, under these circumstances,

<pre>(setq kill-ring-yank-pointer
   ("some text" "a different piece of text" "yet more text"))

(setq kill-ring
   ("some text" "a different piece of text" "yet more text"))
</pre>

<p>the code should do this:

<pre>(setq kill-ring-yank-pointer (cdr kill-ring))
</pre>

<p>As a result, the <code>kill-ring-yank-pointer</code> will look like this:

<pre>kill-ring-yank-pointer
     =&gt; ("a different piece of text" "yet more text"))
</pre>

<p>The actual <code>setq</code> expression uses the <code>nthcdr</code> function to do
the job.

<p>As we have seen before (see <a href="#nthcdr">nthcdr</a>), the <code>nthcdr</code> function
works by repeatedly taking the <small>CDR</small> of a list--it takes the
<small>CDR</small> of the <small>CDR</small> of the <small>CDR</small> <small>...</small>

<p>The two following expressions produce the same result:

<pre>(setq kill-ring-yank-pointer (cdr kill-ring))

(setq kill-ring-yank-pointer (nthcdr 1 kill-ring))
</pre>

<p>In the <code>rotate-yank-pointer</code> function, however, the first
argument to <code>nthcdr</code> is a rather complex looking expression with
lots of arithmetic inside of it:

<pre>(% (+ arg
      (- length
         (length kill-ring-yank-pointer)))
   length)
</pre>

<p>As usual, we need to look at the most deeply embedded expression first
and then work our way towards the light.

<p>The most deeply embedded expression is <code>(length
kill-ring-yank-pointer)</code>.  This finds the length of the current value of
the <code>kill-ring-yank-pointer</code>.  (Remember that the
<code>kill-ring-yank-pointer</code> is the name of a variable whose value is a
list.)

<p>The measurement of the length is inside the expression:

<pre>(- length (length kill-ring-yank-pointer))
</pre>

<p>In this expression, the first <code>length</code> is the variable that was
assigned the length of the kill ring in the <code>let</code> statement at the
beginning of the function.  (One might think this function would be
clearer if the variable <code>length</code> were named
<code>length-of-kill-ring</code> instead; but if you look at the text of the
whole function, you will see that it is so short that naming this
variable <code>length</code> is not a bother, unless you are pulling the
function apart into very tiny pieces as we are doing here.)

<p>So the line <code>(- length (length kill-ring-yank-pointer))</code> tells the
difference between the length of the kill ring and the length of the list
whose name is <code>kill-ring-yank-pointer</code>.

<p>To see how all this fits into the <code>rotate-yank-pointer</code>
function, let's begin by analyzing the case where
<code>kill-ring-yank-pointer</code> points to the first element of the kill
ring, just as <code>kill-ring</code> does, and see what happens when
<code>rotate-yank-pointer</code> is called with an argument of 1.

<p>The variable <code>length</code> and the value of the expression
<code>(length kill-ring-yank-pointer)</code> will be the same since the
variable <code>length</code> is the length of the kill ring and the
<code>kill-ring-yank-pointer</code> is pointing to the whole kill ring. 
Consequently, the value of

<pre>(- length (length kill-ring-yank-pointer))
</pre>

<p>will be zero.  Since the value of <code>arg</code> will be 1, this will mean
that the value of the whole expression

<pre>(+ arg (- length (length kill-ring-yank-pointer)))
</pre>

<p>will be 1.

<p>Consequently, the argument to <code>nthcdr</code> will be found as the result of
the expression

<pre>(% 1 length)
</pre>

<p><hr>
Node:<a name="Remainder%20Function">Remainder Function</a>,
Next:<a rel=next href="#rotate-yk-ptr%20remainder">rotate-yk-ptr remainder</a>,
Previous:<a rel=previous href="#rotate-yk-ptr%20else-part">rotate-yk-ptr else-part</a>,
Up:<a rel=up href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>
<br>

<h4>The <code>%</code> remainder function</h4>

<p>To understand <code>(% 1 length)</code>, we need to understand <code>%</code>. 
According to its documentation (which I just found by typing <kbd>C-h
f <kbd>%</kbd> &lt;RET&gt;</kbd>), the <code>%</code> function returns the remainder of
its first argument divided by its second argument.  For example, the
remainder of 5 divided by 2 is 1.  (2 goes into 5 twice with a
remainder of 1.)

<p>What surprises people who don't often do arithmetic is that a smaller
number can be divided by a larger number and have a remainder.  In the
example we just used, 5 was divided by 2.  We can reverse that and ask,
what is the result of dividing 2 by 5?  If you can use fractions, the
answer is obviously 2/5 or .4; but if, as here, you can only use whole
numbers, the result has to be something different.  Clearly, 5 can go into
2 zero times, but what of the remainder?  To see what the answer is,
consider a case that has to be familiar from childhood:

<ul>
<li>5 divided by 5 is 1 with a remainder of 0;

<li>6 divided by 5 is 1 with a remainder of 1;

<li>7 divided by 5 is 1 with a remainder of 2.

<li>Similarly, 10 divided by 5 is 2 with a remainder of 0;

<li>11 divided by 5 is 2 with a remainder of 1;

<li>12 divided by 5 is 1 with a remainder of 2. 
</ul>

<p>By considering the cases as parallel, we can see that

<ul>
<li>zero divided by 5 must be zero with a remainder of zero;

<li>1 divided by 5 must be zero with a remainder of 1;

<li>2 divided by 5 must be zero with a remainder of 2;
</ul>

<p>and so on.

<p>So, in this code, if the value of <code>length</code> is 5, then the result of
evaluating

<pre>(% 1 5)
</pre>

<p>is 1.  (I just checked this by placing the cursor after the expression
and typing <kbd>C-x C-e</kbd>.  Indeed, 1 is printed in the echo area.)

<p><hr>
Node:<a name="rotate-yk-ptr%20remainder">rotate-yk-ptr remainder</a>,
Next:<a rel=next href="#kill-rng-yk-ptr%20last%20elt">kill-rng-yk-ptr last elt</a>,
Previous:<a rel=previous href="#Remainder%20Function">Remainder Function</a>,
Up:<a rel=up href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>
<br>

<h4>Using <code>%</code> in <code>rotate-yank-pointer</code></h4>

<p>When the <code>kill-ring-yank-pointer</code> points to the
beginning of the kill ring, and the argument passed to
<code>rotate-yank-pointer</code> is 1, the <code>%</code> expression returns 1:

<pre>(- length (length kill-ring-yank-pointer))
     =&gt; 0
</pre>

<p>therefore,

<pre>(+ arg (- length (length kill-ring-yank-pointer)))
     =&gt; 1
</pre>

<p>and consequently:

<pre>(% (+ arg (- length (length kill-ring-yank-pointer)))
   length)
     =&gt; 1
</pre>

<p>regardless of the value of <code>length</code>.

<p>As a result of this, the <code>setq kill-ring-yank-pointer</code> expression
simplifies to:

<pre>(setq kill-ring-yank-pointer (nthcdr 1 kill-ring))
</pre>

<p>What it does is now easy to understand.  Instead of pointing as it did
to the first element of the kill ring, the
<code>kill-ring-yank-pointer</code> is set to point to the second element.

<p>Clearly, if the argument passed to <code>rotate-yank-pointer</code> is two, then
the <code>kill-ring-yank-pointer</code> is set to <code>(nthcdr 2 kill-ring)</code>;
and so on for different values of the argument.

<p>Similarly, if the <code>kill-ring-yank-pointer</code> starts out pointing to
the second element of the kill ring, its length is shorter than the
length of the kill ring by 1, so the computation of the remainder is
based on the expression <code>(% (+ arg 1) length)</code>.  This means that
the <code>kill-ring-yank-pointer</code> is moved from the second element of
the kill ring to the third element if the argument passed to
<code>rotate-yank-pointer</code> is 1.

<p><hr>
Node:<a name="kill-rng-yk-ptr%20last%20elt">kill-rng-yk-ptr last elt</a>,
Previous:<a rel=previous href="#rotate-yk-ptr%20remainder">rotate-yk-ptr remainder</a>,
Up:<a rel=up href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>
<br>

<h4>Pointing to the last element</h4>

<p>The final question is, what happens if the <code>kill-ring-yank-pointer</code>
is set to the <em>last</em> element of the kill ring?  Will a call to
<code>rotate-yank-pointer</code> mean that nothing more can be taken from the
kill ring?  The answer is no.  What happens is different and useful. 
The <code>kill-ring-yank-pointer</code> is set to point to the beginning of
the kill ring instead.

<p>Let's see how this works by looking at the code, assuming the length of the
kill ring is 5 and the argument passed to <code>rotate-yank-pointer</code> is 1. 
When the <code>kill-ring-yank-pointer</code> points to the last element of
the kill ring, its length is 1.  The code looks like this:

<pre>(% (+ arg (- length (length kill-ring-yank-pointer))) length)
</pre>

<p>When the variables are replaced by their numeric values, the expression
looks like this:

<pre>(% (+ 1 (- 5 1)) 5)
</pre>

<p>This expression can be evaluated by looking at the most embedded inner
expression first and working outwards:  The value of <code>(- 5 1)</code> is 4;
the sum of <code>(+ 1 4)</code> is 5; and the remainder of dividing 5 by 5 is
zero.  So what <code>rotate-yank-pointer</code> will do is

<pre>(setq kill-ring-yank-pointer (nthcdr 0 kill-ring))
</pre>

<p>which will set the <code>kill-ring-yank-pointer</code> to point to the beginning
of the kill ring.

<p>So what happens with successive calls to <code>rotate-yank-pointer</code> is that
it moves the <code>kill-ring-yank-pointer</code> from element to element in the
kill ring until it reaches the end; then it jumps back to the beginning. 
And this is why the kill ring is called a ring, since by jumping back to
the beginning, it is as if the list has no end!  (And what is a ring, but
an entity with no end?)

<p><hr>
Node:<a name="yank">yank</a>,
Next:<a rel=next href="#yank-pop">yank-pop</a>,
Previous:<a rel=previous href="#rotate-yank-pointer">rotate-yank-pointer</a>,
Up:<a rel=up href="#Kill%20Ring">Kill Ring</a>
<br>

<h2>B.2 <code>yank</code></h2>

<p>After learning about <code>rotate-yank-pointer</code>, the code for the
<code>yank</code> function is almost easy.  It has only one tricky part, which is
the computation of the argument to be passed to <code>rotate-yank-pointer</code>.

<p>The code looks like this:

<pre>(defun yank (&amp;optional arg)
  "Reinsert the last stretch of killed text.
More precisely, reinsert the stretch of killed text most
recently killed OR yanked.
With just C-U as argument, same but put point in front
(and mark at end).  With argument n, reinsert the nth
most recently killed stretch of killed text.
See also the command \\[yank-pop]."

  (interactive "*P")
  (rotate-yank-pointer (if (listp arg) 0
                         (if (eq arg '-) -1
                           (1- arg))))
  (push-mark (point))
  (insert (car kill-ring-yank-pointer))
  (if (consp arg)
      (exchange-point-and-mark)))
</pre>

<p>Glancing over this code, we can understand the last few lines readily
enough.  The mark is pushed, that is, remembered; then the first element
(the <small>CAR</small>) of what the <code>kill-ring-yank-pointer</code> points to is
inserted; and then, if the argument passed the function is a
<code>cons</code>, point and mark are exchanged so the point is put in the
front of the inserted text rather than at the end.  This option is
explained in the documentation.  The function itself is interactive with
<code>"*P"</code>.  This means it will not work on a read-only buffer, and that
the unprocessed prefix argument is passed to the function.

<ul>
<li><a href="#rotate-yk-ptr%20arg">rotate-yk-ptr arg</a>:            Pass the argument to <code>rotate-yank-pointer</code>. 
<li><a href="#rotate-yk-ptr%20negative%20arg">rotate-yk-ptr negative arg</a>:   Pass a negative argument. 
</ul>

<p><hr>
Node:<a name="rotate-yk-ptr%20arg">rotate-yk-ptr arg</a>,
Next:<a rel=next href="#rotate-yk-ptr%20negative%20arg">rotate-yk-ptr negative arg</a>,
Previous:<a rel=previous href="#yank">yank</a>,
Up:<a rel=up href="#yank">yank</a>
<br>

<h4>Passing the argument</h4>

<p>The hard part of <code>yank</code> is understanding the computation that
determines the value of the argument passed to
<code>rotate-yank-pointer</code>.  Fortunately, it is not so difficult as it
looks at first sight.

<p>What happens is that the result of evaluating one or both of the
<code>if</code> expressions will be a number and that number will be the
argument passed to <code>rotate-yank-pointer</code>.

<p>Laid out with comments, the code looks like this:

<pre>(if (listp arg)                         ; if-part
    0                                   ; then-part
  (if (eq arg '-)                       ; else-part, inner if
      -1                                ; inner if's then-part
    (1- arg))))                         ; inner if's else-part
</pre>

<p>This code consists of two <code>if</code> expression, one the else-part of
the other.

<p>The first or outer <code>if</code> expression tests whether the argument
passed to <code>yank</code> is a list.  Oddly enough, this will be true if
<code>yank</code> is called without an argument--because then it will be
passed the value of <code>nil</code> for the optional argument and an
evaluation of <code>(listp nil)</code> returns true!  So, if no argument is
passed to <code>yank</code>, the argument passed to
<code>rotate-yank-pointer</code> inside of <code>yank</code> is zero.  This means
the pointer is not moved and the first element to which
<code>kill-ring-yank-pointer</code> points is inserted, as we expect. 
Similarly, if the argument for <code>yank</code> is <kbd>C-u</kbd>, this will be
read as a list, so again, a zero will be passed to
<code>rotate-yank-pointer</code>.  (<kbd>C-u</kbd> produces an unprocessed prefix
argument of <code>(4)</code>, which is a list of one element.)  At the same
time, later in the function, this argument will be read as a
<code>cons</code> so point will be put in the front and mark at the end of
the insertion.  (The <code>P</code> argument to <code>interactive</code> is
designed to provide these values for the case when an optional
argument is not provided or when it is <kbd>C-u</kbd>.)

<p>The then-part of the outer <code>if</code> expression handles the case when
there is no argument or when it is <kbd>C-u</kbd>.  The else-part handles the
other situations.  The else-part is itself another <code>if</code> expression.

<p>The inner <code>if</code> expression tests whether the argument is a minus
sign.  (This is done by pressing the &lt;META&gt; and <kbd>-</kbd> keys at the
same time, or the &lt;ESC&gt; key and then the <kbd>-</kbd> key).  In this
case, the <code>rotate-yank-pointer</code> function is passed <kbd>-1</kbd> as an
argument.  This moves the <code>kill-ring-yank-pointer</code> backwards, which
is what is desired.

<p>If the true-or-false-test of the inner <code>if</code> expression is false
(that is, if the argument is not a minus sign), the else-part of the
expression is evaluated.  This is the expression <code>(1- arg)</code>. 
Because of the two <code>if</code> expressions, it will only occur when the
argument is a positive number or when it is a negative number (not
just a minus sign on its own).  What <code>(1- arg)</code> does is decrement
the number and return it.  (The <code>1-</code> function subtracts one from
its argument.)  This means that if the argument to
<code>rotate-yank-pointer</code> is 1, it is reduced to zero, which means
the first element to which <code>kill-ring-yank-pointer</code> points is
yanked back, as you would expect.

<p><hr>
Node:<a name="rotate-yk-ptr%20negative%20arg">rotate-yk-ptr negative arg</a>,
Previous:<a rel=previous href="#rotate-yk-ptr%20arg">rotate-yk-ptr arg</a>,
Up:<a rel=up href="#yank">yank</a>
<br>

<h4>Passing a negative argument</h4>

<p>Finally, the question arises, what happens if either the remainder
function, <code>%</code>, or the <code>nthcdr</code> function is passed a negative
argument, as they quite well may?

<p>The answers can be found by a quick test.  When <code>(% -1 5)</code> is
evaluated, a negative number is returned; and if <code>nthcdr</code> is
called with a negative number, it returns the same value as if it were
called with a first argument of zero.  This can be seen be evaluating
the following code.

<p>Here the <code>=&gt;</code> points to the result of evaluating the code
preceding it.  This was done by positioning the cursor after the code
and typing <kbd>C-x C-e</kbd> (<code>eval-last-sexp</code>) in the usual fashion. 
You can do this if you are reading this in Info inside of GNU Emacs.

<pre>(% -1 5)
     =&gt; -1

(setq animals '(cats dogs elephants))
     =&gt; (cats dogs elephants)

(nthcdr 1 animals)
     =&gt; (dogs elephants)

(nthcdr 0 animals)
     =&gt; (cats dogs elephants)

(nthcdr -1 animals)
     =&gt; (cats dogs elephants)
</pre>

<p>So, if a minus sign or a negative number is passed to <code>yank</code>, the
<code>kill-ring-yank-point</code> is rotated backwards until it reaches the
beginning of the list.  Then it stays there.  Unlike the other case,
when it jumps from the end of the list to the beginning of the list,
making a ring, it stops.  This makes sense.  You often want to get back
to the most recently clipped out piece of text, but you don't usually
want to insert text from as many as thirty kill commands ago.  So you
need to work through the ring to get to the end, but won't cycle around
it inadvertently if you are trying to come back to the beginning.

<p>Incidentally, any number passed to <code>yank</code> with a minus sign
preceding it will be treated as -1.  This is evidently a
simplification for writing the program.  You don't need to jump back
towards the beginning of the kill ring more than one place at a time
and doing this is easier than writing a function to determine the
magnitude of the number that follows the minus sign.

<p><hr>
Node:<a name="yank-pop">yank-pop</a>,
Previous:<a rel=previous href="#yank">yank</a>,
Up:<a rel=up href="#Kill%20Ring">Kill Ring</a>
<br>

<h2>B.3 <code>yank-pop</code></h2>

<p>After understanding <code>yank</code>, the <code>yank-pop</code> function is easy. 
Leaving out the documentation to save space, it looks like this:

<pre>(defun yank-pop (arg)
  (interactive "*p")
  (if (not (eq last-command 'yank))
      (error "Previous command was not a yank"))
  (setq this-command 'yank)
  (let ((before (&lt; (point) (mark))))
    (delete-region (point) (mark))
    (rotate-yank-pointer arg)
    (set-mark (point))
    (insert (car kill-ring-yank-pointer))
    (if before (exchange-point-and-mark))))
</pre>

<p>The function is interactive with a small <code>p</code> so the prefix
argument is processed and passed to the function.  The command can
only be used after a previous yank; otherwise an error message is
sent.  This check uses the variable <code>last-command</code> which is
discussed elsewhere.  (See <a href="#copy-region-as-kill">copy-region-as-kill</a>.)

<p>The <code>let</code> clause sets the variable <code>before</code> to true or false
depending whether point is before or after mark and then the region
between point and mark is deleted.  This is the region that was just
inserted by the previous yank and it is this text that will be
replaced.  Next the <code>kill-ring-yank-pointer</code> is rotated so that
the previously inserted text is not reinserted yet again.  Mark is set
at the beginning of the place the new text will be inserted and then
the first element to which <code>kill-ring-yank-pointer</code> points is
inserted.  This leaves point after the new text.  If in the previous
yank, point was left before the inserted text, point and mark are now
exchanged so point is again left in front of the newly inserted text. 
That is all there is to it!

<p><hr>
Node:<a name="Full%20Graph">Full Graph</a>,
Next:<a rel=next href="#GNU%20Free%20Documentation%20License">GNU Free Documentation License</a>,
Previous:<a rel=previous href="#Kill%20Ring">Kill Ring</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>Appendix C A Graph with Labelled Axes</h1>

<p>Printed axes help you understand a graph.  They convey scale.  In an
earlier chapter (see <a href="#Readying%20a%20Graph">Readying a Graph</a>), we
wrote the code to print the body of a graph.  Here we write the code
for printing and labelling vertical and horizontal axes, along with the
body itself.

<ul>
<li><a href="#Labelled%20Example">Labelled Example</a>: 
<li><a href="#print-graph%20Varlist">print-graph Varlist</a>:          <code>let</code> expression in <code>print-graph</code>. 
<li><a href="#print-Y-axis">print-Y-axis</a>:                 Print a label for the vertical axis. 
<li><a href="#print-X-axis">print-X-axis</a>:                 Print a horizontal label. 
<li><a href="#Print%20Whole%20Graph">Print Whole Graph</a>:            The function to print a complete graph. 
</ul>

<p><hr>
Node:<a name="Labelled%20Example">Labelled Example</a>,
Next:<a rel=next href="#print-graph%20Varlist">print-graph Varlist</a>,
Previous:<a rel=previous href="#Full%20Graph">Full Graph</a>,
Up:<a rel=up href="#Full%20Graph">Full Graph</a>
<br>

<h2>Labelled Example Graph</h2>

<p>Since insertions fill a buffer to the right and below point, the new
graph printing function should first print the Y or vertical axis,
then the body of the graph, and finally the X or horizontal axis. 
This sequence lays out for us the contents of the function:

<ol type=1 start=1>
</p><li>Set up code.

<li>Print Y axis.

<li>Print body of graph.

<li>Print X axis.
</ol>

<p>Here is an example of how a finished graph should look:

<pre>    10 -
                  *
                  *  *
                  *  **
                  *  ***
     5 -      *   *******
            * *** *******
            *************
          ***************
     1 - ****************
         |   |    |    |
         1   5   10   15
</pre>

<p>In this graph, both the vertical and the horizontal axes are labelled
with numbers.  However, in some graphs, the horizontal axis is time
and would be better labelled with months, like this:

<pre>     5 -      *
            * ** *
            *******
          ********** **
     1 - **************
         |    ^      |
         Jan  June   Jan
</pre>

<p>Indeed, with a little thought, we can easily come up with a variety of
vertical and horizontal labelling schemes.  Our task could become
complicated.  But complications breed confusion.  Rather than permit
this, it is better choose a simple labelling scheme for our first
effort, and to modify or replace it later.

<p>These considerations suggest the following outline for the
<code>print-graph</code> function:

<pre>(defun print-graph (numbers-list)
  "<var>documentation</var><small>...</small>"
  (let ((height  <small>...</small>
        <small>...</small>))
    (print-Y-axis height <small>...</small> )
    (graph-body-print numbers-list)
    (print-X-axis <small>...</small> )))
</pre>

<p>We can work on each part of the <code>print-graph</code> function definition
in turn.

<p><hr>
Node:<a name="print-graph%20Varlist">print-graph Varlist</a>,
Next:<a rel=next href="#print-Y-axis">print-Y-axis</a>,
Previous:<a rel=previous href="#Labelled%20Example">Labelled Example</a>,
Up:<a rel=up href="#Full%20Graph">Full Graph</a>
<br>

<h2>C.1 The <code>print-graph</code> Varlist</h2>

<p>In writing the <code>print-graph</code> function, the first task is to write
the varlist in the <code>let</code> expression.  (We will leave aside for the
moment any thoughts about making the function interactive or about the
contents of its documentation string.)

<p>The varlist should set several values.  Clearly, the top of the label
for the vertical axis must be at least the height of the graph, which
means that we must obtain this information here.  Note that the
<code>print-graph-body</code> function also requires this information.  There
is no reason to calculate the height of the graph in two different
places, so we should change <code>print-graph-body</code> from the way we
defined it earlier to take advantage of the calculation.

<p>Similarly, both the function for printing the X axis labels and the
<code>print-graph-body</code> function need to learn the value of the width of
each symbol.  We can perform the calculation here and change the
definition for <code>print-graph-body</code> from the way we defined it in the
previous chapter.

<p>The length of the label for the horizontal axis must be at least as long
as the graph.  However, this information is used only in the function
that prints the horizontal axis, so it does not need to be calculated here.

<p>These thoughts lead us directly to the following form for the varlist
in the <code>let</code> for <code>print-graph</code>:

<pre>(let ((height (apply 'max numbers-list)) ; First version.
      (symbol-width (length graph-blank)))
</pre>

<p>As we shall see, this expression is not quite right.

<p><hr>
Node:<a name="print-Y-axis">print-Y-axis</a>,
Next:<a rel=next href="#print-X-axis">print-X-axis</a>,
Previous:<a rel=previous href="#print-graph%20Varlist">print-graph Varlist</a>,
Up:<a rel=up href="#Full%20Graph">Full Graph</a>
<br>

<h2>C.2 The <code>print-Y-axis</code> Function</h2>

<p>The job of the <code>print-Y-axis</code> function is to print a label for
the vertical axis that looks like this:

<pre>    10 -




     5 -



     1 -
</pre>

<p>The function should be passed the height of the graph, and then should
construct and insert the appropriate numbers and marks.

<p>It is easy enough to see in the figure what the Y axis label should
look like; but to say in words, and then to write a function
definition to do the job is another matter.  It is not quite true to
say that we want a number and a tic every five lines: there are only
three lines between the <code>1</code> and the <code>5</code> (lines 2, 3, and 4),
but four lines between the <code>5</code> and the <code>10</code> (lines 6, 7, 8,
and 9).  It is better to say that we want a number and a tic mark on
the base line (number 1) and then that we want a number and a tic on
the fifth line from the bottom and on every line that is a multiple of
five.

<ul>
<li><a href="#Height%20of%20label">Height of label</a>:              What height for the Y axis? 
<li><a href="#Compute%20a%20Remainder">Compute a Remainder</a>:          How to compute the remainder of a division. 
<li><a href="#Y%20Axis%20Element">Y Axis Element</a>:               Construct a line for the Y axis. 
<li><a href="#Y-axis-column">Y-axis-column</a>:                Generate a list of Y axis labels. 
<li><a href="#print-Y-axis%20Penultimate">print-Y-axis Penultimate</a>:     A not quite final version. 
</ul>

<p><hr>
Node:<a name="Height%20of%20label">Height of label</a>,
Next:<a rel=next href="#Compute%20a%20Remainder">Compute a Remainder</a>,
Previous:<a rel=previous href="#print-Y-axis">print-Y-axis</a>,
Up:<a rel=up href="#print-Y-axis">print-Y-axis</a>
<br>

<h3>What height should the label be?</h3>

<p>The next issue is what height the label should be?  Suppose the maximum
height of tallest column of the graph is seven.  Should the highest
label on the Y axis be <code>5 -</code>, and should the graph stick up above
the label?  Or should the highest label be <code>7 -</code>, and mark the peak
of the graph?  Or should the highest label be <code>10 -</code>, which is a
multiple of five, and be higher than the topmost value of the graph?

<p>The latter form is preferred.  Most graphs are drawn within rectangles
whose sides are an integral number of steps long--5, 10, 15, and so
on for a step distance of five.  But as soon as we decide to use a
step height for the vertical axis, we discover that the simple
expression in the varlist for computing the height is wrong.  The
expression is <code>(apply 'max numbers-list)</code>.  This returns the
precise height, not the maximum height plus whatever is necessary to
round up to the nearest multiple of five.  A more complex expression
is required.

<p>As usual in cases like this, a complex problem becomes simpler if it is
divided into several smaller problems.

<p>First, consider the case when the highest value of the graph is an
integral multiple of five--when it is 5, 10, 15 ,or some higher
multiple of five.  We can use this value as the Y axis height.

<p>A fairly simply way to determine whether a number is a multiple of
five is to divide it by five and see if the division results in a
remainder.  If there is no remainder, the number is a multiple of
five.  Thus, seven divided by five has a remainder of two, and seven
is not an integral multiple of five.  Put in slightly different
language, more reminiscent of the classroom, five goes into seven
once, with a remainder of two.  However, five goes into ten twice,
with no remainder: ten is an integral multiple of five.

<p><hr>
Node:<a name="Compute%20a%20Remainder">Compute a Remainder</a>,
Next:<a rel=next href="#Y%20Axis%20Element">Y Axis Element</a>,
Previous:<a rel=previous href="#Height%20of%20label">Height of label</a>,
Up:<a rel=up href="#print-Y-axis">print-Y-axis</a>
<br>

<h3>C.2.1 Side Trip: Compute a Remainder</h3>

<p>In Lisp, the function for computing a remainder is <code>%</code>.  The
function returns the remainder of its first argument divided by its
second argument.  As it happens, <code>%</code> is a function in Emacs Lisp
that you cannot discover using <code>apropos</code>: you find nothing if you
type <kbd>M-x apropos &lt;RET&gt; remainder &lt;RET&gt;</kbd>.  The only way to
learn of the existence of <code>%</code> is to read about it in a book such
as this or in the Emacs Lisp sources.  The <code>%</code> function is used
in the code for <code>rotate-yank-pointer</code>, which is described in an
appendix.  (See <a href="#rotate-yk-ptr%20body">The Body of <code>rotate-yank-pointer</code></a>.)

<p>You can try the <code>%</code> function by evaluating the following two
expressions:

<pre>(% 7 5)

(% 10 5)
</pre>

<p>The first expression returns 2 and the second expression returns 0.

<p>To test whether the returned value is zero or some other number, we
can use the <code>zerop</code> function.  This function returns <code>t</code> if
its argument, which must be a number, is zero.

<pre>(zerop (% 7 5))
     =&gt; nil

(zerop (% 10 5))
     =&gt; t
</pre>

<p>Thus, the following expression will return <code>t</code> if the height
of the graph is evenly divisible by five:

<pre>(zerop (% height 5))
</pre>

<p>(The value of <code>height</code>, of course, can be found from <code>(apply
'max numbers-list)</code>.)

<p>On the other hand, if the value of <code>height</code> is not a multiple of
five, we want to reset the value to the next higher multiple of five. 
This is straightforward arithmetic using functions with which we are
already familiar.  First, we divide the value of <code>height</code> by five
to determine how many times five goes into the number.  Thus, five
goes into twelve twice.  If we add one to this quotient and multiply by
five, we will obtain the value of the next multiple of five that is
larger than the height.  Five goes into twelve twice.  Add one to two,
and multiply by five; the result is fifteen, which is the next multiple
of five that is higher than twelve.  The Lisp expression for this is:

<pre>(* (1+ (/ height 5)) 5)
</pre>

<p>For example, if you evaluate the following, the result is 15:

<pre>(* (1+ (/ 12 5)) 5)
</pre>

<p>All through this discussion, we have been using `five' as the value
for spacing labels on the Y axis; but we may want to use some other
value.  For generality, we should replace `five' with a variable to
which we can assign a value.  The best name I can think of for this
variable is <code>Y-axis-label-spacing</code>.

<p>Using this term, and an <code>if</code> expression, we produce the
following:

<pre>(if (zerop (% height Y-axis-label-spacing))
    height
  ;; else
  (* (1+ (/ height Y-axis-label-spacing))
     Y-axis-label-spacing))
</pre>

<p>This expression returns the value of <code>height</code> itself if the height
is an even multiple of the value of the <code>Y-axis-label-spacing</code> or
else it computes and returns a value of <code>height</code> that is equal to
the next higher multiple of the value of the <code>Y-axis-label-spacing</code>.

<p>We can now include this expression in the <code>let</code> expression of the
<code>print-graph</code> function (after first setting the value of
<code>Y-axis-label-spacing</code>):

<pre>(defvar Y-axis-label-spacing 5
  "Number of lines from one Y axis label to next.")

<small>...</small>
(let* ((height (apply 'max numbers-list))
       (height-of-top-line
        (if (zerop (% height Y-axis-label-spacing))
            height
          ;; else
          (* (1+ (/ height Y-axis-label-spacing))
             Y-axis-label-spacing)))
       (symbol-width (length graph-blank))))
<small>...</small>
</pre>

<p>(Note use of the  <code>let*</code> function: the initial value of height is
computed once by the <code>(apply 'max numbers-list)</code> expression and
then the resulting value of  <code>height</code> is used to compute its
final value.  See <a href="#fwd-para%20let">The <code>let*</code> expression</a>, for
more about <code>let*</code>.)

<p><hr>
Node:<a name="Y%20Axis%20Element">Y Axis Element</a>,
Next:<a rel=next href="#Y-axis-column">Y-axis-column</a>,
Previous:<a rel=previous href="#Compute%20a%20Remainder">Compute a Remainder</a>,
Up:<a rel=up href="#print-Y-axis">print-Y-axis</a>
<br>

<h3>C.2.2 Construct a Y Axis Element</h3>

<p>When we print the vertical axis, we want to insert strings such as
<code>5&nbsp;-</code> and <code>10&nbsp;-&nbsp;</code> every five lines. 
Moreover, we want the numbers and dashes to line up, so shorter
numbers must be padded with leading spaces.  If some of the strings
use two digit numbers, the strings with single digit numbers must
include a leading blank space before the number.

<p>To figure out the length of the number, the <code>length</code> function is
used.  But the <code>length</code> function works only with a string, not with
a number.  So the number has to be converted from being a number to
being a string.  This is done with the <code>number-to-string</code> function. 
For example,

<pre>(length (number-to-string 35))
     =&gt; 2

(length (number-to-string 100))
     =&gt; 3
</pre>

<p>(<code>number-to-string</code> is also called <code>int-to-string</code>; you will
see this alternative name in various sources.)

<p>In addition, in each label, each number is followed by a string such
as <code>&nbsp;-&nbsp;</code>, which we will call the <code>Y-axis-tic</code> marker. 
This variable is defined with <code>defvar</code>:

<pre>(defvar Y-axis-tic " - "
   "String that follows number in a Y axis label.")
</pre>

<p>The length of the Y label is the sum of the length of the Y axis tic
mark and the length of the number of the top of the graph.

<pre>(length (concat (number-to-string height) Y-axis-tic)))
</pre>

<p>This value will be calculated by the <code>print-graph</code> function in
its varlist as <code>full-Y-label-width</code> and passed on.  (Note that we
did not think to include this in the varlist when we first proposed it.)

<p>To make a complete vertical axis label, a tic mark is concatenated
with a number; and the two together may be preceded by one or more
spaces depending on how long the number is.  The label consists of
three parts: the (optional) leading spaces, the number, and the tic
mark.  The function is passed the value of the number for the specific
row, and the value of the width of the top line, which is calculated
(just once) by <code>print-graph</code>.

<pre>(defun Y-axis-element (number full-Y-label-width)
  "Construct a NUMBERed label element.
A numbered element looks like this `  5 - ',
and is padded as needed so all line up with
the element for the largest number."
  (let* ((leading-spaces
         (- full-Y-label-width
            (length
             (concat (number-to-string number)
                     Y-axis-tic)))))
    (concat
     (make-string leading-spaces ? )
     (number-to-string number)
     Y-axis-tic)))
</pre>

<p>The <code>Y-axis-element</code> function concatenates together the leading
spaces, if any; the number, as a string; and the tic mark.

<p>To figure out how many leading spaces the label will need, the
function subtracts the actual length of the label--the length of the
number plus the length of the tic mark--from the desired label width.

<p>Blank spaces are inserted using the <code>make-string</code> function.  This
function takes two arguments: the first tells it how long the string
will be and the second is a symbol for the character to insert, in a
special format.  The format is a question mark followed by a blank
space, like this, <code>? </code>.  See <a href="elisp.html#Character%20Type">Character Type</a>, for a description of the
syntax for characters.

<p>The <code>number-to-string</code> function is used in the concatenation
expression, to convert the number to a string that is concatenated
with the leading spaces and the tic mark.

<p><hr>
Node:<a name="Y-axis-column">Y-axis-column</a>,
Next:<a rel=next href="#print-Y-axis%20Penultimate">print-Y-axis Penultimate</a>,
Previous:<a rel=previous href="#Y%20Axis%20Element">Y Axis Element</a>,
Up:<a rel=up href="#print-Y-axis">print-Y-axis</a>
<br>

<h3>C.2.3 Create a Y Axis Column</h3>

<p>The preceding functions provide all the tools needed to construct a
function that generates a list of numbered and blank strings to insert
as the label for the vertical axis:

<pre>(defun Y-axis-column (height width-of-label)
  "Construct list of Y axis labels and blank strings.
For HEIGHT of line above base and WIDTH-OF-LABEL."
  (let (Y-axis)
    (while (&gt; height 1)
      (if (zerop (% height Y-axis-label-spacing))
          ;; Insert label.
          (setq Y-axis
                (cons
                 (Y-axis-element height width-of-label)
                 Y-axis))
        ;; Else, insert blanks.
        (setq Y-axis
              (cons
               (make-string width-of-label ? )
               Y-axis)))
      (setq height (1- height)))
    ;; Insert base line.
    (setq Y-axis
          (cons (Y-axis-element 1 width-of-label) Y-axis))
    (nreverse Y-axis)))
</pre>

<p>In this function, we start with the value of <code>height</code> and
repetitively subtract one from its value.  After each subtraction, we
test to see whether the value is an integral multiple of the
<code>Y-axis-label-spacing</code>.  If it is, we construct a numbered label
using the <code>Y-axis-element</code> function; if not, we construct a
blank label using the <code>make-string</code> function.  The base line
consists of the number one followed by a tic mark.

<p><hr>
Node:<a name="print-Y-axis%20Penultimate">print-Y-axis Penultimate</a>,
Previous:<a rel=previous href="#Y-axis-column">Y-axis-column</a>,
Up:<a rel=up href="#print-Y-axis">print-Y-axis</a>
<br>

<h3>C.2.4 The Not Quite Final Version of <code>print-Y-axis</code></h3>

<p>The list constructed by the <code>Y-axis-column</code> function is passed to
the <code>print-Y-axis</code> function, which inserts the list as a column.

<pre>(defun print-Y-axis (height full-Y-label-width)
  "Insert Y axis using HEIGHT and FULL-Y-LABEL-WIDTH.
Height must be the maximum height of the graph.
Full width is the width of the highest label element."
;; Value of height and full-Y-label-width
;; are passed by `print-graph'.
  (let ((start (point)))
    (insert-rectangle
     (Y-axis-column height full-Y-label-width))
    ;; Place point ready for inserting graph.
    (goto-char start)
    ;; Move point forward by value of full-Y-label-width
    (forward-char full-Y-label-width)))
</pre>

<p>The <code>print-Y-axis</code> uses the <code>insert-rectangle</code> function to
insert the Y axis labels created by the <code>Y-axis-column</code> function. 
In addition, it places point at the correct position for printing the body of
the graph.

<p>You can test <code>print-Y-axis</code>:

<ol type=1 start=1>
</p><li>Install

<pre>Y-axis-label-spacing
Y-axis-tic
Y-axis-element
Y-axis-column
print-Y-axis
</pre>

<li>Copy the following expression:

<pre>(print-Y-axis 12 5)
</pre>

<li>Switch to the <code>*scratch*</code> buffer and place the cursor where you
want the axis labels to start.

<li>Type <kbd>M-:</kbd> (<code>eval-expression</code>).

<li>Yank the <code>graph-body-print</code> expression into the minibuffer
with <kbd>C-y</kbd> (<code>yank)</code>.

<li>Press &lt;RET&gt; to evaluate the expression.
</ol>

<p>Emacs will print labels vertically, the top one being
<code>10&nbsp;-&nbsp;</code>.  (The <code>print-graph</code> function
will pass the value of <code>height-of-top-line</code>, which
in this case would end up as 15.)

<p><hr>
Node:<a name="print-X-axis">print-X-axis</a>,
Next:<a rel=next href="#Print%20Whole%20Graph">Print Whole Graph</a>,
Previous:<a rel=previous href="#print-Y-axis">print-Y-axis</a>,
Up:<a rel=up href="#Full%20Graph">Full Graph</a>
<br>

<h2>C.3 The <code>print-X-axis</code> Function</h2>

<p>X axis labels are much like Y axis labels, except that the tics are on a
line above the numbers.  Labels should look like this:

<pre>    |   |    |    |
    1   5   10   15
</pre>

<p>The first tic is under the first column of the graph and is preceded by
several blank spaces.  These spaces provide room in rows above for the Y
axis labels.  The second, third, fourth, and subsequent tics are all
spaced equally, according to the value of <code>X-axis-label-spacing</code>.

<p>The second row of the X axis consists of numbers, preceded by several
blank spaces and also separated according to the value of the variable
<code>X-axis-label-spacing</code>.

<p>The value of the variable <code>X-axis-label-spacing</code> should itself be
measured in units of <code>symbol-width</code>, since you may want to change
the width of the symbols that you are using to print the body of the
graph without changing the ways the graph is labelled.

<ul>
<li><a href="#Similarities%20differences">Similarities differences</a>:     Much like <code>print-Y-axis</code>, but not exactly. 
<li><a href="#X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>:             Create tic marks for the horizontal axis. 
</ul>

<p><hr>
Node:<a name="Similarities%20differences">Similarities differences</a>,
Next:<a rel=next href="#X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>,
Previous:<a rel=previous href="#print-X-axis">print-X-axis</a>,
Up:<a rel=up href="#print-X-axis">print-X-axis</a>
<br>

<h3>Similarities and differences</h3>

<p>The <code>print-X-axis</code> function is constructed in more or less the
same fashion as the <code>print-Y-axis</code> function except that it has
two lines: the line of tic marks and the numbers.  We will write a
separate function to print each line and then combine them within the
<code>print-X-axis</code> function.

<p>This is a three step process:

<ol type=1 start=1>
</p><li>Write a function to print the X axis tic marks, <code>print-X-axis-tic-line</code>.

<li>Write a function to print the X numbers, <code>print-X-axis-numbered-line</code>.

<li>Write a function to print both lines, the <code>print-X-axis</code> function,
using <code>print-X-axis-tic-line</code> and
<code>print-X-axis-numbered-line</code>.
</ol>

<p><hr>
Node:<a name="X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>,
Previous:<a rel=previous href="#Similarities%20differences">Similarities differences</a>,
Up:<a rel=up href="#print-X-axis">print-X-axis</a>
<br>

<h3>C.3.1 X Axis Tic Marks</h3>

<p>The first function should print the X axis tic marks.  We must specify
the tic marks themselves and their spacing:

<pre>(defvar X-axis-label-spacing
  (if (boundp 'graph-blank)
      (* 5 (length graph-blank)) 5)
  "Number of units from one X axis label to next.")
</pre>

<p>(Note that the value of <code>graph-blank</code> is set by another
<code>defvar</code>.  The <code>boundp</code> predicate checks whether it has
already been set; <code>boundp</code> returns <code>nil</code> if it has not. 
If <code>graph-blank</code> were unbound and we did not use this conditional
construction, in GNU Emacs 21, we would enter the debugger and see an
error message saying
<code>Debugger&nbsp;entered--Lisp&nbsp;error: (void-variable&nbsp;graph-blank)</code>.)

<p>Here is the <code>defvar</code> for <code>X-axis-tic-symbol</code>:

<pre>(defvar X-axis-tic-symbol "|"
  "String to insert to point to a column in X axis.")
</pre>

<p>The goal is to make a line that looks like this:

<pre>       |   |    |    |
</pre>

<p>The first tic is indented so that it is under the first column, which is
indented to provide space for the Y axis labels.

<p>A tic element consists of the blank spaces that stretch from one tic to
the next plus a tic symbol.  The number of blanks is determined by the
width of the tic symbol and the <code>X-axis-label-spacing</code>.

<p>The code looks like this:

<pre>;;; X-axis-tic-element
<small>...</small>
(concat
 (make-string
  ;; Make a string of blanks.
  (-  (* symbol-width X-axis-label-spacing)
      (length X-axis-tic-symbol))
  ? )
 ;; Concatenate blanks with tic symbol.
 X-axis-tic-symbol)
<small>...</small>
</pre>

<p>Next, we determine how many blanks are needed to indent the first tic
mark to the first column of the graph.  This uses the value of
<code>full-Y-label-width</code> passed it by the <code>print-graph</code> function.

<p>The code to make <code>X-axis-leading-spaces</code>
looks like this:

<pre>;; X-axis-leading-spaces
<small>...</small>
(make-string full-Y-label-width ? )
<small>...</small>
</pre>

<p>We also need to determine the length of the horizontal axis, which is
the length of the numbers list, and the number of tics in the horizontal
axis:

<pre>;; X-length
<small>...</small>
(length numbers-list)

;; tic-width
<small>...</small>
(* symbol-width X-axis-label-spacing)

;; number-of-X-tics
(if (zerop (% (X-length tic-width)))
    (/ (X-length tic-width))
  (1+ (/ (X-length tic-width))))
</pre>

<p>All this leads us directly to the function for printing the X axis tic line:

<pre>(defun print-X-axis-tic-line
  (number-of-X-tics X-axis-leading-spaces X-axis-tic-element)
  "Print tics for X axis."
    (insert X-axis-leading-spaces)
    (insert X-axis-tic-symbol)  ; Under first column.
    ;; Insert second tic in the right spot.
    (insert (concat
             (make-string
              (-  (* symbol-width X-axis-label-spacing)
                  ;; Insert white space up to second tic symbol.
                  (* 2 (length X-axis-tic-symbol)))
              ? )
             X-axis-tic-symbol))
    ;; Insert remaining tics.
    (while (&gt; number-of-X-tics 1)
      (insert X-axis-tic-element)
      (setq number-of-X-tics (1- number-of-X-tics))))
</pre>

<p>The line of numbers is equally straightforward:

<p>First, we create a numbered element with blank spaces before each number:

<pre>(defun X-axis-element (number)
  "Construct a numbered X axis element."
  (let ((leading-spaces
         (-  (* symbol-width X-axis-label-spacing)
             (length (number-to-string number)))))
    (concat (make-string leading-spaces ? )
            (number-to-string number))))
</pre>

<p>Next, we create the function to print the numbered line, starting with
the number "1" under the first column:

<pre>(defun print-X-axis-numbered-line
  (number-of-X-tics X-axis-leading-spaces)
  "Print line of X-axis numbers"
  (let ((number X-axis-label-spacing))
    (insert X-axis-leading-spaces)
    (insert "1")
    (insert (concat
             (make-string
              ;; Insert white space up to next number.
              (-  (* symbol-width X-axis-label-spacing) 2)
              ? )
             (number-to-string number)))
    ;; Insert remaining numbers.
    (setq number (+ number X-axis-label-spacing))
    (while (&gt; number-of-X-tics 1)
      (insert (X-axis-element number))
      (setq number (+ number X-axis-label-spacing))
      (setq number-of-X-tics (1- number-of-X-tics)))))
</pre>

<p>Finally, we need to write the <code>print-X-axis</code> that uses
<code>print-X-axis-tic-line</code> and
<code>print-X-axis-numbered-line</code>.

<p>The function must determine the local values of the variables used by both
<code>print-X-axis-tic-line</code> and <code>print-X-axis-numbered-line</code>, and
then it must call them.  Also, it must print the carriage return that
separates the two lines.

<p>The function consists of a varlist that specifies five local variables,
and calls to each of the two line printing functions:

<pre>(defun print-X-axis (numbers-list)
  "Print X axis labels to length of NUMBERS-LIST."
  (let* ((leading-spaces
          (make-string full-Y-label-width ? ))
       ;; symbol-width is provided by graph-body-print
       (tic-width (* symbol-width X-axis-label-spacing))
       (X-length (length numbers-list))
       (X-tic
        (concat
         (make-string
          ;; Make a string of blanks.
          (-  (* symbol-width X-axis-label-spacing)
              (length X-axis-tic-symbol))
          ? )
         ;; Concatenate blanks with tic symbol.
         X-axis-tic-symbol))
       (tic-number
        (if (zerop (% X-length tic-width))
            (/ X-length tic-width)
          (1+ (/ X-length tic-width)))))
    (print-X-axis-tic-line tic-number leading-spaces X-tic)
    (insert "\n")
    (print-X-axis-numbered-line tic-number leading-spaces)))
</pre>

<p>You can test <code>print-X-axis</code>:

<ol type=1 start=1>
</p><li>Install <code>X-axis-tic-symbol</code>, <code>X-axis-label-spacing</code>,
<code>print-X-axis-tic-line</code>, as well as <code>X-axis-element</code>,
<code>print-X-axis-numbered-line</code>, and <code>print-X-axis</code>.

<li>Copy the following expression:

<pre>(progn
 (let ((full-Y-label-width 5)
       (symbol-width 1))
   (print-X-axis
    '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))))
</pre>

<li>Switch to the <code>*scratch*</code> buffer and place the cursor where you
want the axis labels to start.

<li>Type <kbd>M-:</kbd> (<code>eval-expression</code>).

<li>Yank the test expression into the minibuffer
with <kbd>C-y</kbd> (<code>yank)</code>.

<li>Press &lt;RET&gt; to evaluate the expression.
</ol>

<p>Emacs will print the horizontal axis like this:

<pre>     |   |    |    |    |
     1   5   10   15   20
</pre>

<p><hr>
Node:<a name="Print%20Whole%20Graph">Print Whole Graph</a>,
Previous:<a rel=previous href="#print-X-axis">print-X-axis</a>,
Up:<a rel=up href="#Full%20Graph">Full Graph</a>
<br>

<h2>C.4 Printing the Whole Graph</h2>

<p>Now we are nearly ready to print the whole graph.

<p>The function to print the graph with the proper labels follows the
outline we created earlier (see <a href="#Full%20Graph">A Graph with Labelled Axes</a>), but with additions.

<p>Here is the outline:

<pre>(defun print-graph (numbers-list)
  "<var>documentation</var><small>...</small>"
  (let ((height  <small>...</small>
        <small>...</small>))
    (print-Y-axis height <small>...</small> )
    (graph-body-print numbers-list)
    (print-X-axis <small>...</small> )))
</pre>

<ul>
<li><a href="#The%20final%20version">The final version</a>:            A few changes. 
<li><a href="#Test%20print-graph">Test print-graph</a>:             Run a short test. 
<li><a href="#Graphing%20words%20in%20defuns">Graphing words in defuns</a>:     Executing the final code. 
<li><a href="#lambda">lambda</a>:                       How to write an anonymous function. 
<li><a href="#mapcar">mapcar</a>:                       Apply a function to elements of a list. 
<li><a href="#Another%20Bug">Another Bug</a>:                  Yet another bug <small>...</small> most insidious. 
<li><a href="#Final%20printed%20graph">Final printed graph</a>:          The graph itself! 
</ul>

<p><hr>
Node:<a name="The%20final%20version">The final version</a>,
Next:<a rel=next href="#Test%20print-graph">Test print-graph</a>,
Previous:<a rel=previous href="#Print%20Whole%20Graph">Print Whole Graph</a>,
Up:<a rel=up href="#Print%20Whole%20Graph">Print Whole Graph</a>
<br>

<h3>Changes for the Final Version</h3>

<p>The final version is different from what we planned in two ways:
first, it contains additional values calculated once in the varlist;
second, it carries an option to specify the labels' increment per row. 
This latter feature turns out to be essential; otherwise, a graph may
have more rows than fit on a display or on a sheet of paper.

<p>This new feature requires a change to the <code>Y-axis-column</code>
function, to add <code>vertical-step</code> to it.  The function looks like
this:

<pre>;;; Final version.
(defun Y-axis-column
  (height width-of-label &amp;optional vertical-step)
  "Construct list of labels for Y axis.
HEIGHT is maximum height of graph.
WIDTH-OF-LABEL is maximum width of label.
VERTICAL-STEP, an option, is a positive integer
that specifies how much a Y axis label increments
for each line.  For example, a step of 5 means
that each line is five units of the graph."
  (let (Y-axis
        (number-per-line (or vertical-step 1)))
    (while (&gt; height 1)
      (if (zerop (% height Y-axis-label-spacing))
          ;; Insert label.
          (setq Y-axis
                (cons
                 (Y-axis-element
                  (* height number-per-line)
                  width-of-label)
                 Y-axis))
        ;; Else, insert blanks.
        (setq Y-axis
              (cons
               (make-string width-of-label ? )
               Y-axis)))
      (setq height (1- height)))
    ;; Insert base line.
    (setq Y-axis (cons (Y-axis-element
                        (or vertical-step 1)
                        width-of-label)
                       Y-axis))
    (nreverse Y-axis)))
</pre>

<p>The values for the maximum height of graph and the width of a symbol
are computed by <code>print-graph</code> in its <code>let</code> expression; so
<code>graph-body-print</code> must be changed to accept them.

<pre>;;; Final version.
(defun graph-body-print (numbers-list height symbol-width)
  "Print a bar graph of the NUMBERS-LIST.
The numbers-list consists of the Y-axis values.
HEIGHT is maximum height of graph.
SYMBOL-WIDTH is number of each column."
  (let (from-position)
    (while numbers-list
      (setq from-position (point))
      (insert-rectangle
       (column-of-graph height (car numbers-list)))
      (goto-char from-position)
      (forward-char symbol-width)
      ;; Draw graph column by column.
      (sit-for 0)
      (setq numbers-list (cdr numbers-list)))
    ;; Place point for X axis labels.
    (forward-line height)
    (insert "\n")))
</pre>

<p>Finally, the code for the <code>print-graph</code> function:

<pre>;;; Final version.
(defun print-graph
  (numbers-list &amp;optional vertical-step)
  "Print labelled bar graph of the NUMBERS-LIST.
The numbers-list consists of the Y-axis values.

Optionally, VERTICAL-STEP, a positive integer,
specifies how much a Y axis label increments for
each line.  For example, a step of 5 means that
each row is five units."
  (let* ((symbol-width (length graph-blank))
         ;; <code>height</code> is both the largest number
         ;; and the number with the most digits.
         (height (apply 'max numbers-list))
         (height-of-top-line
          (if (zerop (% height Y-axis-label-spacing))
              height
            ;; else
            (* (1+ (/ height Y-axis-label-spacing))
               Y-axis-label-spacing)))
         (vertical-step (or vertical-step 1))
         (full-Y-label-width
          (length
           (concat
            (number-to-string
             (* height-of-top-line vertical-step))
            Y-axis-tic))))

    (print-Y-axis
     height-of-top-line full-Y-label-width vertical-step)
    (graph-body-print
     numbers-list height-of-top-line symbol-width)
    (print-X-axis numbers-list)))
</pre>

<p><hr>
Node:<a name="Test%20print-graph">Test print-graph</a>,
Next:<a rel=next href="#Graphing%20words%20in%20defuns">Graphing words in defuns</a>,
Previous:<a rel=previous href="#The%20final%20version">The final version</a>,
Up:<a rel=up href="#Print%20Whole%20Graph">Print Whole Graph</a>
<br>

<h3>C.4.1 Testing <code>print-graph</code></h3>

<p>We can test the <code>print-graph</code> function with a short list of numbers:

<ol type=1 start=1>
</p><li>Install the final versions of <code>Y-axis-column</code>,
<code>graph-body-print</code>, and <code>print-graph</code> (in addition to the
rest of the code.)

<li>Copy the following expression:

<pre>(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1))
</pre>

<li>Switch to the <code>*scratch*</code> buffer and place the cursor where you
want the axis labels to start.

<li>Type <kbd>M-:</kbd> (<code>eval-expression</code>).

<li>Yank the test expression into the minibuffer
with <kbd>C-y</kbd> (<code>yank)</code>.

<li>Press &lt;RET&gt; to evaluate the expression.
</ol>

<p>Emacs will print a graph that looks like this:

<pre>10 -


         *
        **   *
 5 -   ****  *
       **** ***
     * *********
     ************
 1 - *************

     |   |    |    |
     1   5   10   15
</pre>

<p>On the other hand, if you pass <code>print-graph</code> a
<code>vertical-step</code> value of 2, by evaluating this expression:

<pre>(print-graph '(3 2 5 6 7 5 3 4 6 4 3 2 1) 2)
</pre>

<p>The graph looks like this:

<pre>20 -


         *
        **   *
10 -   ****  *
       **** ***
     * *********
     ************
 2 - *************

     |   |    |    |
     1   5   10   15
</pre>

<p>(A question: is the `2' on the bottom of the vertical axis a bug or a
feature?  If you think it is a bug, and should be a `1' instead, (or
even a `0'), you can modify the sources.)

<p><hr>
Node:<a name="Graphing%20words%20in%20defuns">Graphing words in defuns</a>,
Next:<a rel=next href="#lambda">lambda</a>,
Previous:<a rel=previous href="#Test%20print-graph">Test print-graph</a>,
Up:<a rel=up href="#Print%20Whole%20Graph">Print Whole Graph</a>
<br>

<h3>C.4.2 Graphing Numbers of Words and Symbols</h3>

<p>Now for the graph for which all this code was written: a graph that
shows how many function definitions contain fewer than 10 words and
symbols, how many contain between 10 and 19 words and symbols, how
many contain between 20 and 29 words and symbols, and so on.

<p>This is a multi-step process.  First make sure you have loaded all the
requisite code.

<p>It is a good idea to reset the value of <code>top-of-ranges</code> in case
you have set it to some different value.  You can evaluate the
following:

<pre>(setq top-of-ranges
 '(10  20  30  40  50
   60  70  80  90 100
  110 120 130 140 150
  160 170 180 190 200
  210 220 230 240 250
  260 270 280 290 300)
</pre>

<p>Next create a list of the number of words and symbols in each range.

<p>Evaluate the following:

<pre>(setq list-for-graph
       (defuns-per-range
         (sort
          (recursive-lengths-list-many-files
           (directory-files "/usr/local/emacs/lisp"
                            t ".+el$"))
          '&lt;)
         top-of-ranges))
</pre>

<p>On my machine, this takes about an hour.  It looks though 303 Lisp
files in my copy of Emacs version 19.23.  After all that computing,
the <code>list-for-graph</code> has this value:

<pre>(537 1027 955 785 594 483 349 292 224 199 166 120 116 99
90 80 67 48 52 45 41 33 28 26 25 20 12 28 11 13 220)
</pre>

<p>This means that my copy of Emacs has 537 function definitions with
fewer than 10 words or symbols in them, 1,027 function definitions
with 10 to 19 words or symbols in them, 955 function definitions with
20 to 29 words or symbols in them, and so on.

<p>Clearly, just by looking at this list we can see that most function
definitions contain ten to thirty words and symbols.

<p>Now for printing.  We do <em>not</em> want to print a graph that is
1,030 lines high <small>...</small>  Instead, we should print a graph that is
fewer than twenty-five lines high.  A graph that height can be
displayed on almost any monitor, and easily printed on a sheet of paper.

<p>This means that each value in <code>list-for-graph</code> must be reduced to
one-fiftieth its present value.

<p>Here is a short function to do just that, using two functions we have
not yet seen, <code>mapcar</code> and <code>lambda</code>.

<pre>(defun one-fiftieth (full-range)
  "Return list, each number one-fiftieth of previous."
 (mapcar '(lambda (arg) (/ arg 50)) full-range))
</pre>

<p><hr>
Node:<a name="lambda">lambda</a>,
Next:<a rel=next href="#mapcar">mapcar</a>,
Previous:<a rel=previous href="#Graphing%20words%20in%20defuns">Graphing words in defuns</a>,
Up:<a rel=up href="#Print%20Whole%20Graph">Print Whole Graph</a>
<br>

<h3>C.4.3 A <code>lambda</code> Expression: Useful Anonymity</h3>

<p><code>lambda</code> is the symbol for an anonymous function, a function
without a name.  Every time you use an anonymous function, you need to
include its whole body.

<p>Thus,

<pre>(lambda (arg) (/ arg 50))
</pre>

<p>is a function definition that says `return the value resulting from
dividing whatever is passed to me as <code>arg</code> by 50'.

<p>Earlier, for example, we had a function <code>multiply-by-seven</code>; it
multiplied its argument by 7.  This function is similar, except it
divides its argument by 50; and, it has no name.  The anonymous
equivalent of <code>multiply-by-seven</code> is:

<pre>(lambda (number) (* 7 number))
</pre>

<p>(See <a href="#defun">The <code>defun</code> Special Form</a>.)

<p>If we want to multiply 3 by 7, we can write:

<pre>(multiply-by-seven 3)
 \_______________/ ^
         |         |
      function  argument
</pre>


<br><p>
<br><p>
<p>This expression returns 21.

<p>Similarly, we can write:

<pre>((lambda (number) (* 7 number)) 3)
 \____________________________/ ^
               |                |
      anonymous function     argument
</pre>


<br><p>
<br><p>
<p>If we want to divide 100 by 50, we can write:

<pre>((lambda (arg) (/ arg 50)) 100)
 \______________________/  \_/
             |              |
    anonymous function   argument
</pre>


<br><p>
<br><p>
<p>This expression returns 2.  The 100 is passed to the function, which
divides that number by 50.

<p>See <a href="elisp.html#Lambda%20Expressions">Lambda Expressions</a>, for more about <code>lambda</code>.  Lisp and lambda
expressions derive from the Lambda Calculus.

<p><hr>
Node:<a name="mapcar">mapcar</a>,
Next:<a rel=next href="#Another%20Bug">Another Bug</a>,
Previous:<a rel=previous href="#lambda">lambda</a>,
Up:<a rel=up href="#Print%20Whole%20Graph">Print Whole Graph</a>
<br>

<h3>C.4.4 The <code>mapcar</code> Function</h3>

<p><code>mapcar</code> is a function that calls its first argument with each
element of its second argument, in turn.  The second argument must be
a sequence.

<p>The <code>map</code> part of the name comes from the mathematical phrase,
`mapping over a domain', meaning to apply a function to each of the
elements in a domain.  The mathematical phrase is based on the
metaphor of a surveyor walking, one step at a time, over an area he is
mapping.  And <code>car</code>, of course, comes from the Lisp notion of the
first of a list.

<p>For example,

<pre>(mapcar '1+ '(2 4 6))
     =&gt; (3 5 7)
</pre>

<p>The function <code>1+</code> which adds one to its argument, is executed on
<em>each</em> element of the list, and a new list is returned.

<p>Contrast this with <code>apply</code>, which applies its first argument to
all the remaining. 
(See <a href="#Readying%20a%20Graph">Readying a Graph</a>, for a explanation of
<code>apply</code>.)

<p>In the definition of <code>one-fiftieth</code>, the first argument is the
anonymous function:

<pre>(lambda (arg) (/ arg 50))
</pre>

<p>and the second argument is <code>full-range</code>, which will be bound to
<code>list-for-graph</code>.

<p>The whole expression looks like this:

<pre>(mapcar '(lambda (arg) (/ arg 50)) full-range))
</pre>

<p>See <a href="elisp.html#Mapping%20Functions">Mapping Functions</a>, for more about <code>mapcar</code>.

<p>Using the <code>one-fiftieth</code> function, we can generate a list in
which each element is one-fiftieth the size of the corresponding
element in <code>list-for-graph</code>.

<pre>(setq fiftieth-list-for-graph
      (one-fiftieth list-for-graph))
</pre>

<p>The resulting list looks like this:

<pre>(10 20 19 15 11 9 6 5 4 3 3 2 2
1 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 4)
</pre>

<p>This, we are almost ready to print!  (We also notice the loss of
information: many of the higher ranges are 0, meaning that fewer than
50 defuns had that many words or symbols--but not necessarily meaning
that none had that many words or symbols.)

<p><hr>
Node:<a name="Another%20Bug">Another Bug</a>,
Next:<a rel=next href="#Final%20printed%20graph">Final printed graph</a>,
Previous:<a rel=previous href="#mapcar">mapcar</a>,
Up:<a rel=up href="#Print%20Whole%20Graph">Print Whole Graph</a>
<br>

<h3>C.4.5 Another Bug <small>...</small> Most Insidious</h3>

<p>I said `almost ready to print'!  Of course, there is a bug in the
<code>print-graph</code> function <small>...</small>  It has a <code>vertical-step</code>
option, but not a <code>horizontal-step</code> option.  The
<code>top-of-range</code> scale goes from 10 to 300 by tens.  But the
<code>print-graph</code> function will print only by ones.

<p>This is a classic example of what some consider the most insidious
type of bug, the bug of omission.  This is not the kind of bug you can
find by studying the code, for it is not in the code; it is an omitted
feature.  Your best actions are to try your program early and often;
and try to arrange, as much as you can, to write code that is easy to
understand and easy to change.  Try to be aware, whenever you can,
that whatever you have written, <em>will</em> be rewritten, if not soon,
eventually.  A hard maxim to follow.

<p>It is the <code>print-X-axis-numbered-line</code> function that needs the
work; and then the <code>print-X-axis</code> and the <code>print-graph</code>
functions need to be adapted.  Not much needs to be done; there is one
nicety: the numbers ought to line up under the tic marks.  This takes
a little thought.

<p>Here is the corrected <code>print-X-axis-numbered-line</code>:

<pre>(defun print-X-axis-numbered-line
  (number-of-X-tics X-axis-leading-spaces
   &amp;optional horizontal-step)
  "Print line of X-axis numbers"
  (let ((number X-axis-label-spacing)
        (horizontal-step (or horizontal-step 1)))
    (insert X-axis-leading-spaces)
    ;; Delete extra leading spaces.
    (delete-char
     (- (1-
         (length (number-to-string horizontal-step)))))
    (insert (concat
             (make-string
              ;; Insert white space.
              (-  (* symbol-width
                     X-axis-label-spacing)
                  (1-
                   (length
                    (number-to-string horizontal-step)))
                  2)
              ? )
             (number-to-string
              (* number horizontal-step))))
    ;; Insert remaining numbers.
    (setq number (+ number X-axis-label-spacing))
    (while (&gt; number-of-X-tics 1)
      (insert (X-axis-element
               (* number horizontal-step)))
      (setq number (+ number X-axis-label-spacing))
      (setq number-of-X-tics (1- number-of-X-tics)))))
</pre>

<p>If you are reading this in Info, you can see the new versions of
<code>print-X-axis</code> <code>print-graph</code> and evaluate them.  If you are
reading this in a printed book, you can see the changed lines here
(the full text is too much to print).

<pre>(defun print-X-axis (numbers-list horizontal-step)
  "Print X axis labels to length of NUMBERS-LIST.
Optionally, HORIZONTAL-STEP, a positive integer,
specifies how much an X  axis label increments for
each column."
;; Value of symbol-width and full-Y-label-width
;; are passed by `print-graph'.
  (let* ((leading-spaces
          (make-string full-Y-label-width ? ))
       ;; symbol-width is provided by graph-body-print
       (tic-width (* symbol-width X-axis-label-spacing))
       (X-length (length numbers-list))
       (X-tic
        (concat
         (make-string
          ;; Make a string of blanks.
          (-  (* symbol-width X-axis-label-spacing)
              (length X-axis-tic-symbol))
          ? )
         ;; Concatenate blanks with tic symbol.
         X-axis-tic-symbol))
       (tic-number
        (if (zerop (% X-length tic-width))
            (/ X-length tic-width)
          (1+ (/ X-length tic-width)))))

    (print-X-axis-tic-line
     tic-number leading-spaces X-tic)
    (insert "\n")
    (print-X-axis-numbered-line
     tic-number leading-spaces horizontal-step)))
</pre>

<pre>(defun print-graph
  (numbers-list &amp;optional vertical-step horizontal-step)
  "Print labelled bar graph of the NUMBERS-LIST.
The numbers-list consists of the Y-axis values.

Optionally, VERTICAL-STEP, a positive integer,
specifies how much a Y axis label increments for
each line.  For example, a step of 5 means that
each row is five units.

Optionally, HORIZONTAL-STEP, a positive integer,
specifies how much an X  axis label increments for
each column."
  (let* ((symbol-width (length graph-blank))
         ;; <code>height</code> is both the largest number
         ;; and the number with the most digits.
         (height (apply 'max numbers-list))
         (height-of-top-line
          (if (zerop (% height Y-axis-label-spacing))
              height
            ;; else
            (* (1+ (/ height Y-axis-label-spacing))
               Y-axis-label-spacing)))
         (vertical-step (or vertical-step 1))
         (full-Y-label-width
          (length
           (concat
            (number-to-string
             (* height-of-top-line vertical-step))
            Y-axis-tic))))
    (print-Y-axis
     height-of-top-line full-Y-label-width vertical-step)
    (graph-body-print
        numbers-list height-of-top-line symbol-width)
    (print-X-axis numbers-list horizontal-step)))
</pre>

<p><hr>
Node:<a name="Final%20printed%20graph">Final printed graph</a>,
Previous:<a rel=previous href="#Another%20Bug">Another Bug</a>,
Up:<a rel=up href="#Print%20Whole%20Graph">Print Whole Graph</a>
<br>

<h3>C.4.6 The Printed Graph</h3>

<p>When made and installed, you can call the <code>print-graph</code> command
like this:

<pre>(print-graph fiftieth-list-for-graph 50 10)
</pre>

<p>Here is the graph:

<br><p>
<br><p>
<pre>1000 -  *
        **
        **
        **
        **
 750 -  ***
        ***
        ***
        ***
        ****
 500 - *****
       ******
       ******
       ******
       *******
 250 - ********
       *********                     *
       ***********                   *
       *************                 *
  50 - ***************** *           *
       |   |    |    |    |    |    |    |
      10  50  100  150  200  250  300  350
</pre>

<br><p>
<br><p>
<p>The largest group of functions contain 10 - 19 words and symbols each.

<p><hr>
Node:<a name="GNU%20Free%20Documentation%20License">GNU Free Documentation License</a>,
Next:<a rel=next href="#Index">Index</a>,
Previous:<a rel=previous href="#Full%20Graph">Full Graph</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>Appendix D GNU Free Documentation License</h1>

<div align="center">Version 1.1, March 2000</div>
<pre>Copyright &copy; 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre>

<ol type=1 start=0>
</p><li>PREAMBLE

<p>The purpose of this License is to make a manual, textbook, or other
written document <dfn>free</dfn> in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

<p>This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

<p>We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

</p><li>APPLICABILITY AND DEFINITIONS

<p>This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

<p>A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

<p>A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

<p>The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

<p>The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

<p>A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".

<p>Examples of suitable formats for Transparent copies include plain
<small>ASCII</small> without markup, Texinfo input format, LaTeX input format,
<small>SGML</small> or <small>XML</small> using a publicly available
<small>DTD</small>, and standard-conforming simple <small>HTML</small> designed
for human modification.  Opaque formats include PostScript,
<small>PDF</small>, proprietary formats that can be read and edited only by
proprietary word processors, <small>SGML</small> or <small>XML</small> for which
the <small>DTD</small> and/or processing tools are not generally available,
and the machine-generated <small>HTML</small> produced by some word
processors for output purposes only.

<p>The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

</p><li>VERBATIM COPYING

<p>You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

<p>You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

</p><li>COPYING IN QUANTITY

<p>If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition. 
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

<p>If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

<p>If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

<p>It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

</p><li>MODIFICATIONS

<p>You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

<ol type=A start=1>
</p><li>Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

<li>List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).

<li>State on the Title page the name of the publisher of the
Modified Version, as the publisher.

<li>Preserve all the copyright notices of the Document.

<li>Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

<li>Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

<li>Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

<li>Include an unaltered copy of this License.

<li>Preserve the section entitled "History", and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled "History" in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

<li>Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the "History" section. 
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

<li>In any section entitled "Acknowledgments" or "Dedications",
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.

<li>Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

<li>Delete any section entitled "Endorsements".  Such a section
may not be included in the Modified Version.

<li>Do not retitle any existing section as "Endorsements"
or to conflict in title with any Invariant Section.
</ol>

<p>If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice. 
These titles must be distinct from any other section titles.

<p>You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

<p>You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

<p>The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

</p><li>COMBINING DOCUMENTS

<p>You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

<p>The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number. 
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

<p>In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgments",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."

</p><li>COLLECTIONS OF DOCUMENTS

<p>You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

<p>You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

</p><li>AGGREGATION WITH INDEPENDENT WORKS

<p>A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

<p>If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate. 
Otherwise they must appear on covers around the whole aggregate.

</p><li>TRANSLATION

<p>Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4. 
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.

</p><li>TERMINATION

<p>You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

</p><li>FUTURE REVISIONS OF THIS LICENSE

<p>The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<a href="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</a>.

<p>Each version of the License is given a distinguishing version number. 
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
</ol>

<p><hr>
Node:<a name="Index">Index</a>,
Next:<a rel=next href="#About%20the%20Author">About the Author</a>,
Previous:<a rel=previous href="#GNU%20Free%20Documentation%20License">GNU Free Documentation License</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>Index</h1>

<ul compact>
<li><code>% </code>(remainder function)<code></code>: <a href="#Compute%20a%20Remainder">Compute a Remainder</a>
<li><code>(debug)</code> in code: <a href="#debug-on-quit">debug-on-quit</a>
<li><code>* </code>(multiplication)<code></code>: <a href="#defun">defun</a>
<li><code>* </code>for read-only buffer<code></code>: <a href="#Read-only%20buffer">Read-only buffer</a>
<li><code>*scratch*</code> buffer: <a href="#print-elements-of-list">print-elements-of-list</a>
<li><code>.emacs</code> file: <a href="#Emacs%20Initialization">Emacs Initialization</a>
<li><code>.emacs</code> file, beginning of: <a href="#Beginning%20a%20.emacs%20File">Beginning a .emacs File</a>
<li><code>/ </code>(division)<code></code>: <a href="#Large%20buffer%20case">Large buffer case</a>
<li><code>&lt;= </code>(less than or equal)<code></code>: <a href="#Inc%20Example%20parts">Inc Example parts</a>
<li><code>&gt; (greater than)</code>: <a href="#if%20in%20more%20detail">if in more detail</a>
<li>Accumulate, type of recursive pattern: <a href="#Accumulate">Accumulate</a>
<li><code>add-hook</code>: <a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>
<li><code>and</code>: <a href="#fwd-para%20let">fwd-para let</a>, <a href="#kill-new%20function">kill-new function</a>
<li><code>and, </code>introduced<code></code>: <a href="#kill-new%20function">kill-new function</a>
<li>Anonymous function: <a href="#lambda">lambda</a>
<li><code>append-to-buffer</code>: <a href="#append-to-buffer">append-to-buffer</a>
<li><code>apply</code>: <a href="#Columns%20of%20a%20graph">Columns of a graph</a>
<li><code>apropos</code>: <a href="#Columns%20of%20a%20graph">Columns of a graph</a>
<li>Argument as local variable: <a href="#Dec%20Example%20altogether">Dec Example altogether</a>
<li><code>argument</code> defined: <a href="#Arguments">Arguments</a>
<li><code>argument list</code> defined: <a href="#defun">defun</a>
<li>Argument, wrong type of: <a href="#Wrong%20Type%20of%20Argument">Wrong Type of Argument</a>
<li>Arguments: <a href="#Arguments">Arguments</a>
<li>Arguments' data types: <a href="#Data%20types">Data types</a>
<li>Arguments, variable number of: <a href="#Variable%20Number%20of%20Arguments">Variable Number of Arguments</a>
<li>Asterisk for read-only buffer: <a href="#Read-only%20buffer">Read-only buffer</a>
<li>Auto Fill mode turned on: <a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>
<li><code>autoload</code>: <a href="#Autoload">Autoload</a>
<li>Automatic mode selection: <a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>
<li>Axis, print horizontal: <a href="#print-X-axis">print-X-axis</a>
<li>Axis, print vertical: <a href="#print-Y-axis">print-Y-axis</a>
<li><code>beginning-of-buffer</code>: <a href="#beginning-of-buffer">beginning-of-buffer</a>
<li><code>bind</code> defined: <a href="#set%20&amp;%20setq">set & setq</a>
<li><code>body</code> defined: <a href="#defun">defun</a>
<li>Body of graph: <a href="#Readying%20a%20Graph">Readying a Graph</a>
<li>Buffer size: <a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>
<li>Buffer, history of word: <a href="#Buffer%20Names">Buffer Names</a>
<li><code>buffer-file-name</code>: <a href="#Buffer%20Names">Buffer Names</a>
<li><code>buffer-menu, </code>bound to key<code></code>: <a href="#Keybindings">Keybindings</a>
<li><code>buffer-name</code>: <a href="#Buffer%20Names">Buffer Names</a>
<li>Bug, most insidious type: <a href="#Another%20Bug">Another Bug</a>
<li>Building robots: <a href="#Building%20Robots">Building Robots</a>
<li>Building Tags in the Emacs sources: <a href="#etags">etags</a>
<li>Byte compiling: <a href="#Byte%20Compiling">Byte Compiling</a>
<li>C language primitives: <a href="#Primitive%20Functions">Primitive Functions</a>
<li>C, a digression into: <a href="#Digression%20into%20C">Digression into C</a>
<li><code>call</code> defined: <a href="#Switching%20Buffers">Switching Buffers</a>
<li><code>cancel-debug-on-entry</code>: <a href="#debug-on-entry">debug-on-entry</a>
<li><code>car, </code>introduced<code></code>: <a href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<li><code>cdr, </code>introduced<code></code>: <a href="#car%20cdr%20&amp;%20cons">car cdr & cons</a>
<li>Changing a function definition: <a href="#Change%20a%20defun">Change a defun</a>
<li>Chest of Drawers, metaphor for a symbol: <a href="#Symbols%20as%20Chest">Symbols as Chest</a>
<li>Clipping text: <a href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<li>Code installation: <a href="#Permanent%20Installation">Permanent Installation</a>
<li><code>command</code> defined: <a href="#How%20to%20Evaluate">How to Evaluate</a>
<li>Comments in Lisp code: <a href="#Change%20a%20defun">Change a defun</a>
<li>Common Lisp: <a href="#Lisp%20History">Lisp History</a>
<li><code>compare-windows</code>: <a href="#Keybindings">Keybindings</a>
<li><code>concat</code>: <a href="#Data%20types">Data types</a>
<li><code>cond</code>: <a href="#Recursion%20with%20cond">Recursion with cond</a>
<li><code>condition-case</code>: <a href="#condition-case">condition-case</a>
<li>Conditional 'twixt two versions of Emacs: <a href="#Simple%20Extension">Simple Extension</a>
<li>Conditional with <code>if</code>: <a href="#if">if</a>
<li><code>cons, </code>example<code></code>: <a href="#kill-new%20function">kill-new function</a>
<li><code>cons, </code>introduced<code></code>: <a href="#cons">cons</a>
<li><code>copy-region-as-kill</code>: <a href="#copy-region-as-kill">copy-region-as-kill</a>
<li><code>copy-to-buffer</code>: <a href="#copy-to-buffer">copy-to-buffer</a>
<li>Count words recursively: <a href="#recursive-count-words">recursive-count-words</a>
<li><code>count-words-in-defun</code>: <a href="#count-words-in-defun">count-words-in-defun</a>
<li><code>count-words-region</code>: <a href="#count-words-region">count-words-region</a>
<li>Counting: <a href="#Counting">Counting</a>
<li>Counting words in a <code>defun</code>: <a href="#count-words-in-defun">count-words-in-defun</a>, <a href="#Words%20in%20a%20defun">Words in a defun</a>
<li><code>current-buffer</code>: <a href="#Getting%20Buffers">Getting Buffers</a>
<li>Customizing your <code>.emacs</code> file: <a href="#Emacs%20Initialization">Emacs Initialization</a>
<li>Cutting and storing text: <a href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<li>Data types: <a href="#Data%20types">Data types</a>
<li><code>debug</code>: <a href="#debug">debug</a>
<li><code>debug-on-entry</code>: <a href="#debug-on-entry">debug-on-entry</a>
<li><code>debug-on-quit</code>: <a href="#debug-on-quit">debug-on-quit</a>
<li>debugging: <a href="#Debugging">Debugging</a>
<li><code>default-mode-line-format</code>: <a href="#Mode%20Line">Mode Line</a>
<li><code>default.el</code> init file: <a href="#Site-wide%20Init">Site-wide Init</a>
<li><code>defcustom</code>: <a href="#defcustom">defcustom</a>
<li>Deferment in recursion: <a href="#No%20Deferment">No Deferment</a>
<li>Defermentless solution: <a href="#No%20deferment%20solution">No deferment solution</a>
<li>Definition installation: <a href="#Install">Install</a>
<li>Definition writing: <a href="#Writing%20Defuns">Writing Defuns</a>
<li>Definition, how to change: <a href="#Change%20a%20defun">Change a defun</a>
<li><code>defun</code>: <a href="#defun">defun</a>
<li><code>defvar</code>: <a href="#defvar">defvar</a>
<li><code>defvar </code>for a user customizable variable<code></code>: <a href="#defvar%20and%20asterisk">defvar and asterisk</a>
<li><code>defvar </code>with an asterisk<code></code>: <a href="#defvar%20and%20asterisk">defvar and asterisk</a>
<li><code>delete-and-extract-region</code>: <a href="#Digression%20into%20C">Digression into C</a>, <a href="#delete-and-extract-region">delete-and-extract-region</a>
<li>Deleting text: <a href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<li><code>describe-function</code>: <a href="#simplified-beginning-of-buffer">simplified-beginning-of-buffer</a>
<li><code>describe-function, </code>introduced<code></code>: <a href="#Finding%20More">Finding More</a>
<li>Digression into C: <a href="#Digression%20into%20C">Digression into C</a>
<li><code>directory-files</code>: <a href="#Files%20List">Files List</a>
<li>Division: <a href="#Large%20buffer%20case">Large buffer case</a>
<li><code>dolist</code>: <a href="#dolist">dolist</a>
<li><code>dotimes</code>: <a href="#dotimes">dotimes</a>
<li>Drawers, Chest of, metaphor for a symbol: <a href="#Symbols%20as%20Chest">Symbols as Chest</a>
<li>Duplicated words function: <a href="#the-the">the-the</a>
<li><code>edebug</code>: <a href="#edebug">edebug</a>
<li><code>edit-options</code>: <a href="#defvar%20and%20asterisk">defvar and asterisk</a>
<li>Else: <a href="#else">else</a>
<li>Emacs version, choosing: <a href="#Simple%20Extension">Simple Extension</a>
<li><code>empty list</code> defined: <a href="#Lisp%20Atoms">Lisp Atoms</a>
<li><code>empty string</code> defined: <a href="#Review">Review</a>
<li><code>eobp</code>: <a href="#fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>
<li><code>eq</code>: <a href="#Review">Review</a>
<li><code>eq </code>(example of use)<code></code>: <a href="#last-command%20&amp;%20this-command">last-command & this-command</a>
<li><code>equal</code>: <a href="#Review">Review</a>
<li>Erasing text: <a href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<li><code>error</code>: <a href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>
<li>Error for symbol without function: <a href="#Void%20Function">Void Function</a>
<li>Error for symbol without value: <a href="#Void%20Variable">Void Variable</a>
<li>Error message generation: <a href="#Making%20Errors">Making Errors</a>
<li><code>etags</code>: <a href="#etags">etags</a>
<li><code>evaluate</code> defined: <a href="#Run%20a%20Program">Run a Program</a>
<li>Evaluating inner lists: <a href="#Evaluating%20Inner%20Lists">Evaluating Inner Lists</a>
<li>Evaluation: <a href="#Evaluation">Evaluation</a>
<li>Evaluation practice: <a href="#Practicing%20Evaluation">Practicing Evaluation</a>
<li>Every, type of recursive pattern: <a href="#Every">Every</a>
<li>Example variable, <code>fill-column</code>: <a href="#fill-column%20Example">fill-column Example</a>
<li><code>expression</code> defined: <a href="#Lisp%20Atoms">Lisp Atoms</a>
<li>Falsehood and truth in Emacs Lisp: <a href="#Truth%20&amp;%20Falsehood">Truth & Falsehood</a>
<li>FDL, GNU Free Documentation License: <a href="#GNU%20Free%20Documentation%20License">GNU Free Documentation License</a>
<li><code>files-in-below-directory</code>: <a href="#Files%20List">Files List</a>
<li><code>fill-column, </code>an example variable<code></code>: <a href="#fill-column%20Example">fill-column Example</a>
<li>Find a File: <a href="#Find%20a%20File">Find a File</a>
<li>Find function documentation: <a href="#Finding%20More">Finding More</a>
<li>Find source of function: <a href="#Finding%20More">Finding More</a>
<li><code>find-tags</code>: <a href="#Finding%20More">Finding More</a>
<li>Flowers in a field: <a href="#Lisp%20Lists">Lisp Lists</a>
<li>Focusing attention (narrowing): <a href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>
<li><code>form</code> defined: <a href="#Lisp%20Atoms">Lisp Atoms</a>
<li>Formatting convention: <a href="#append%20save-excursion">append save-excursion</a>
<li>Formatting help: <a href="#Typing%20Lists">Typing Lists</a>
<li><code>forward-paragraph</code>: <a href="#forward-paragraph">forward-paragraph</a>
<li><code>forward-sentence</code>: <a href="#forward-sentence">forward-sentence</a>
<li><code>function</code> defined: <a href="#Making%20Errors">Making Errors</a>
<li><code>function definition</code> defined: <a href="#defun">defun</a>
<li>Function definition installation: <a href="#Install">Install</a>
<li>Function definition writing: <a href="#Writing%20Defuns">Writing Defuns</a>
<li>Function definition, how to change: <a href="#Change%20a%20defun">Change a defun</a>
<li>Functions, primitive: <a href="#Primitive%20Functions">Primitive Functions</a>
<li>Generate an error message: <a href="#Making%20Errors">Making Errors</a>
<li>Getting a buffer: <a href="#Getting%20Buffers">Getting Buffers</a>
<li>Global set key: <a href="#Keybindings">Keybindings</a>
<li><code>global-set-key</code>: <a href="#Keybindings">Keybindings</a>
<li><code>global-unset-key</code>: <a href="#Keybindings">Keybindings</a>
<li>Graph prototype: <a href="#Readying%20a%20Graph">Readying a Graph</a>
<li>Graph, printing all: <a href="#Print%20Whole%20Graph">Print Whole Graph</a>
<li><code>graph-body-print</code>: <a href="#graph-body-print">graph-body-print</a>
<li><code>graph-body-print </code>Final version.<code></code>: <a href="#The%20final%20version">The final version</a>
<li>Handling the kill ring: <a href="#Kill%20Ring">Kill Ring</a>
<li>Help typing lists: <a href="#Typing%20Lists">Typing Lists</a>
<li>Horizontal axis printing: <a href="#print-X-axis">print-X-axis</a>
<li><code>if</code>: <a href="#if">if</a>
<li><code>if-part</code> defined: <a href="#if%20in%20more%20detail">if in more detail</a>
<li><code>indent-tabs-mode</code>: <a href="#Indent%20Tabs%20Mode">Indent Tabs Mode</a>
<li>Indentation for formatting: <a href="#append%20save-excursion">append save-excursion</a>
<li>Initialization file: <a href="#Emacs%20Initialization">Emacs Initialization</a>
<li>Initializing a variable: <a href="#defvar">defvar</a>
<li>Inner list evaluation: <a href="#Evaluating%20Inner%20Lists">Evaluating Inner Lists</a>
<li><code>insert-buffer</code>: <a href="#insert-buffer">insert-buffer</a>
<li><code>insert-buffer-substring</code>: <a href="#append-to-buffer%20overview">append-to-buffer overview</a>
<li>Insidious type of bug: <a href="#Another%20Bug">Another Bug</a>
<li>Install a Function Definition: <a href="#Install">Install</a>
<li>Install code permanently: <a href="#Permanent%20Installation">Permanent Installation</a>
<li><code>interactive</code>: <a href="#Interactive">Interactive</a>
<li><code>interactive function</code> defined: <a href="#How%20to%20Evaluate">How to Evaluate</a>
<li>Interactive functions: <a href="#Interactive">Interactive</a>
<li>Interactive options: <a href="#Interactive%20Options">Interactive Options</a>
<li><code>interactive, </code>example use of<code></code>: <a href="#insert-buffer%20interactive">insert-buffer interactive</a>
<li>Interpreter, Lisp, explained: <a href="#Run%20a%20Program">Run a Program</a>
<li>Interpreter, what it does: <a href="#Lisp%20Interpreter">Lisp Interpreter</a>
<li>Keep, type of recursive pattern: <a href="#Keep">Keep</a>
<li>Key setting globally: <a href="#Keybindings">Keybindings</a>
<li>Key unbinding: <a href="#Keybindings">Keybindings</a>
<li>Keymaps: <a href="#Keymaps">Keymaps</a>
<li>Keyword: <a href="#Optional%20Arguments">Optional Arguments</a>
<li>Kill ring handling: <a href="#Kill%20Ring">Kill Ring</a>
<li>Kill ring overview: <a href="#Kill%20Ring%20Overview">Kill Ring Overview</a>
<li><code>kill-append</code>: <a href="#kill-append%20function">kill-append function</a>
<li><code>kill-new</code>: <a href="#kill-new%20function">kill-new function</a>
<li><code>kill-region</code>: <a href="#kill-region">kill-region</a>
<li>Killing text: <a href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<li><code>lambda</code>: <a href="#lambda">lambda</a>
<li><code>length</code>: <a href="#length">length</a>
<li><code>lengths-list-file</code>: <a href="#lengths-list-file">lengths-list-file</a>
<li><code>lengths-list-many-files</code>: <a href="#lengths-list-many-files">lengths-list-many-files</a>
<li><code>let</code>: <a href="#let">let</a>
<li><code>let</code> expression sample: <a href="#Sample%20let%20Expression">Sample let Expression</a>
<li><code>let</code> expression, parts of: <a href="#Parts%20of%20let%20Expression">Parts of let Expression</a>
<li><code>let</code> variables uninitialized: <a href="#Uninitialized%20let%20Variables">Uninitialized let Variables</a>
<li>Library, as term for `file': <a href="#Finding%20More">Finding More</a>
<li><code>line-to-top-of-window</code>: <a href="#Simple%20Extension">Simple Extension</a>
<li>Lisp Atoms: <a href="#Lisp%20Atoms">Lisp Atoms</a>
<li>Lisp history: <a href="#Lisp%20History">Lisp History</a>
<li>Lisp interpreter, explained: <a href="#Run%20a%20Program">Run a Program</a>
<li>Lisp interpreter, what it does: <a href="#Lisp%20Interpreter">Lisp Interpreter</a>
<li>Lisp Lists: <a href="#Lisp%20Lists">Lisp Lists</a>
<li>Lisp macro: <a href="#delete-and-extract-region">delete-and-extract-region</a>
<li><code>list-buffers, </code>rebound<code></code>: <a href="#Keybindings">Keybindings</a>
<li>Lists in a computer: <a href="#List%20Implementation">List Implementation</a>
<li><code>load-library</code>: <a href="#Loading%20Files">Loading Files</a>
<li><code>load-path</code>: <a href="#Loading%20Files">Loading Files</a>
<li>Loading files: <a href="#Loading%20Files">Loading Files</a>
<li><code>local variable</code> defined: <a href="#Prevent%20confusion">Prevent confusion</a>
<li>Local variables list, per-buffer,: <a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>
<li>Location of point: <a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>
<li><code>looking-at</code>: <a href="#fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>
<li>Loops: <a href="#while">while</a>
<li>Loops and recursion: <a href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>
<li>Maclisp: <a href="#Lisp%20History">Lisp History</a>
<li>Macro, lisp: <a href="#delete-and-extract-region">delete-and-extract-region</a>
<li>Mail aliases: <a href="#Mail%20Aliases">Mail Aliases</a>
<li><code>make tags</code>: <a href="#etags">etags</a>
<li><code>make-string</code>: <a href="#Y%20Axis%20Element">Y Axis Element</a>
<li><code>mapcar</code>: <a href="#mapcar">mapcar</a>
<li><code>mark</code>: <a href="#save-excursion">save-excursion</a>
<li><code>mark-whole-buffer</code>: <a href="#mark-whole-buffer">mark-whole-buffer</a>
<li><code>match-beginning</code>: <a href="#fwd-para%20no%20fill%20prefix">fwd-para no fill prefix</a>
<li><code>max</code>: <a href="#Columns%20of%20a%20graph">Columns of a graph</a>
<li><code>message</code>: <a href="#message">message</a>
<li><code>min</code>: <a href="#Columns%20of%20a%20graph">Columns of a graph</a>
<li>Mode line format: <a href="#Mode%20Line">Mode Line</a>
<li>Mode selection, automatic: <a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>
<li>Motion by sentence and paragraph: <a href="#Regexp%20Search">Regexp Search</a>
<li>Narrowing: <a href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>
<li><code>narrowing</code> defined: <a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>
<li><code>nil</code>: <a href="#Truth%20&amp;%20Falsehood">Truth & Falsehood</a>
<li><code>nil</code>, history of word: <a href="#Buffer%20Names">Buffer Names</a>
<li>No deferment solution: <a href="#No%20deferment%20solution">No deferment solution</a>
<li><code>nreverse</code>: <a href="#Counting%20function%20definitions">Counting function definitions</a>
<li><code>nth</code>: <a href="#nth">nth</a>
<li><code>nthcdr</code>: <a href="#copy-region-as-kill">copy-region-as-kill</a>, <a href="#nthcdr">nthcdr</a>
<li><code>nthcdr, </code>example<code></code>: <a href="#kill-new%20function">kill-new function</a>
<li><code>number-to-string</code>: <a href="#Y%20Axis%20Element">Y Axis Element</a>
<li><code>occur</code>: <a href="#Keybindings">Keybindings</a>
<li><code>optional</code>: <a href="#Optional%20Arguments">Optional Arguments</a>
<li>Optional arguments: <a href="#Optional%20Arguments">Optional Arguments</a>
<li>Options for <code>interactive</code>: <a href="#Interactive%20Options">Interactive Options</a>
<li><code>or</code>: <a href="#Insert%20or">Insert or</a>
<li><code>other-buffer</code>: <a href="#Getting%20Buffers">Getting Buffers</a>
<li>Paragraphs, movement by: <a href="#Regexp%20Search">Regexp Search</a>
<li>Parts of a Recursive Definition: <a href="#Recursive%20Definition%20Parts">Recursive Definition Parts</a>
<li>Parts of <code>let</code> expression: <a href="#Parts%20of%20let%20Expression">Parts of let Expression</a>
<li>Passing information to functions: <a href="#Arguments">Arguments</a>
<li>Pasting text: <a href="#Yanking">Yanking</a>
<li>Patterns, searching for: <a href="#Regexp%20Search">Regexp Search</a>
<li>Per-buffer, local variables list: <a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>
<li>Permanent code installation: <a href="#Permanent%20Installation">Permanent Installation</a>
<li><code>point</code>: <a href="#save-excursion">save-excursion</a>
<li><code>point</code> defined: <a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>
<li>Point location: <a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>
<li>Point, mark, buffer preservation: <a href="#save-excursion">save-excursion</a>
<li>Practicing evaluation: <a href="#Practicing%20Evaluation">Practicing Evaluation</a>
<li>Preserving point, mark, and buffer: <a href="#save-excursion">save-excursion</a>
<li>Primitive functions: <a href="#Primitive%20Functions">Primitive Functions</a>
<li>Primitives written in C: <a href="#Primitive%20Functions">Primitive Functions</a>
<li>Print horizontal axis: <a href="#print-X-axis">print-X-axis</a>
<li>Print vertical axis: <a href="#print-Y-axis">print-Y-axis</a>
<li><code>print-elements-of-list</code>: <a href="#print-elements-of-list">print-elements-of-list</a>
<li><code>print-elements-recursively</code>: <a href="#Recursion%20with%20list">Recursion with list</a>
<li><code>print-graph </code>Final version.<code></code>: <a href="#The%20final%20version">The final version</a>
<li><code>print-graph</code> varlist: <a href="#print-graph%20Varlist">print-graph Varlist</a>
<li><code>print-X-axis</code>: <a href="#X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>
<li><code>print-X-axis-numbered-line</code>: <a href="#X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>
<li><code>print-X-axis-tic-line</code>: <a href="#X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>
<li><code>print-Y-axis</code>: <a href="#print-Y-axis%20Penultimate">print-Y-axis Penultimate</a>
<li>Printing the whole graph: <a href="#Print%20Whole%20Graph">Print Whole Graph</a>
<li><code>prog1</code>: <a href="#fwd-para%20between%20paragraphs">fwd-para between paragraphs</a>
<li><code>progn</code>: <a href="#progn">progn</a>
<li>Program, running one: <a href="#Run%20a%20Program">Run a Program</a>
<li>Prototype graph: <a href="#Readying%20a%20Graph">Readying a Graph</a>
<li><code>re-search-forward</code>: <a href="#re-search-forward">re-search-forward</a>
<li>Read-only buffer: <a href="#Read-only%20buffer">Read-only buffer</a>
<li>Readying a graph: <a href="#Readying%20a%20Graph">Readying a Graph</a>
<li>Rebinding keys: <a href="#Keymaps">Keymaps</a>
<li>Recursion: <a href="#Recursion">Recursion</a>
<li>Recursion and loops: <a href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>
<li>Recursion without Deferments: <a href="#No%20Deferment">No Deferment</a>
<li>Recursive Definition Parts: <a href="#Recursive%20Definition%20Parts">Recursive Definition Parts</a>
<li>Recursive pattern: accumulate: <a href="#Accumulate">Accumulate</a>
<li>Recursive pattern: every: <a href="#Every">Every</a>
<li>Recursive pattern: keep: <a href="#Keep">Keep</a>
<li>Recursive Patterns: <a href="#Recursive%20Patterns">Recursive Patterns</a>
<li><code>recursive-count-words</code>: <a href="#recursive-count-words">recursive-count-words</a>
<li><code>recursive-graph-body-print</code>: <a href="#recursive-graph-body-print">recursive-graph-body-print</a>
<li><code>recursive-lengths-list-many-files</code>: <a href="#Several%20files%20recursively">Several files recursively</a>
<li>Recursively counting words: <a href="#recursive-count-words">recursive-count-words</a>
<li><code>regexp-quote</code>: <a href="#fwd-para%20let">fwd-para let</a>
<li>Region, what it is: <a href="#save-excursion">save-excursion</a>
<li>Regular expression searches: <a href="#Regexp%20Search">Regexp Search</a>
<li>Regular expressions for word counting: <a href="#Counting%20Words">Counting Words</a>
<li>Remainder function, <code>%</code>: <a href="#Compute%20a%20Remainder">Compute a Remainder</a>
<li>Repetition (loops): <a href="#Loops%20&amp;%20Recursion">Loops & Recursion</a>
<li>Repetition for word counting: <a href="#Counting%20Words">Counting Words</a>
<li>Retrieving text: <a href="#Yanking">Yanking</a>
<li><code>reverse</code>: <a href="#Counting%20function%20definitions">Counting function definitions</a>
<li>Ring, making a list like a: <a href="#Kill%20Ring">Kill Ring</a>
<li>Robots, building: <a href="#Building%20Robots">Building Robots</a>
<li><code>rotate-yank-pointer</code>: <a href="#rotate-yank-pointer">rotate-yank-pointer</a>, <a href="#Yanking">Yanking</a>
<li>Run a program: <a href="#Run%20a%20Program">Run a Program</a>
<li>Sample <code>let</code> expression: <a href="#Sample%20let%20Expression">Sample let Expression</a>
<li><code>save-excursion</code>: <a href="#save-excursion">save-excursion</a>
<li><code>save-restriction</code>: <a href="#save-restriction">save-restriction</a>
<li><code>search-forward</code>: <a href="#search-forward">search-forward</a>
<li>Searches, illustrating: <a href="#Regexp%20Search">Regexp Search</a>
<li><code>sentence-end</code>: <a href="#sentence-end">sentence-end</a>
<li>Sentences, movement by: <a href="#Regexp%20Search">Regexp Search</a>
<li><code>set</code>: <a href="#Using%20set">Using set</a>
<li><code>set-buffer</code>: <a href="#Switching%20Buffers">Switching Buffers</a>
<li><code>setcar</code>: <a href="#setcar">setcar</a>
<li><code>setcdr</code>: <a href="#setcdr">setcdr</a>
<li><code>setcdr, </code>example<code></code>: <a href="#kill-new%20function">kill-new function</a>
<li><code>setq</code>: <a href="#Using%20setq">Using setq</a>
<li>Setting a key globally: <a href="#Keybindings">Keybindings</a>
<li>Setting value of variable: <a href="#set%20&amp;%20setq">set & setq</a>
<li><code>side effect</code> defined: <a href="#Evaluation">Evaluation</a>
<li>Simple extension in <code>.emacs</code> file: <a href="#Simple%20Extension">Simple Extension</a>
<li><code>simplified-beginning-of-buffer</code>: <a href="#simplified-beginning-of-buffer">simplified-beginning-of-buffer</a>
<li><code>site-init.el</code> init file: <a href="#Site-wide%20Init">Site-wide Init</a>
<li><code>site-load.el</code> init file: <a href="#Site-wide%20Init">Site-wide Init</a>
<li>Size of buffer: <a href="#Buffer%20Size%20&amp;%20Locations">Buffer Size & Locations</a>
<li>Solution without deferment: <a href="#No%20deferment%20solution">No deferment solution</a>
<li><code>sort</code>: <a href="#Sorting">Sorting</a>
<li>Source level debugger: <a href="#edebug">edebug</a>
<li>Special form: <a href="#Complications">Complications</a>
<li>Special form of <code>defun</code>: <a href="#defun">defun</a>
<li>Storing and cutting text: <a href="#Cutting%20&amp;%20Storing%20Text">Cutting & Storing Text</a>
<li><code>string</code> defined: <a href="#Lisp%20Atoms">Lisp Atoms</a>
<li><code>switch-to-buffer</code>: <a href="#Switching%20Buffers">Switching Buffers</a>
<li>Switching to a buffer: <a href="#Switching%20Buffers">Switching Buffers</a>
<li>Symbol names: <a href="#Names%20&amp;%20Definitions">Names & Definitions</a>
<li>Symbol without function error: <a href="#Void%20Function">Void Function</a>
<li>Symbol without value error: <a href="#Void%20Variable">Void Variable</a>
<li>Symbolic expressions, introduced: <a href="#Lisp%20Atoms">Lisp Atoms</a>
<li>Symbols as a Chest of Drawers: <a href="#Symbols%20as%20Chest">Symbols as Chest</a>
<li>Syntax categories and tables: <a href="#Syntax">Syntax</a>
<li>Tabs, preventing: <a href="#Indent%20Tabs%20Mode">Indent Tabs Mode</a>
<li><code>TAGS</code> file, create own: <a href="#etags">etags</a>
<li>Tags in the Emacs sources: <a href="#etags">etags</a>
<li>TAGS table, specifying: <a href="#Finding%20More">Finding More</a>
<li>Text between double quotation marks: <a href="#Lisp%20Atoms">Lisp Atoms</a>
<li>Text Mode turned on: <a href="#Text%20and%20Auto-fill">Text and Auto-fill</a>
<li>Text retrieval: <a href="#Yanking">Yanking</a>
<li><code>the-the</code>: <a href="#the-the">the-the</a>
<li><code>then-part</code> defined: <a href="#if%20in%20more%20detail">if in more detail</a>
<li><code>top-of-ranges</code>: <a href="#Counting%20function%20definitions">Counting function definitions</a>
<li><code>triangle-bugged</code>: <a href="#debug">debug</a>
<li><code>triangle-recursively</code>: <a href="#Recursive%20triangle%20function">Recursive triangle function</a>
<li>Truth and falsehood in Emacs Lisp: <a href="#Truth%20&amp;%20Falsehood">Truth & Falsehood</a>
<li>Types of data: <a href="#Data%20types">Data types</a>
<li>Unbinding key: <a href="#Keybindings">Keybindings</a>
<li>Uninitialized <code>let</code> variables: <a href="#Uninitialized%20let%20Variables">Uninitialized let Variables</a>
<li>Variable initialization: <a href="#defvar">defvar</a>
<li>Variable number of arguments: <a href="#Variable%20Number%20of%20Arguments">Variable Number of Arguments</a>
<li>Variable, example of, <code>fill-column</code>: <a href="#fill-column%20Example">fill-column Example</a>
<li>Variable, setting value: <a href="#set%20&amp;%20setq">set & setq</a>
<li>Variables: <a href="#Variables">Variables</a>
<li><code>varlist</code> defined: <a href="#Parts%20of%20let%20Expression">Parts of let Expression</a>
<li>Version of Emacs, choosing: <a href="#Simple%20Extension">Simple Extension</a>
<li>Vertical axis printing: <a href="#print-Y-axis">print-Y-axis</a>
<li><code>what-line</code>: <a href="#what-line">what-line</a>
<li><code>while</code>: <a href="#while">while</a>
<li>Whitespace in lists: <a href="#Whitespace%20in%20Lists">Whitespace in Lists</a>
<li>Whole graph printing: <a href="#Print%20Whole%20Graph">Print Whole Graph</a>
<li>Widening: <a href="#Narrowing%20&amp;%20Widening">Narrowing & Widening</a>
<li>Widening, example of: <a href="#what-line">what-line</a>
<li>Word counting in a <code>defun</code>: <a href="#Words%20in%20a%20defun">Words in a defun</a>
<li>Words and symbols in defun: <a href="#Words%20and%20Symbols">Words and Symbols</a>
<li>Words, counted recursively: <a href="#recursive-count-words">recursive-count-words</a>
<li>Words, duplicated: <a href="#the-the">the-the</a>
<li>Writing a function definition: <a href="#Writing%20Defuns">Writing Defuns</a>
<li>Wrong type of argument: <a href="#Wrong%20Type%20of%20Argument">Wrong Type of Argument</a>
<li>X axis printing: <a href="#print-X-axis">print-X-axis</a>
<li><code>X-axis-element</code>: <a href="#X%20Axis%20Tic%20Marks">X Axis Tic Marks</a>
<li>Y axis printing: <a href="#print-Y-axis">print-Y-axis</a>
<li><code>Y-axis-column</code>: <a href="#Y-axis-column">Y-axis-column</a>
<li><code>Y-axis-column </code>Final version.<code></code>: <a href="#The%20final%20version">The final version</a>
<li><code>Y-axis-label-spacing</code>: <a href="#Compute%20a%20Remainder">Compute a Remainder</a>
<li><code>Y-axis-tic</code>: <a href="#Y%20Axis%20Element">Y Axis Element</a>
<li><code>yank</code>: <a href="#yank">yank</a>, <a href="#Yanking">Yanking</a>
<li><code>yank-pop</code>: <a href="#yank-pop">yank-pop</a>
<li><code>zap-to-char</code>: <a href="#zap-to-char">zap-to-char</a>
<li><code>zerop</code>: <a href="#rotate-yk-ptr%20body">rotate-yk-ptr body</a>
</ul>

<p><hr>
Node:<a name="About%20the%20Author">About the Author</a>,
Previous:<a rel=previous href="#Index">Index</a>,
Up:<a rel=up href="#Top">Top</a>
<br>

<h1>About the Author</h1>

<blockquote>
Robert J. Chassell has worked with GNU Emacs since 1985.  He writes
and edits, teaches Emacs and Emacs Lisp, and speaks throughout the
world on software freedom.  Chassell was a founding Director and
Treasurer of the Free Software Foundation, Inc.  He is co-author of
the <cite>Texinfo</cite> manual, and has edited more than a dozen other
books.  He graduated from Cambridge University, in England.  He has an
abiding interest in social and economic history and flies his own
airplane. 
</blockquote>

<p>&nbsp;

<hr><h4>Footnotes</h4>
<ol type="1">
<li><a name="fn-1"></a>
<p>It is curious to track the path by which the word `argument'
came to have two different meanings, one in mathematics and the other in
everyday English.  According to the <cite>Oxford English Dictionary</cite>,
the word derives from the Latin for <code>to make clear, prove</code>; thus it
came to mean, by one thread of derivation, `the evidence offered as
proof', which is to say, `the information offered', which led to its
meaning in Lisp.  But in the other thread of derivation, it came to mean
`to assert in a manner against which others may make counter
assertions', which led to the meaning of the word as a disputation. 
(Note here that the English word has two different definitions attached
to it at the same time.  By contrast, in Emacs Lisp, a symbol cannot
have two different function definitions at the same time.)</p>

<li><a name="fn-2"></a>
<p>Actually, you
can use <code>%s</code> to print a number.  It is non-specific.  <code>%d</code>
prints only the part of a number left of a decimal point, and not
anything that is not a number.</p>

<li><a name="fn-3"></a>
<p>Actually, by default, if the buffer from which you
just switched is visible to you in another window, <code>other-buffer</code>
will choose the most recent buffer that you cannot see; this is a
subtlety that I often forget.</p>

<li><a name="fn-4"></a>
<p>Or
rather, to save typing, you probably typed just part of the name, such
as <code>*sc</code>, and then pressed your <kbd>TAB</kbd> key to cause it to
expand to the full name; and then typed your <kbd>RET</kbd> key.</p>

<li><a name="fn-5"></a>
<p>Remember, this
expression will move you to your most recent other buffer that you
cannot see.  If you really want to go to your most recently selected
buffer, even if you can still see it, you need to evaluate the
following more complex expression:

<pre>(switch-to-buffer (other-buffer (current-buffer) t))
</pre>

<p>In this case, the first argument to <code>other-buffer</code> tells it which
buffer to skip--the current one--and the second argument tells
<code>other-buffer</code> it is OK to switch to a visible buffer. 
In regular use, <code>switch-to-buffer</code> takes you to an invisible
window since you would most likely use <kbd>C-x o</kbd> (<code>other-window</code>)
to go to another visible buffer.</p>

<li><a name="fn-6"></a>
<p>Actually, you can
<code>cons</code> an element to an atom to produce a dotted pair.  Dotted
pairs are not discussed here; see <a href="elisp.html#Dotted%20Pair%20Notation">Dotted Pair Notation</a>.</p>

<li><a name="fn-7"></a>
<p>More precisely, and requiring more expert knowledge
to understand, the two integers are of type `Lisp_Object', which can
also be a C union instead of an integer type.</p>

<li><a name="fn-8"></a>
<p>You can write
recursive functions to be frugal or wasteful of mental or computer
resources; as it happens, methods that people find easy--that are
frugal of `mental resources'--sometimes use considerable computer
resources.  Emacs was designed to run on machines that we now consider
limited and its default settings are conservative.  You may want to
increase the values of <code>max-specpdl-size</code> and
<code>max-lisp-eval-depth</code>.  In my <code>.emacs</code> file, I set them to
15 and 30 times their default value.</p>

<li><a name="fn-9"></a>
<p>The phrase <dfn>tail
recursive</dfn> is used to describe such a process, one that uses
`constant space'.</p>

<li><a name="fn-10"></a>
<p>The
jargon is mildly confusing:  <code>triangle-recursive-helper</code> uses a
process that is iterative in a procedure that is recursive.  The
process is called iterative because the computer need only record the
three values, <code>sum</code>, <code>counter</code>, and <code>number</code>; the
procedure is recursive because the function `calls itself'.  On the
other hand, both the process and the procedure used by
<code>triangle-recursively</code> are called recursive.  The word
`recursive' has different meanings in the two contexts.</p>

<li><a name="fn-11"></a>
<p>You
may also add <code>.el</code> to <code>~/.emacs</code> and call it a
<code>~/.emacs.el</code> file.  In the past, you were forbidden to type the
extra keystrokes that the name <code>~/.emacs.el</code> requires, but now
you may.  The new format is consistent with the Emacs Lisp file
naming conventions; the old format saves typing.</p>

<li><a name="fn-12"></a>
<p>When I start instances of Emacs that do not load my
<code>.emacs</code> file or any site file, I also turn off blinking:

<pre>emacs -q --no-site-file -eval '(blink-cursor-mode nil)'
</pre>
</p>

<li><a name="fn-13"></a>
<p>I
occasionally run more modern window managers, such as Sawfish with
GNOME, Enlightenment, SCWM, or KDE; in those cases, I often specify an
image rather than a plain color.</p>

</ol><hr>

</body></html>

